
MDP_HelloWorld.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005998  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08005b88  08005b88  00015b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c88  08005c88  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005c88  08005c88  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005c88  08005c88  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c88  08005c88  00015c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c8c  08005c8c  00015c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005c90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a94  20000010  08005ca0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001aa4  08005ca0  00021aa4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016ee6  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f71  00000000  00000000  00036f1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001358  00000000  00000000  00039e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001250  00000000  00000000  0003b1e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002847  00000000  00000000  0003c438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001438c  00000000  00000000  0003ec7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1888  00000000  00000000  0005300b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f4893  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005188  00000000  00000000  000f48e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000010 	.word	0x20000010
 800020c:	00000000 	.word	0x00000000
 8000210:	08005b70 	.word	0x08005b70

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000014 	.word	0x20000014
 800022c:	08005b70 	.word	0x08005b70

08000230 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000234:	f000 fcd0 	bl	8000bd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000238:	f000 f848 	bl	80002cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800023c:	f000 fa3c 	bl	80006b8 <MX_GPIO_Init>
  MX_TIM8_Init();
 8000240:	f000 f972 	bl	8000528 <MX_TIM8_Init>
  MX_TIM2_Init();
 8000244:	f000 f91c 	bl	8000480 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000248:	f000 f87c 	bl	8000344 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 800024c:	f000 fa0a 	bl	8000664 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000250:	f002 ff7a 	bl	8003148 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000254:	4a11      	ldr	r2, [pc, #68]	; (800029c <main+0x6c>)
 8000256:	2100      	movs	r1, #0
 8000258:	4811      	ldr	r0, [pc, #68]	; (80002a0 <main+0x70>)
 800025a:	f002 ffdb 	bl	8003214 <osThreadNew>
 800025e:	4603      	mov	r3, r0
 8000260:	4a10      	ldr	r2, [pc, #64]	; (80002a4 <main+0x74>)
 8000262:	6013      	str	r3, [r2, #0]

  /* creation of ShowTask */
  ShowTaskHandle = osThreadNew(show, NULL, &ShowTask_attributes);
 8000264:	4a10      	ldr	r2, [pc, #64]	; (80002a8 <main+0x78>)
 8000266:	2100      	movs	r1, #0
 8000268:	4810      	ldr	r0, [pc, #64]	; (80002ac <main+0x7c>)
 800026a:	f002 ffd3 	bl	8003214 <osThreadNew>
 800026e:	4603      	mov	r3, r0
 8000270:	4a0f      	ldr	r2, [pc, #60]	; (80002b0 <main+0x80>)
 8000272:	6013      	str	r3, [r2, #0]

  /* creation of MotorTask */
  MotorTaskHandle = osThreadNew(motors, NULL, &MotorTask_attributes);
 8000274:	4a0f      	ldr	r2, [pc, #60]	; (80002b4 <main+0x84>)
 8000276:	2100      	movs	r1, #0
 8000278:	480f      	ldr	r0, [pc, #60]	; (80002b8 <main+0x88>)
 800027a:	f002 ffcb 	bl	8003214 <osThreadNew>
 800027e:	4603      	mov	r3, r0
 8000280:	4a0e      	ldr	r2, [pc, #56]	; (80002bc <main+0x8c>)
 8000282:	6013      	str	r3, [r2, #0]

  /* creation of EncoderTask */
  EncoderTaskHandle = osThreadNew(encoder_task, NULL, &EncoderTask_attributes);
 8000284:	4a0e      	ldr	r2, [pc, #56]	; (80002c0 <main+0x90>)
 8000286:	2100      	movs	r1, #0
 8000288:	480e      	ldr	r0, [pc, #56]	; (80002c4 <main+0x94>)
 800028a:	f002 ffc3 	bl	8003214 <osThreadNew>
 800028e:	4603      	mov	r3, r0
 8000290:	4a0d      	ldr	r2, [pc, #52]	; (80002c8 <main+0x98>)
 8000292:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000294:	f002 ff8a 	bl	80031ac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000298:	e7fe      	b.n	8000298 <main+0x68>
 800029a:	bf00      	nop
 800029c:	08005be0 	.word	0x08005be0
 80002a0:	08000791 	.word	0x08000791
 80002a4:	20001934 	.word	0x20001934
 80002a8:	08005c04 	.word	0x08005c04
 80002ac:	080007a1 	.word	0x080007a1
 80002b0:	20001980 	.word	0x20001980
 80002b4:	08005c28 	.word	0x08005c28
 80002b8:	080007b1 	.word	0x080007b1
 80002bc:	200019c8 	.word	0x200019c8
 80002c0:	08005c4c 	.word	0x08005c4c
 80002c4:	080007c1 	.word	0x080007c1
 80002c8:	200019cc 	.word	0x200019cc

080002cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b090      	sub	sp, #64	; 0x40
 80002d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d2:	f107 0318 	add.w	r3, r7, #24
 80002d6:	2228      	movs	r2, #40	; 0x28
 80002d8:	2100      	movs	r1, #0
 80002da:	4618      	mov	r0, r3
 80002dc:	f005 fc40 	bl	8005b60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e0:	1d3b      	adds	r3, r7, #4
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]
 80002ec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ee:	2302      	movs	r3, #2
 80002f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f2:	2301      	movs	r3, #1
 80002f4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002f6:	2310      	movs	r3, #16
 80002f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002fa:	2300      	movs	r3, #0
 80002fc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002fe:	f107 0318 	add.w	r3, r7, #24
 8000302:	4618      	mov	r0, r3
 8000304:	f001 f8c6 	bl	8001494 <HAL_RCC_OscConfig>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800030e:	f000 fa5f 	bl	80007d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000312:	230f      	movs	r3, #15
 8000314:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000316:	2300      	movs	r3, #0
 8000318:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800031a:	2300      	movs	r3, #0
 800031c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800031e:	2300      	movs	r3, #0
 8000320:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000322:	2300      	movs	r3, #0
 8000324:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	2100      	movs	r1, #0
 800032a:	4618      	mov	r0, r3
 800032c:	f001 fb32 	bl	8001994 <HAL_RCC_ClockConfig>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000336:	f000 fa4b 	bl	80007d0 <Error_Handler>
  }
}
 800033a:	bf00      	nop
 800033c:	3740      	adds	r7, #64	; 0x40
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
	...

08000344 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b096      	sub	sp, #88	; 0x58
 8000348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800034a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]
 8000356:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000358:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800035c:	2200      	movs	r2, #0
 800035e:	601a      	str	r2, [r3, #0]
 8000360:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000362:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000366:	2200      	movs	r2, #0
 8000368:	601a      	str	r2, [r3, #0]
 800036a:	605a      	str	r2, [r3, #4]
 800036c:	609a      	str	r2, [r3, #8]
 800036e:	60da      	str	r2, [r3, #12]
 8000370:	611a      	str	r2, [r3, #16]
 8000372:	615a      	str	r2, [r3, #20]
 8000374:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000376:	1d3b      	adds	r3, r7, #4
 8000378:	2220      	movs	r2, #32
 800037a:	2100      	movs	r1, #0
 800037c:	4618      	mov	r0, r3
 800037e:	f005 fbef 	bl	8005b60 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000382:	4b3d      	ldr	r3, [pc, #244]	; (8000478 <MX_TIM1_Init+0x134>)
 8000384:	4a3d      	ldr	r2, [pc, #244]	; (800047c <MX_TIM1_Init+0x138>)
 8000386:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 8000388:	4b3b      	ldr	r3, [pc, #236]	; (8000478 <MX_TIM1_Init+0x134>)
 800038a:	22a0      	movs	r2, #160	; 0xa0
 800038c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800038e:	4b3a      	ldr	r3, [pc, #232]	; (8000478 <MX_TIM1_Init+0x134>)
 8000390:	2200      	movs	r2, #0
 8000392:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000394:	4b38      	ldr	r3, [pc, #224]	; (8000478 <MX_TIM1_Init+0x134>)
 8000396:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800039a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800039c:	4b36      	ldr	r3, [pc, #216]	; (8000478 <MX_TIM1_Init+0x134>)
 800039e:	2200      	movs	r2, #0
 80003a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003a2:	4b35      	ldr	r3, [pc, #212]	; (8000478 <MX_TIM1_Init+0x134>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003a8:	4b33      	ldr	r3, [pc, #204]	; (8000478 <MX_TIM1_Init+0x134>)
 80003aa:	2280      	movs	r2, #128	; 0x80
 80003ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003ae:	4832      	ldr	r0, [pc, #200]	; (8000478 <MX_TIM1_Init+0x134>)
 80003b0:	f001 fc8a 	bl	8001cc8 <HAL_TIM_Base_Init>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80003ba:	f000 fa09 	bl	80007d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003c2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003c4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80003c8:	4619      	mov	r1, r3
 80003ca:	482b      	ldr	r0, [pc, #172]	; (8000478 <MX_TIM1_Init+0x134>)
 80003cc:	f001 fe84 	bl	80020d8 <HAL_TIM_ConfigClockSource>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80003d6:	f000 f9fb 	bl	80007d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80003da:	4827      	ldr	r0, [pc, #156]	; (8000478 <MX_TIM1_Init+0x134>)
 80003dc:	f001 fcc3 	bl	8001d66 <HAL_TIM_PWM_Init>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80003e6:	f000 f9f3 	bl	80007d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003ea:	2300      	movs	r3, #0
 80003ec:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003ee:	2300      	movs	r3, #0
 80003f0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80003f6:	4619      	mov	r1, r3
 80003f8:	481f      	ldr	r0, [pc, #124]	; (8000478 <MX_TIM1_Init+0x134>)
 80003fa:	f002 f9ed 	bl	80027d8 <HAL_TIMEx_MasterConfigSynchronization>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000404:	f000 f9e4 	bl	80007d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000408:	2360      	movs	r3, #96	; 0x60
 800040a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800040c:	2300      	movs	r3, #0
 800040e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000410:	2300      	movs	r3, #0
 8000412:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000414:	2300      	movs	r3, #0
 8000416:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000418:	2300      	movs	r3, #0
 800041a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800041c:	2300      	movs	r3, #0
 800041e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000420:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000424:	220c      	movs	r2, #12
 8000426:	4619      	mov	r1, r3
 8000428:	4813      	ldr	r0, [pc, #76]	; (8000478 <MX_TIM1_Init+0x134>)
 800042a:	f001 fd97 	bl	8001f5c <HAL_TIM_PWM_ConfigChannel>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d001      	beq.n	8000438 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000434:	f000 f9cc 	bl	80007d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000438:	2300      	movs	r3, #0
 800043a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800043c:	2300      	movs	r3, #0
 800043e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000440:	2300      	movs	r3, #0
 8000442:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000444:	2300      	movs	r3, #0
 8000446:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000448:	2300      	movs	r3, #0
 800044a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800044c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000450:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000452:	2300      	movs	r3, #0
 8000454:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000456:	1d3b      	adds	r3, r7, #4
 8000458:	4619      	mov	r1, r3
 800045a:	4807      	ldr	r0, [pc, #28]	; (8000478 <MX_TIM1_Init+0x134>)
 800045c:	f002 fa28 	bl	80028b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8000466:	f000 f9b3 	bl	80007d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800046a:	4803      	ldr	r0, [pc, #12]	; (8000478 <MX_TIM1_Init+0x134>)
 800046c:	f000 faac 	bl	80009c8 <HAL_TIM_MspPostInit>

}
 8000470:	bf00      	nop
 8000472:	3758      	adds	r7, #88	; 0x58
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	200019d0 	.word	0x200019d0
 800047c:	40012c00 	.word	0x40012c00

08000480 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b08c      	sub	sp, #48	; 0x30
 8000484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000486:	f107 030c 	add.w	r3, r7, #12
 800048a:	2224      	movs	r2, #36	; 0x24
 800048c:	2100      	movs	r1, #0
 800048e:	4618      	mov	r0, r3
 8000490:	f005 fb66 	bl	8005b60 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000494:	1d3b      	adds	r3, r7, #4
 8000496:	2200      	movs	r2, #0
 8000498:	601a      	str	r2, [r3, #0]
 800049a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800049c:	4b21      	ldr	r3, [pc, #132]	; (8000524 <MX_TIM2_Init+0xa4>)
 800049e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80004a4:	4b1f      	ldr	r3, [pc, #124]	; (8000524 <MX_TIM2_Init+0xa4>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004aa:	4b1e      	ldr	r3, [pc, #120]	; (8000524 <MX_TIM2_Init+0xa4>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80004b0:	4b1c      	ldr	r3, [pc, #112]	; (8000524 <MX_TIM2_Init+0xa4>)
 80004b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004b8:	4b1a      	ldr	r3, [pc, #104]	; (8000524 <MX_TIM2_Init+0xa4>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004be:	4b19      	ldr	r3, [pc, #100]	; (8000524 <MX_TIM2_Init+0xa4>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80004c4:	2303      	movs	r3, #3
 80004c6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80004c8:	2300      	movs	r3, #0
 80004ca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80004cc:	2301      	movs	r3, #1
 80004ce:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80004d0:	2300      	movs	r3, #0
 80004d2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80004d4:	230a      	movs	r3, #10
 80004d6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80004d8:	2300      	movs	r3, #0
 80004da:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80004dc:	2301      	movs	r3, #1
 80004de:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80004e0:	2300      	movs	r3, #0
 80004e2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80004e4:	230a      	movs	r3, #10
 80004e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80004e8:	f107 030c 	add.w	r3, r7, #12
 80004ec:	4619      	mov	r1, r3
 80004ee:	480d      	ldr	r0, [pc, #52]	; (8000524 <MX_TIM2_Init+0xa4>)
 80004f0:	f001 fc91 	bl	8001e16 <HAL_TIM_Encoder_Init>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80004fa:	f000 f969 	bl	80007d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004fe:	2300      	movs	r3, #0
 8000500:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000502:	2300      	movs	r3, #0
 8000504:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000506:	1d3b      	adds	r3, r7, #4
 8000508:	4619      	mov	r1, r3
 800050a:	4806      	ldr	r0, [pc, #24]	; (8000524 <MX_TIM2_Init+0xa4>)
 800050c:	f002 f964 	bl	80027d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000516:	f000 f95b 	bl	80007d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800051a:	bf00      	nop
 800051c:	3730      	adds	r7, #48	; 0x30
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	20001a18 	.word	0x20001a18

08000528 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b096      	sub	sp, #88	; 0x58
 800052c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800052e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
 8000538:	609a      	str	r2, [r3, #8]
 800053a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800053c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000546:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	605a      	str	r2, [r3, #4]
 8000550:	609a      	str	r2, [r3, #8]
 8000552:	60da      	str	r2, [r3, #12]
 8000554:	611a      	str	r2, [r3, #16]
 8000556:	615a      	str	r2, [r3, #20]
 8000558:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800055a:	1d3b      	adds	r3, r7, #4
 800055c:	2220      	movs	r2, #32
 800055e:	2100      	movs	r1, #0
 8000560:	4618      	mov	r0, r3
 8000562:	f005 fafd 	bl	8005b60 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000566:	4b3d      	ldr	r3, [pc, #244]	; (800065c <MX_TIM8_Init+0x134>)
 8000568:	4a3d      	ldr	r2, [pc, #244]	; (8000660 <MX_TIM8_Init+0x138>)
 800056a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800056c:	4b3b      	ldr	r3, [pc, #236]	; (800065c <MX_TIM8_Init+0x134>)
 800056e:	2200      	movs	r2, #0
 8000570:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000572:	4b3a      	ldr	r3, [pc, #232]	; (800065c <MX_TIM8_Init+0x134>)
 8000574:	2200      	movs	r2, #0
 8000576:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8000578:	4b38      	ldr	r3, [pc, #224]	; (800065c <MX_TIM8_Init+0x134>)
 800057a:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800057e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000580:	4b36      	ldr	r3, [pc, #216]	; (800065c <MX_TIM8_Init+0x134>)
 8000582:	2200      	movs	r2, #0
 8000584:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000586:	4b35      	ldr	r3, [pc, #212]	; (800065c <MX_TIM8_Init+0x134>)
 8000588:	2200      	movs	r2, #0
 800058a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800058c:	4b33      	ldr	r3, [pc, #204]	; (800065c <MX_TIM8_Init+0x134>)
 800058e:	2200      	movs	r2, #0
 8000590:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000592:	4832      	ldr	r0, [pc, #200]	; (800065c <MX_TIM8_Init+0x134>)
 8000594:	f001 fb98 	bl	8001cc8 <HAL_TIM_Base_Init>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800059e:	f000 f917 	bl	80007d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80005a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80005ac:	4619      	mov	r1, r3
 80005ae:	482b      	ldr	r0, [pc, #172]	; (800065c <MX_TIM8_Init+0x134>)
 80005b0:	f001 fd92 	bl	80020d8 <HAL_TIM_ConfigClockSource>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80005ba:	f000 f909 	bl	80007d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80005be:	4827      	ldr	r0, [pc, #156]	; (800065c <MX_TIM8_Init+0x134>)
 80005c0:	f001 fbd1 	bl	8001d66 <HAL_TIM_PWM_Init>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80005ca:	f000 f901 	bl	80007d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005ce:	2300      	movs	r3, #0
 80005d0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005d2:	2300      	movs	r3, #0
 80005d4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80005d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80005da:	4619      	mov	r1, r3
 80005dc:	481f      	ldr	r0, [pc, #124]	; (800065c <MX_TIM8_Init+0x134>)
 80005de:	f002 f8fb 	bl	80027d8 <HAL_TIMEx_MasterConfigSynchronization>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80005e8:	f000 f8f2 	bl	80007d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005ec:	2360      	movs	r3, #96	; 0x60
 80005ee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80005f0:	2300      	movs	r3, #0
 80005f2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005f4:	2300      	movs	r3, #0
 80005f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80005f8:	2300      	movs	r3, #0
 80005fa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005fc:	2300      	movs	r3, #0
 80005fe:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000600:	2300      	movs	r3, #0
 8000602:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000604:	2300      	movs	r3, #0
 8000606:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000608:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800060c:	2200      	movs	r2, #0
 800060e:	4619      	mov	r1, r3
 8000610:	4812      	ldr	r0, [pc, #72]	; (800065c <MX_TIM8_Init+0x134>)
 8000612:	f001 fca3 	bl	8001f5c <HAL_TIM_PWM_ConfigChannel>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 800061c:	f000 f8d8 	bl	80007d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000620:	2300      	movs	r3, #0
 8000622:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000624:	2300      	movs	r3, #0
 8000626:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000628:	2300      	movs	r3, #0
 800062a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000630:	2300      	movs	r3, #0
 8000632:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000634:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000638:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800063a:	2300      	movs	r3, #0
 800063c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800063e:	1d3b      	adds	r3, r7, #4
 8000640:	4619      	mov	r1, r3
 8000642:	4806      	ldr	r0, [pc, #24]	; (800065c <MX_TIM8_Init+0x134>)
 8000644:	f002 f934 	bl	80028b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 800064e:	f000 f8bf 	bl	80007d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000652:	bf00      	nop
 8000654:	3758      	adds	r7, #88	; 0x58
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	20001938 	.word	0x20001938
 8000660:	40013400 	.word	0x40013400

08000664 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000668:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <MX_USART3_UART_Init+0x4c>)
 800066a:	4a12      	ldr	r2, [pc, #72]	; (80006b4 <MX_USART3_UART_Init+0x50>)
 800066c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800066e:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <MX_USART3_UART_Init+0x4c>)
 8000670:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000674:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000676:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <MX_USART3_UART_Init+0x4c>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <MX_USART3_UART_Init+0x4c>)
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <MX_USART3_UART_Init+0x4c>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000688:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <MX_USART3_UART_Init+0x4c>)
 800068a:	220c      	movs	r2, #12
 800068c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800068e:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <MX_USART3_UART_Init+0x4c>)
 8000690:	2200      	movs	r2, #0
 8000692:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <MX_USART3_UART_Init+0x4c>)
 8000696:	2200      	movs	r2, #0
 8000698:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800069a:	4805      	ldr	r0, [pc, #20]	; (80006b0 <MX_USART3_UART_Init+0x4c>)
 800069c:	f002 f959 	bl	8002952 <HAL_UART_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80006a6:	f000 f893 	bl	80007d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20001984 	.word	0x20001984
 80006b4:	40004800 	.word	0x40004800

080006b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b088      	sub	sp, #32
 80006bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006be:	f107 0310 	add.w	r3, r7, #16
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006cc:	4b2d      	ldr	r3, [pc, #180]	; (8000784 <MX_GPIO_Init+0xcc>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	4a2c      	ldr	r2, [pc, #176]	; (8000784 <MX_GPIO_Init+0xcc>)
 80006d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006d6:	6193      	str	r3, [r2, #24]
 80006d8:	4b2a      	ldr	r3, [pc, #168]	; (8000784 <MX_GPIO_Init+0xcc>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006e0:	60fb      	str	r3, [r7, #12]
 80006e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e4:	4b27      	ldr	r3, [pc, #156]	; (8000784 <MX_GPIO_Init+0xcc>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	4a26      	ldr	r2, [pc, #152]	; (8000784 <MX_GPIO_Init+0xcc>)
 80006ea:	f043 0304 	orr.w	r3, r3, #4
 80006ee:	6193      	str	r3, [r2, #24]
 80006f0:	4b24      	ldr	r3, [pc, #144]	; (8000784 <MX_GPIO_Init+0xcc>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	f003 0304 	and.w	r3, r3, #4
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fc:	4b21      	ldr	r3, [pc, #132]	; (8000784 <MX_GPIO_Init+0xcc>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	4a20      	ldr	r2, [pc, #128]	; (8000784 <MX_GPIO_Init+0xcc>)
 8000702:	f043 0310 	orr.w	r3, r3, #16
 8000706:	6193      	str	r3, [r2, #24]
 8000708:	4b1e      	ldr	r3, [pc, #120]	; (8000784 <MX_GPIO_Init+0xcc>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	f003 0310 	and.w	r3, r3, #16
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000714:	4b1b      	ldr	r3, [pc, #108]	; (8000784 <MX_GPIO_Init+0xcc>)
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	4a1a      	ldr	r2, [pc, #104]	; (8000784 <MX_GPIO_Init+0xcc>)
 800071a:	f043 0308 	orr.w	r3, r3, #8
 800071e:	6193      	str	r3, [r2, #24]
 8000720:	4b18      	ldr	r3, [pc, #96]	; (8000784 <MX_GPIO_Init+0xcc>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	f003 0308 	and.w	r3, r3, #8
 8000728:	603b      	str	r3, [r7, #0]
 800072a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 800072c:	2200      	movs	r2, #0
 800072e:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 8000732:	4815      	ldr	r0, [pc, #84]	; (8000788 <MX_GPIO_Init+0xd0>)
 8000734:	f000 fe96 	bl	8001464 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin, GPIO_PIN_RESET);
 8000738:	2200      	movs	r2, #0
 800073a:	210c      	movs	r1, #12
 800073c:	4813      	ldr	r0, [pc, #76]	; (800078c <MX_GPIO_Init+0xd4>)
 800073e:	f000 fe91 	bl	8001464 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8000742:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 8000746:	613b      	str	r3, [r7, #16]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000748:	2301      	movs	r3, #1
 800074a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000750:	2302      	movs	r3, #2
 8000752:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000754:	f107 0310 	add.w	r3, r7, #16
 8000758:	4619      	mov	r1, r3
 800075a:	480b      	ldr	r0, [pc, #44]	; (8000788 <MX_GPIO_Init+0xd0>)
 800075c:	f000 fcee 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin;
 8000760:	230c      	movs	r3, #12
 8000762:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000764:	2301      	movs	r3, #1
 8000766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800076c:	2303      	movs	r3, #3
 800076e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000770:	f107 0310 	add.w	r3, r7, #16
 8000774:	4619      	mov	r1, r3
 8000776:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_GPIO_Init+0xd4>)
 8000778:	f000 fce0 	bl	800113c <HAL_GPIO_Init>

}
 800077c:	bf00      	nop
 800077e:	3720      	adds	r7, #32
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	40021000 	.word	0x40021000
 8000788:	40011800 	.word	0x40011800
 800078c:	40010800 	.word	0x40010800

08000790 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000798:	2001      	movs	r0, #1
 800079a:	f002 fde5 	bl	8003368 <osDelay>
 800079e:	e7fb      	b.n	8000798 <StartDefaultTask+0x8>

080007a0 <show>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_show */
void show(void *argument)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN show */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007a8:	2001      	movs	r0, #1
 80007aa:	f002 fddd 	bl	8003368 <osDelay>
 80007ae:	e7fb      	b.n	80007a8 <show+0x8>

080007b0 <motors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motors */
void motors(void *argument)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN motors */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007b8:	2001      	movs	r0, #1
 80007ba:	f002 fdd5 	bl	8003368 <osDelay>
 80007be:	e7fb      	b.n	80007b8 <motors+0x8>

080007c0 <encoder_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoder_task */
void encoder_task(void *argument)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN encoder_task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007c8:	2001      	movs	r0, #1
 80007ca:	f002 fdcd 	bl	8003368 <osDelay>
 80007ce:	e7fb      	b.n	80007c8 <encoder_task+0x8>

080007d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d4:	b672      	cpsid	i
}
 80007d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <Error_Handler+0x8>
	...

080007dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007e2:	4b18      	ldr	r3, [pc, #96]	; (8000844 <HAL_MspInit+0x68>)
 80007e4:	699b      	ldr	r3, [r3, #24]
 80007e6:	4a17      	ldr	r2, [pc, #92]	; (8000844 <HAL_MspInit+0x68>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6193      	str	r3, [r2, #24]
 80007ee:	4b15      	ldr	r3, [pc, #84]	; (8000844 <HAL_MspInit+0x68>)
 80007f0:	699b      	ldr	r3, [r3, #24]
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fa:	4b12      	ldr	r3, [pc, #72]	; (8000844 <HAL_MspInit+0x68>)
 80007fc:	69db      	ldr	r3, [r3, #28]
 80007fe:	4a11      	ldr	r2, [pc, #68]	; (8000844 <HAL_MspInit+0x68>)
 8000800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000804:	61d3      	str	r3, [r2, #28]
 8000806:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <HAL_MspInit+0x68>)
 8000808:	69db      	ldr	r3, [r3, #28]
 800080a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000812:	2200      	movs	r2, #0
 8000814:	210f      	movs	r1, #15
 8000816:	f06f 0001 	mvn.w	r0, #1
 800081a:	f000 fb16 	bl	8000e4a <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800081e:	4b0a      	ldr	r3, [pc, #40]	; (8000848 <HAL_MspInit+0x6c>)
 8000820:	685b      	ldr	r3, [r3, #4]
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	4a04      	ldr	r2, [pc, #16]	; (8000848 <HAL_MspInit+0x6c>)
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800083a:	bf00      	nop
 800083c:	3710      	adds	r7, #16
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40021000 	.word	0x40021000
 8000848:	40010000 	.word	0x40010000

0800084c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08a      	sub	sp, #40	; 0x28
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000854:	f107 0318 	add.w	r3, r7, #24
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4a1e      	ldr	r2, [pc, #120]	; (80008e0 <HAL_TIM_Base_MspInit+0x94>)
 8000868:	4293      	cmp	r3, r2
 800086a:	d10c      	bne.n	8000886 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800086c:	4b1d      	ldr	r3, [pc, #116]	; (80008e4 <HAL_TIM_Base_MspInit+0x98>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	4a1c      	ldr	r2, [pc, #112]	; (80008e4 <HAL_TIM_Base_MspInit+0x98>)
 8000872:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000876:	6193      	str	r3, [r2, #24]
 8000878:	4b1a      	ldr	r3, [pc, #104]	; (80008e4 <HAL_TIM_Base_MspInit+0x98>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000880:	617b      	str	r3, [r7, #20]
 8000882:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000884:	e028      	b.n	80008d8 <HAL_TIM_Base_MspInit+0x8c>
  else if(htim_base->Instance==TIM8)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a17      	ldr	r2, [pc, #92]	; (80008e8 <HAL_TIM_Base_MspInit+0x9c>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d123      	bne.n	80008d8 <HAL_TIM_Base_MspInit+0x8c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000890:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <HAL_TIM_Base_MspInit+0x98>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	4a13      	ldr	r2, [pc, #76]	; (80008e4 <HAL_TIM_Base_MspInit+0x98>)
 8000896:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800089a:	6193      	str	r3, [r2, #24]
 800089c:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <HAL_TIM_Base_MspInit+0x98>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008a4:	613b      	str	r3, [r7, #16]
 80008a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a8:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <HAL_TIM_Base_MspInit+0x98>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	4a0d      	ldr	r2, [pc, #52]	; (80008e4 <HAL_TIM_Base_MspInit+0x98>)
 80008ae:	f043 0310 	orr.w	r3, r3, #16
 80008b2:	6193      	str	r3, [r2, #24]
 80008b4:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <HAL_TIM_Base_MspInit+0x98>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	f003 0310 	and.w	r3, r3, #16
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWMA_Pin;
 80008c0:	2340      	movs	r3, #64	; 0x40
 80008c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c4:	2302      	movs	r3, #2
 80008c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2302      	movs	r3, #2
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWMA_GPIO_Port, &GPIO_InitStruct);
 80008cc:	f107 0318 	add.w	r3, r7, #24
 80008d0:	4619      	mov	r1, r3
 80008d2:	4806      	ldr	r0, [pc, #24]	; (80008ec <HAL_TIM_Base_MspInit+0xa0>)
 80008d4:	f000 fc32 	bl	800113c <HAL_GPIO_Init>
}
 80008d8:	bf00      	nop
 80008da:	3728      	adds	r7, #40	; 0x28
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40012c00 	.word	0x40012c00
 80008e4:	40021000 	.word	0x40021000
 80008e8:	40013400 	.word	0x40013400
 80008ec:	40011000 	.word	0x40011000

080008f0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08a      	sub	sp, #40	; 0x28
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800090e:	d14e      	bne.n	80009ae <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000910:	4b29      	ldr	r3, [pc, #164]	; (80009b8 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000912:	69db      	ldr	r3, [r3, #28]
 8000914:	4a28      	ldr	r2, [pc, #160]	; (80009b8 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000916:	f043 0301 	orr.w	r3, r3, #1
 800091a:	61d3      	str	r3, [r2, #28]
 800091c:	4b26      	ldr	r3, [pc, #152]	; (80009b8 <HAL_TIM_Encoder_MspInit+0xc8>)
 800091e:	69db      	ldr	r3, [r3, #28]
 8000920:	f003 0301 	and.w	r3, r3, #1
 8000924:	613b      	str	r3, [r7, #16]
 8000926:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000928:	4b23      	ldr	r3, [pc, #140]	; (80009b8 <HAL_TIM_Encoder_MspInit+0xc8>)
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	4a22      	ldr	r2, [pc, #136]	; (80009b8 <HAL_TIM_Encoder_MspInit+0xc8>)
 800092e:	f043 0304 	orr.w	r3, r3, #4
 8000932:	6193      	str	r3, [r2, #24]
 8000934:	4b20      	ldr	r3, [pc, #128]	; (80009b8 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	f003 0304 	and.w	r3, r3, #4
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000940:	4b1d      	ldr	r3, [pc, #116]	; (80009b8 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	4a1c      	ldr	r2, [pc, #112]	; (80009b8 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000946:	f043 0308 	orr.w	r3, r3, #8
 800094a:	6193      	str	r3, [r2, #24]
 800094c:	4b1a      	ldr	r3, [pc, #104]	; (80009b8 <HAL_TIM_Encoder_MspInit+0xc8>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	f003 0308 	and.w	r3, r3, #8
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000958:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800095c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095e:	2300      	movs	r3, #0
 8000960:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000966:	f107 0314 	add.w	r3, r7, #20
 800096a:	4619      	mov	r1, r3
 800096c:	4813      	ldr	r0, [pc, #76]	; (80009bc <HAL_TIM_Encoder_MspInit+0xcc>)
 800096e:	f000 fbe5 	bl	800113c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000972:	2308      	movs	r3, #8
 8000974:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000976:	2300      	movs	r3, #0
 8000978:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097e:	f107 0314 	add.w	r3, r7, #20
 8000982:	4619      	mov	r1, r3
 8000984:	480e      	ldr	r0, [pc, #56]	; (80009c0 <HAL_TIM_Encoder_MspInit+0xd0>)
 8000986:	f000 fbd9 	bl	800113c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <HAL_TIM_Encoder_MspInit+0xd4>)
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
 8000990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000992:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000996:	627b      	str	r3, [r7, #36]	; 0x24
 8000998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800099e:	627b      	str	r3, [r7, #36]	; 0x24
 80009a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
 80009a8:	4a06      	ldr	r2, [pc, #24]	; (80009c4 <HAL_TIM_Encoder_MspInit+0xd4>)
 80009aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ac:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80009ae:	bf00      	nop
 80009b0:	3728      	adds	r7, #40	; 0x28
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40021000 	.word	0x40021000
 80009bc:	40010800 	.word	0x40010800
 80009c0:	40010c00 	.word	0x40010c00
 80009c4:	40010000 	.word	0x40010000

080009c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b088      	sub	sp, #32
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	f107 030c 	add.w	r3, r7, #12
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a19      	ldr	r2, [pc, #100]	; (8000a48 <HAL_TIM_MspPostInit+0x80>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d12a      	bne.n	8000a3e <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80009e8:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <HAL_TIM_MspPostInit+0x84>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	4a17      	ldr	r2, [pc, #92]	; (8000a4c <HAL_TIM_MspPostInit+0x84>)
 80009ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009f2:	6193      	str	r3, [r2, #24]
 80009f4:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <HAL_TIM_MspPostInit+0x84>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000a00:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a04:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a06:	2302      	movs	r3, #2
 8000a08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a0e:	f107 030c 	add.w	r3, r7, #12
 8000a12:	4619      	mov	r1, r3
 8000a14:	480e      	ldr	r0, [pc, #56]	; (8000a50 <HAL_TIM_MspPostInit+0x88>)
 8000a16:	f000 fb91 	bl	800113c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_ENABLE();
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <HAL_TIM_MspPostInit+0x8c>)
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	61fb      	str	r3, [r7, #28]
 8000a20:	69fb      	ldr	r3, [r7, #28]
 8000a22:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000a26:	61fb      	str	r3, [r7, #28]
 8000a28:	69fb      	ldr	r3, [r7, #28]
 8000a2a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000a2e:	61fb      	str	r3, [r7, #28]
 8000a30:	69fb      	ldr	r3, [r7, #28]
 8000a32:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000a36:	61fb      	str	r3, [r7, #28]
 8000a38:	4a06      	ldr	r2, [pc, #24]	; (8000a54 <HAL_TIM_MspPostInit+0x8c>)
 8000a3a:	69fb      	ldr	r3, [r7, #28]
 8000a3c:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000a3e:	bf00      	nop
 8000a40:	3720      	adds	r7, #32
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40012c00 	.word	0x40012c00
 8000a4c:	40021000 	.word	0x40021000
 8000a50:	40011800 	.word	0x40011800
 8000a54:	40010000 	.word	0x40010000

08000a58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08a      	sub	sp, #40	; 0x28
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a29      	ldr	r2, [pc, #164]	; (8000b18 <HAL_UART_MspInit+0xc0>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d14b      	bne.n	8000b10 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a78:	4b28      	ldr	r3, [pc, #160]	; (8000b1c <HAL_UART_MspInit+0xc4>)
 8000a7a:	69db      	ldr	r3, [r3, #28]
 8000a7c:	4a27      	ldr	r2, [pc, #156]	; (8000b1c <HAL_UART_MspInit+0xc4>)
 8000a7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a82:	61d3      	str	r3, [r2, #28]
 8000a84:	4b25      	ldr	r3, [pc, #148]	; (8000b1c <HAL_UART_MspInit+0xc4>)
 8000a86:	69db      	ldr	r3, [r3, #28]
 8000a88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a8c:	613b      	str	r3, [r7, #16]
 8000a8e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a90:	4b22      	ldr	r3, [pc, #136]	; (8000b1c <HAL_UART_MspInit+0xc4>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	4a21      	ldr	r2, [pc, #132]	; (8000b1c <HAL_UART_MspInit+0xc4>)
 8000a96:	f043 0310 	orr.w	r3, r3, #16
 8000a9a:	6193      	str	r3, [r2, #24]
 8000a9c:	4b1f      	ldr	r3, [pc, #124]	; (8000b1c <HAL_UART_MspInit+0xc4>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	f003 0310 	and.w	r3, r3, #16
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000aa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	4619      	mov	r1, r3
 8000abc:	4818      	ldr	r0, [pc, #96]	; (8000b20 <HAL_UART_MspInit+0xc8>)
 8000abe:	f000 fb3d 	bl	800113c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ac2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ac6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4812      	ldr	r0, [pc, #72]	; (8000b20 <HAL_UART_MspInit+0xc8>)
 8000ad8:	f000 fb30 	bl	800113c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8000adc:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <HAL_UART_MspInit+0xcc>)
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8000aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aec:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
 8000af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af4:	f043 0310 	orr.w	r3, r3, #16
 8000af8:	627b      	str	r3, [r7, #36]	; 0x24
 8000afa:	4a0a      	ldr	r2, [pc, #40]	; (8000b24 <HAL_UART_MspInit+0xcc>)
 8000afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afe:	6053      	str	r3, [r2, #4]

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000b00:	2200      	movs	r2, #0
 8000b02:	2105      	movs	r1, #5
 8000b04:	2027      	movs	r0, #39	; 0x27
 8000b06:	f000 f9a0 	bl	8000e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000b0a:	2027      	movs	r0, #39	; 0x27
 8000b0c:	f000 f9b9 	bl	8000e82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b10:	bf00      	nop
 8000b12:	3728      	adds	r7, #40	; 0x28
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40004800 	.word	0x40004800
 8000b1c:	40021000 	.word	0x40021000
 8000b20:	40011000 	.word	0x40011000
 8000b24:	40010000 	.word	0x40010000

08000b28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <NMI_Handler+0x4>

08000b2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b32:	e7fe      	b.n	8000b32 <HardFault_Handler+0x4>

08000b34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <MemManage_Handler+0x4>

08000b3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b3e:	e7fe      	b.n	8000b3e <BusFault_Handler+0x4>

08000b40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <UsageFault_Handler+0x4>

08000b46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bc80      	pop	{r7}
 8000b50:	4770      	bx	lr

08000b52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b56:	f000 f885 	bl	8000c64 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000b5a:	f004 f811 	bl	8004b80 <xTaskGetSchedulerState>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d001      	beq.n	8000b68 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000b64:	f004 fd70 	bl	8005648 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000b70:	4802      	ldr	r0, [pc, #8]	; (8000b7c <USART3_IRQHandler+0x10>)
 8000b72:	f001 ff3b 	bl	80029ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20001984 	.word	0x20001984

08000b80 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr

08000b8c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b8c:	480c      	ldr	r0, [pc, #48]	; (8000bc0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b8e:	490d      	ldr	r1, [pc, #52]	; (8000bc4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b90:	4a0d      	ldr	r2, [pc, #52]	; (8000bc8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b94:	e002      	b.n	8000b9c <LoopCopyDataInit>

08000b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9a:	3304      	adds	r3, #4

08000b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba0:	d3f9      	bcc.n	8000b96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba2:	4a0a      	ldr	r2, [pc, #40]	; (8000bcc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ba4:	4c0a      	ldr	r4, [pc, #40]	; (8000bd0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba8:	e001      	b.n	8000bae <LoopFillZerobss>

08000baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bac:	3204      	adds	r2, #4

08000bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb0:	d3fb      	bcc.n	8000baa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bb2:	f7ff ffe5 	bl	8000b80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bb6:	f004 ffa1 	bl	8005afc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bba:	f7ff fb39 	bl	8000230 <main>
  bx lr
 8000bbe:	4770      	bx	lr
  ldr r0, =_sdata
 8000bc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000bc8:	08005c90 	.word	0x08005c90
  ldr r2, =_sbss
 8000bcc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000bd0:	20001aa4 	.word	0x20001aa4

08000bd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bd4:	e7fe      	b.n	8000bd4 <ADC1_2_IRQHandler>
	...

08000bd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bdc:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <HAL_Init+0x28>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a07      	ldr	r2, [pc, #28]	; (8000c00 <HAL_Init+0x28>)
 8000be2:	f043 0310 	orr.w	r3, r3, #16
 8000be6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be8:	2003      	movs	r0, #3
 8000bea:	f000 f923 	bl	8000e34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bee:	200f      	movs	r0, #15
 8000bf0:	f000 f808 	bl	8000c04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bf4:	f7ff fdf2 	bl	80007dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40022000 	.word	0x40022000

08000c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c0c:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <HAL_InitTick+0x54>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <HAL_InitTick+0x58>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	4619      	mov	r1, r3
 8000c16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c22:	4618      	mov	r0, r3
 8000c24:	f000 f93b 	bl	8000e9e <HAL_SYSTICK_Config>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e00e      	b.n	8000c50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2b0f      	cmp	r3, #15
 8000c36:	d80a      	bhi.n	8000c4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	6879      	ldr	r1, [r7, #4]
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	f000 f903 	bl	8000e4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c44:	4a06      	ldr	r2, [pc, #24]	; (8000c60 <HAL_InitTick+0x5c>)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	e000      	b.n	8000c50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000000 	.word	0x20000000
 8000c5c:	20000008 	.word	0x20000008
 8000c60:	20000004 	.word	0x20000004

08000c64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c68:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <HAL_IncTick+0x1c>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <HAL_IncTick+0x20>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4413      	add	r3, r2
 8000c74:	4a03      	ldr	r2, [pc, #12]	; (8000c84 <HAL_IncTick+0x20>)
 8000c76:	6013      	str	r3, [r2, #0]
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr
 8000c80:	20000008 	.word	0x20000008
 8000c84:	20001a60 	.word	0x20001a60

08000c88 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c8c:	4b02      	ldr	r3, [pc, #8]	; (8000c98 <HAL_GetTick+0x10>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bc80      	pop	{r7}
 8000c96:	4770      	bx	lr
 8000c98:	20001a60 	.word	0x20001a60

08000c9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	f003 0307 	and.w	r3, r3, #7
 8000caa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cac:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cb2:	68ba      	ldr	r2, [r7, #8]
 8000cb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cb8:	4013      	ands	r3, r2
 8000cba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ccc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cce:	4a04      	ldr	r2, [pc, #16]	; (8000ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	60d3      	str	r3, [r2, #12]
}
 8000cd4:	bf00      	nop
 8000cd6:	3714      	adds	r7, #20
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bc80      	pop	{r7}
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce8:	4b04      	ldr	r3, [pc, #16]	; (8000cfc <__NVIC_GetPriorityGrouping+0x18>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	0a1b      	lsrs	r3, r3, #8
 8000cee:	f003 0307 	and.w	r3, r3, #7
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bc80      	pop	{r7}
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	db0b      	blt.n	8000d2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	f003 021f 	and.w	r2, r3, #31
 8000d18:	4906      	ldr	r1, [pc, #24]	; (8000d34 <__NVIC_EnableIRQ+0x34>)
 8000d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1e:	095b      	lsrs	r3, r3, #5
 8000d20:	2001      	movs	r0, #1
 8000d22:	fa00 f202 	lsl.w	r2, r0, r2
 8000d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d2a:	bf00      	nop
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bc80      	pop	{r7}
 8000d32:	4770      	bx	lr
 8000d34:	e000e100 	.word	0xe000e100

08000d38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	6039      	str	r1, [r7, #0]
 8000d42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	db0a      	blt.n	8000d62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	b2da      	uxtb	r2, r3
 8000d50:	490c      	ldr	r1, [pc, #48]	; (8000d84 <__NVIC_SetPriority+0x4c>)
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	0112      	lsls	r2, r2, #4
 8000d58:	b2d2      	uxtb	r2, r2
 8000d5a:	440b      	add	r3, r1
 8000d5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d60:	e00a      	b.n	8000d78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	4908      	ldr	r1, [pc, #32]	; (8000d88 <__NVIC_SetPriority+0x50>)
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	f003 030f 	and.w	r3, r3, #15
 8000d6e:	3b04      	subs	r3, #4
 8000d70:	0112      	lsls	r2, r2, #4
 8000d72:	b2d2      	uxtb	r2, r2
 8000d74:	440b      	add	r3, r1
 8000d76:	761a      	strb	r2, [r3, #24]
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bc80      	pop	{r7}
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	e000e100 	.word	0xe000e100
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b089      	sub	sp, #36	; 0x24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	f003 0307 	and.w	r3, r3, #7
 8000d9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	f1c3 0307 	rsb	r3, r3, #7
 8000da6:	2b04      	cmp	r3, #4
 8000da8:	bf28      	it	cs
 8000daa:	2304      	movcs	r3, #4
 8000dac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	3304      	adds	r3, #4
 8000db2:	2b06      	cmp	r3, #6
 8000db4:	d902      	bls.n	8000dbc <NVIC_EncodePriority+0x30>
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	3b03      	subs	r3, #3
 8000dba:	e000      	b.n	8000dbe <NVIC_EncodePriority+0x32>
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc4:	69bb      	ldr	r3, [r7, #24]
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	43da      	mvns	r2, r3
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	401a      	ands	r2, r3
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	fa01 f303 	lsl.w	r3, r1, r3
 8000dde:	43d9      	mvns	r1, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de4:	4313      	orrs	r3, r2
         );
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3724      	adds	r7, #36	; 0x24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr

08000df0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e00:	d301      	bcc.n	8000e06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e02:	2301      	movs	r3, #1
 8000e04:	e00f      	b.n	8000e26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e06:	4a0a      	ldr	r2, [pc, #40]	; (8000e30 <SysTick_Config+0x40>)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e0e:	210f      	movs	r1, #15
 8000e10:	f04f 30ff 	mov.w	r0, #4294967295
 8000e14:	f7ff ff90 	bl	8000d38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e18:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <SysTick_Config+0x40>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e1e:	4b04      	ldr	r3, [pc, #16]	; (8000e30 <SysTick_Config+0x40>)
 8000e20:	2207      	movs	r2, #7
 8000e22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	e000e010 	.word	0xe000e010

08000e34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f7ff ff2d 	bl	8000c9c <__NVIC_SetPriorityGrouping>
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b086      	sub	sp, #24
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	4603      	mov	r3, r0
 8000e52:	60b9      	str	r1, [r7, #8]
 8000e54:	607a      	str	r2, [r7, #4]
 8000e56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e5c:	f7ff ff42 	bl	8000ce4 <__NVIC_GetPriorityGrouping>
 8000e60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	68b9      	ldr	r1, [r7, #8]
 8000e66:	6978      	ldr	r0, [r7, #20]
 8000e68:	f7ff ff90 	bl	8000d8c <NVIC_EncodePriority>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e72:	4611      	mov	r1, r2
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff ff5f 	bl	8000d38 <__NVIC_SetPriority>
}
 8000e7a:	bf00      	nop
 8000e7c:	3718      	adds	r7, #24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b082      	sub	sp, #8
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	4603      	mov	r3, r0
 8000e8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff ff35 	bl	8000d00 <__NVIC_EnableIRQ>
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b082      	sub	sp, #8
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f7ff ffa2 	bl	8000df0 <SysTick_Config>
 8000eac:	4603      	mov	r3, r0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	b085      	sub	sp, #20
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	d008      	beq.n	8000ede <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2204      	movs	r2, #4
 8000ed0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e020      	b.n	8000f20 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f022 020e 	bic.w	r2, r2, #14
 8000eec:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f022 0201 	bic.w	r2, r2, #1
 8000efc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f06:	2101      	movs	r1, #1
 8000f08:	fa01 f202 	lsl.w	r2, r1, r2
 8000f0c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2201      	movs	r2, #1
 8000f12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3714      	adds	r7, #20
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bc80      	pop	{r7}
 8000f28:	4770      	bx	lr
	...

08000f2c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f34:	2300      	movs	r3, #0
 8000f36:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	d005      	beq.n	8000f4e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2204      	movs	r2, #4
 8000f46:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	73fb      	strb	r3, [r7, #15]
 8000f4c:	e0d6      	b.n	80010fc <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f022 020e 	bic.w	r2, r2, #14
 8000f5c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f022 0201 	bic.w	r2, r2, #1
 8000f6c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	461a      	mov	r2, r3
 8000f74:	4b64      	ldr	r3, [pc, #400]	; (8001108 <HAL_DMA_Abort_IT+0x1dc>)
 8000f76:	429a      	cmp	r2, r3
 8000f78:	d958      	bls.n	800102c <HAL_DMA_Abort_IT+0x100>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a63      	ldr	r2, [pc, #396]	; (800110c <HAL_DMA_Abort_IT+0x1e0>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d04f      	beq.n	8001024 <HAL_DMA_Abort_IT+0xf8>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a61      	ldr	r2, [pc, #388]	; (8001110 <HAL_DMA_Abort_IT+0x1e4>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d048      	beq.n	8001020 <HAL_DMA_Abort_IT+0xf4>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a60      	ldr	r2, [pc, #384]	; (8001114 <HAL_DMA_Abort_IT+0x1e8>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d040      	beq.n	800101a <HAL_DMA_Abort_IT+0xee>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a5e      	ldr	r2, [pc, #376]	; (8001118 <HAL_DMA_Abort_IT+0x1ec>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d038      	beq.n	8001014 <HAL_DMA_Abort_IT+0xe8>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a5d      	ldr	r2, [pc, #372]	; (800111c <HAL_DMA_Abort_IT+0x1f0>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d030      	beq.n	800100e <HAL_DMA_Abort_IT+0xe2>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a5b      	ldr	r2, [pc, #364]	; (8001120 <HAL_DMA_Abort_IT+0x1f4>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d028      	beq.n	8001008 <HAL_DMA_Abort_IT+0xdc>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a53      	ldr	r2, [pc, #332]	; (8001108 <HAL_DMA_Abort_IT+0x1dc>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d020      	beq.n	8001002 <HAL_DMA_Abort_IT+0xd6>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a57      	ldr	r2, [pc, #348]	; (8001124 <HAL_DMA_Abort_IT+0x1f8>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d019      	beq.n	8000ffe <HAL_DMA_Abort_IT+0xd2>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a56      	ldr	r2, [pc, #344]	; (8001128 <HAL_DMA_Abort_IT+0x1fc>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d012      	beq.n	8000ffa <HAL_DMA_Abort_IT+0xce>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a54      	ldr	r2, [pc, #336]	; (800112c <HAL_DMA_Abort_IT+0x200>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d00a      	beq.n	8000ff4 <HAL_DMA_Abort_IT+0xc8>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a53      	ldr	r2, [pc, #332]	; (8001130 <HAL_DMA_Abort_IT+0x204>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d102      	bne.n	8000fee <HAL_DMA_Abort_IT+0xc2>
 8000fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fec:	e01b      	b.n	8001026 <HAL_DMA_Abort_IT+0xfa>
 8000fee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ff2:	e018      	b.n	8001026 <HAL_DMA_Abort_IT+0xfa>
 8000ff4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ff8:	e015      	b.n	8001026 <HAL_DMA_Abort_IT+0xfa>
 8000ffa:	2310      	movs	r3, #16
 8000ffc:	e013      	b.n	8001026 <HAL_DMA_Abort_IT+0xfa>
 8000ffe:	2301      	movs	r3, #1
 8001000:	e011      	b.n	8001026 <HAL_DMA_Abort_IT+0xfa>
 8001002:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001006:	e00e      	b.n	8001026 <HAL_DMA_Abort_IT+0xfa>
 8001008:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800100c:	e00b      	b.n	8001026 <HAL_DMA_Abort_IT+0xfa>
 800100e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001012:	e008      	b.n	8001026 <HAL_DMA_Abort_IT+0xfa>
 8001014:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001018:	e005      	b.n	8001026 <HAL_DMA_Abort_IT+0xfa>
 800101a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800101e:	e002      	b.n	8001026 <HAL_DMA_Abort_IT+0xfa>
 8001020:	2310      	movs	r3, #16
 8001022:	e000      	b.n	8001026 <HAL_DMA_Abort_IT+0xfa>
 8001024:	2301      	movs	r3, #1
 8001026:	4a43      	ldr	r2, [pc, #268]	; (8001134 <HAL_DMA_Abort_IT+0x208>)
 8001028:	6053      	str	r3, [r2, #4]
 800102a:	e057      	b.n	80010dc <HAL_DMA_Abort_IT+0x1b0>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a36      	ldr	r2, [pc, #216]	; (800110c <HAL_DMA_Abort_IT+0x1e0>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d04f      	beq.n	80010d6 <HAL_DMA_Abort_IT+0x1aa>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a35      	ldr	r2, [pc, #212]	; (8001110 <HAL_DMA_Abort_IT+0x1e4>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d048      	beq.n	80010d2 <HAL_DMA_Abort_IT+0x1a6>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a33      	ldr	r2, [pc, #204]	; (8001114 <HAL_DMA_Abort_IT+0x1e8>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d040      	beq.n	80010cc <HAL_DMA_Abort_IT+0x1a0>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a32      	ldr	r2, [pc, #200]	; (8001118 <HAL_DMA_Abort_IT+0x1ec>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d038      	beq.n	80010c6 <HAL_DMA_Abort_IT+0x19a>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a30      	ldr	r2, [pc, #192]	; (800111c <HAL_DMA_Abort_IT+0x1f0>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d030      	beq.n	80010c0 <HAL_DMA_Abort_IT+0x194>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a2f      	ldr	r2, [pc, #188]	; (8001120 <HAL_DMA_Abort_IT+0x1f4>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d028      	beq.n	80010ba <HAL_DMA_Abort_IT+0x18e>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a26      	ldr	r2, [pc, #152]	; (8001108 <HAL_DMA_Abort_IT+0x1dc>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d020      	beq.n	80010b4 <HAL_DMA_Abort_IT+0x188>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a2b      	ldr	r2, [pc, #172]	; (8001124 <HAL_DMA_Abort_IT+0x1f8>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d019      	beq.n	80010b0 <HAL_DMA_Abort_IT+0x184>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a29      	ldr	r2, [pc, #164]	; (8001128 <HAL_DMA_Abort_IT+0x1fc>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d012      	beq.n	80010ac <HAL_DMA_Abort_IT+0x180>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a28      	ldr	r2, [pc, #160]	; (800112c <HAL_DMA_Abort_IT+0x200>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d00a      	beq.n	80010a6 <HAL_DMA_Abort_IT+0x17a>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a26      	ldr	r2, [pc, #152]	; (8001130 <HAL_DMA_Abort_IT+0x204>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d102      	bne.n	80010a0 <HAL_DMA_Abort_IT+0x174>
 800109a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800109e:	e01b      	b.n	80010d8 <HAL_DMA_Abort_IT+0x1ac>
 80010a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010a4:	e018      	b.n	80010d8 <HAL_DMA_Abort_IT+0x1ac>
 80010a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010aa:	e015      	b.n	80010d8 <HAL_DMA_Abort_IT+0x1ac>
 80010ac:	2310      	movs	r3, #16
 80010ae:	e013      	b.n	80010d8 <HAL_DMA_Abort_IT+0x1ac>
 80010b0:	2301      	movs	r3, #1
 80010b2:	e011      	b.n	80010d8 <HAL_DMA_Abort_IT+0x1ac>
 80010b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010b8:	e00e      	b.n	80010d8 <HAL_DMA_Abort_IT+0x1ac>
 80010ba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80010be:	e00b      	b.n	80010d8 <HAL_DMA_Abort_IT+0x1ac>
 80010c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010c4:	e008      	b.n	80010d8 <HAL_DMA_Abort_IT+0x1ac>
 80010c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ca:	e005      	b.n	80010d8 <HAL_DMA_Abort_IT+0x1ac>
 80010cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010d0:	e002      	b.n	80010d8 <HAL_DMA_Abort_IT+0x1ac>
 80010d2:	2310      	movs	r3, #16
 80010d4:	e000      	b.n	80010d8 <HAL_DMA_Abort_IT+0x1ac>
 80010d6:	2301      	movs	r3, #1
 80010d8:	4a17      	ldr	r2, [pc, #92]	; (8001138 <HAL_DMA_Abort_IT+0x20c>)
 80010da:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2201      	movs	r2, #1
 80010e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d003      	beq.n	80010fc <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	4798      	blx	r3
    } 
  }
  return status;
 80010fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40020080 	.word	0x40020080
 800110c:	40020008 	.word	0x40020008
 8001110:	4002001c 	.word	0x4002001c
 8001114:	40020030 	.word	0x40020030
 8001118:	40020044 	.word	0x40020044
 800111c:	40020058 	.word	0x40020058
 8001120:	4002006c 	.word	0x4002006c
 8001124:	40020408 	.word	0x40020408
 8001128:	4002041c 	.word	0x4002041c
 800112c:	40020430 	.word	0x40020430
 8001130:	40020444 	.word	0x40020444
 8001134:	40020400 	.word	0x40020400
 8001138:	40020000 	.word	0x40020000

0800113c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800113c:	b480      	push	{r7}
 800113e:	b08b      	sub	sp, #44	; 0x2c
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001146:	2300      	movs	r3, #0
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800114a:	2300      	movs	r3, #0
 800114c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800114e:	e179      	b.n	8001444 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001150:	2201      	movs	r2, #1
 8001152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	69fa      	ldr	r2, [r7, #28]
 8001160:	4013      	ands	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	429a      	cmp	r2, r3
 800116a:	f040 8168 	bne.w	800143e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	4aa0      	ldr	r2, [pc, #640]	; (80013f4 <HAL_GPIO_Init+0x2b8>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d05e      	beq.n	8001236 <HAL_GPIO_Init+0xfa>
 8001178:	4a9e      	ldr	r2, [pc, #632]	; (80013f4 <HAL_GPIO_Init+0x2b8>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d875      	bhi.n	800126a <HAL_GPIO_Init+0x12e>
 800117e:	4a9e      	ldr	r2, [pc, #632]	; (80013f8 <HAL_GPIO_Init+0x2bc>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d058      	beq.n	8001236 <HAL_GPIO_Init+0xfa>
 8001184:	4a9c      	ldr	r2, [pc, #624]	; (80013f8 <HAL_GPIO_Init+0x2bc>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d86f      	bhi.n	800126a <HAL_GPIO_Init+0x12e>
 800118a:	4a9c      	ldr	r2, [pc, #624]	; (80013fc <HAL_GPIO_Init+0x2c0>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d052      	beq.n	8001236 <HAL_GPIO_Init+0xfa>
 8001190:	4a9a      	ldr	r2, [pc, #616]	; (80013fc <HAL_GPIO_Init+0x2c0>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d869      	bhi.n	800126a <HAL_GPIO_Init+0x12e>
 8001196:	4a9a      	ldr	r2, [pc, #616]	; (8001400 <HAL_GPIO_Init+0x2c4>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d04c      	beq.n	8001236 <HAL_GPIO_Init+0xfa>
 800119c:	4a98      	ldr	r2, [pc, #608]	; (8001400 <HAL_GPIO_Init+0x2c4>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d863      	bhi.n	800126a <HAL_GPIO_Init+0x12e>
 80011a2:	4a98      	ldr	r2, [pc, #608]	; (8001404 <HAL_GPIO_Init+0x2c8>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d046      	beq.n	8001236 <HAL_GPIO_Init+0xfa>
 80011a8:	4a96      	ldr	r2, [pc, #600]	; (8001404 <HAL_GPIO_Init+0x2c8>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d85d      	bhi.n	800126a <HAL_GPIO_Init+0x12e>
 80011ae:	2b12      	cmp	r3, #18
 80011b0:	d82a      	bhi.n	8001208 <HAL_GPIO_Init+0xcc>
 80011b2:	2b12      	cmp	r3, #18
 80011b4:	d859      	bhi.n	800126a <HAL_GPIO_Init+0x12e>
 80011b6:	a201      	add	r2, pc, #4	; (adr r2, 80011bc <HAL_GPIO_Init+0x80>)
 80011b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011bc:	08001237 	.word	0x08001237
 80011c0:	08001211 	.word	0x08001211
 80011c4:	08001223 	.word	0x08001223
 80011c8:	08001265 	.word	0x08001265
 80011cc:	0800126b 	.word	0x0800126b
 80011d0:	0800126b 	.word	0x0800126b
 80011d4:	0800126b 	.word	0x0800126b
 80011d8:	0800126b 	.word	0x0800126b
 80011dc:	0800126b 	.word	0x0800126b
 80011e0:	0800126b 	.word	0x0800126b
 80011e4:	0800126b 	.word	0x0800126b
 80011e8:	0800126b 	.word	0x0800126b
 80011ec:	0800126b 	.word	0x0800126b
 80011f0:	0800126b 	.word	0x0800126b
 80011f4:	0800126b 	.word	0x0800126b
 80011f8:	0800126b 	.word	0x0800126b
 80011fc:	0800126b 	.word	0x0800126b
 8001200:	08001219 	.word	0x08001219
 8001204:	0800122d 	.word	0x0800122d
 8001208:	4a7f      	ldr	r2, [pc, #508]	; (8001408 <HAL_GPIO_Init+0x2cc>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d013      	beq.n	8001236 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800120e:	e02c      	b.n	800126a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	623b      	str	r3, [r7, #32]
          break;
 8001216:	e029      	b.n	800126c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	3304      	adds	r3, #4
 800121e:	623b      	str	r3, [r7, #32]
          break;
 8001220:	e024      	b.n	800126c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	68db      	ldr	r3, [r3, #12]
 8001226:	3308      	adds	r3, #8
 8001228:	623b      	str	r3, [r7, #32]
          break;
 800122a:	e01f      	b.n	800126c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	330c      	adds	r3, #12
 8001232:	623b      	str	r3, [r7, #32]
          break;
 8001234:	e01a      	b.n	800126c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d102      	bne.n	8001244 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800123e:	2304      	movs	r3, #4
 8001240:	623b      	str	r3, [r7, #32]
          break;
 8001242:	e013      	b.n	800126c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d105      	bne.n	8001258 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800124c:	2308      	movs	r3, #8
 800124e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	69fa      	ldr	r2, [r7, #28]
 8001254:	611a      	str	r2, [r3, #16]
          break;
 8001256:	e009      	b.n	800126c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001258:	2308      	movs	r3, #8
 800125a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	69fa      	ldr	r2, [r7, #28]
 8001260:	615a      	str	r2, [r3, #20]
          break;
 8001262:	e003      	b.n	800126c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001264:	2300      	movs	r3, #0
 8001266:	623b      	str	r3, [r7, #32]
          break;
 8001268:	e000      	b.n	800126c <HAL_GPIO_Init+0x130>
          break;
 800126a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	2bff      	cmp	r3, #255	; 0xff
 8001270:	d801      	bhi.n	8001276 <HAL_GPIO_Init+0x13a>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	e001      	b.n	800127a <HAL_GPIO_Init+0x13e>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	3304      	adds	r3, #4
 800127a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	2bff      	cmp	r3, #255	; 0xff
 8001280:	d802      	bhi.n	8001288 <HAL_GPIO_Init+0x14c>
 8001282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	e002      	b.n	800128e <HAL_GPIO_Init+0x152>
 8001288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128a:	3b08      	subs	r3, #8
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	210f      	movs	r1, #15
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	fa01 f303 	lsl.w	r3, r1, r3
 800129c:	43db      	mvns	r3, r3
 800129e:	401a      	ands	r2, r3
 80012a0:	6a39      	ldr	r1, [r7, #32]
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	fa01 f303 	lsl.w	r3, r1, r3
 80012a8:	431a      	orrs	r2, r3
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	f000 80c1 	beq.w	800143e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012bc:	4b53      	ldr	r3, [pc, #332]	; (800140c <HAL_GPIO_Init+0x2d0>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	4a52      	ldr	r2, [pc, #328]	; (800140c <HAL_GPIO_Init+0x2d0>)
 80012c2:	f043 0301 	orr.w	r3, r3, #1
 80012c6:	6193      	str	r3, [r2, #24]
 80012c8:	4b50      	ldr	r3, [pc, #320]	; (800140c <HAL_GPIO_Init+0x2d0>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	f003 0301 	and.w	r3, r3, #1
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012d4:	4a4e      	ldr	r2, [pc, #312]	; (8001410 <HAL_GPIO_Init+0x2d4>)
 80012d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d8:	089b      	lsrs	r3, r3, #2
 80012da:	3302      	adds	r3, #2
 80012dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e4:	f003 0303 	and.w	r3, r3, #3
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	220f      	movs	r2, #15
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	43db      	mvns	r3, r3
 80012f2:	68fa      	ldr	r2, [r7, #12]
 80012f4:	4013      	ands	r3, r2
 80012f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a46      	ldr	r2, [pc, #280]	; (8001414 <HAL_GPIO_Init+0x2d8>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d01f      	beq.n	8001340 <HAL_GPIO_Init+0x204>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a45      	ldr	r2, [pc, #276]	; (8001418 <HAL_GPIO_Init+0x2dc>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d019      	beq.n	800133c <HAL_GPIO_Init+0x200>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4a44      	ldr	r2, [pc, #272]	; (800141c <HAL_GPIO_Init+0x2e0>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d013      	beq.n	8001338 <HAL_GPIO_Init+0x1fc>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4a43      	ldr	r2, [pc, #268]	; (8001420 <HAL_GPIO_Init+0x2e4>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d00d      	beq.n	8001334 <HAL_GPIO_Init+0x1f8>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4a42      	ldr	r2, [pc, #264]	; (8001424 <HAL_GPIO_Init+0x2e8>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d007      	beq.n	8001330 <HAL_GPIO_Init+0x1f4>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4a41      	ldr	r2, [pc, #260]	; (8001428 <HAL_GPIO_Init+0x2ec>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d101      	bne.n	800132c <HAL_GPIO_Init+0x1f0>
 8001328:	2305      	movs	r3, #5
 800132a:	e00a      	b.n	8001342 <HAL_GPIO_Init+0x206>
 800132c:	2306      	movs	r3, #6
 800132e:	e008      	b.n	8001342 <HAL_GPIO_Init+0x206>
 8001330:	2304      	movs	r3, #4
 8001332:	e006      	b.n	8001342 <HAL_GPIO_Init+0x206>
 8001334:	2303      	movs	r3, #3
 8001336:	e004      	b.n	8001342 <HAL_GPIO_Init+0x206>
 8001338:	2302      	movs	r3, #2
 800133a:	e002      	b.n	8001342 <HAL_GPIO_Init+0x206>
 800133c:	2301      	movs	r3, #1
 800133e:	e000      	b.n	8001342 <HAL_GPIO_Init+0x206>
 8001340:	2300      	movs	r3, #0
 8001342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001344:	f002 0203 	and.w	r2, r2, #3
 8001348:	0092      	lsls	r2, r2, #2
 800134a:	4093      	lsls	r3, r2
 800134c:	68fa      	ldr	r2, [r7, #12]
 800134e:	4313      	orrs	r3, r2
 8001350:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001352:	492f      	ldr	r1, [pc, #188]	; (8001410 <HAL_GPIO_Init+0x2d4>)
 8001354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001356:	089b      	lsrs	r3, r3, #2
 8001358:	3302      	adds	r3, #2
 800135a:	68fa      	ldr	r2, [r7, #12]
 800135c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d006      	beq.n	800137a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800136c:	4b2f      	ldr	r3, [pc, #188]	; (800142c <HAL_GPIO_Init+0x2f0>)
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	492e      	ldr	r1, [pc, #184]	; (800142c <HAL_GPIO_Init+0x2f0>)
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	4313      	orrs	r3, r2
 8001376:	600b      	str	r3, [r1, #0]
 8001378:	e006      	b.n	8001388 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800137a:	4b2c      	ldr	r3, [pc, #176]	; (800142c <HAL_GPIO_Init+0x2f0>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	43db      	mvns	r3, r3
 8001382:	492a      	ldr	r1, [pc, #168]	; (800142c <HAL_GPIO_Init+0x2f0>)
 8001384:	4013      	ands	r3, r2
 8001386:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d006      	beq.n	80013a2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001394:	4b25      	ldr	r3, [pc, #148]	; (800142c <HAL_GPIO_Init+0x2f0>)
 8001396:	685a      	ldr	r2, [r3, #4]
 8001398:	4924      	ldr	r1, [pc, #144]	; (800142c <HAL_GPIO_Init+0x2f0>)
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	4313      	orrs	r3, r2
 800139e:	604b      	str	r3, [r1, #4]
 80013a0:	e006      	b.n	80013b0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013a2:	4b22      	ldr	r3, [pc, #136]	; (800142c <HAL_GPIO_Init+0x2f0>)
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	43db      	mvns	r3, r3
 80013aa:	4920      	ldr	r1, [pc, #128]	; (800142c <HAL_GPIO_Init+0x2f0>)
 80013ac:	4013      	ands	r3, r2
 80013ae:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d006      	beq.n	80013ca <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013bc:	4b1b      	ldr	r3, [pc, #108]	; (800142c <HAL_GPIO_Init+0x2f0>)
 80013be:	689a      	ldr	r2, [r3, #8]
 80013c0:	491a      	ldr	r1, [pc, #104]	; (800142c <HAL_GPIO_Init+0x2f0>)
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	608b      	str	r3, [r1, #8]
 80013c8:	e006      	b.n	80013d8 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013ca:	4b18      	ldr	r3, [pc, #96]	; (800142c <HAL_GPIO_Init+0x2f0>)
 80013cc:	689a      	ldr	r2, [r3, #8]
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	43db      	mvns	r3, r3
 80013d2:	4916      	ldr	r1, [pc, #88]	; (800142c <HAL_GPIO_Init+0x2f0>)
 80013d4:	4013      	ands	r3, r2
 80013d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d025      	beq.n	8001430 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013e4:	4b11      	ldr	r3, [pc, #68]	; (800142c <HAL_GPIO_Init+0x2f0>)
 80013e6:	68da      	ldr	r2, [r3, #12]
 80013e8:	4910      	ldr	r1, [pc, #64]	; (800142c <HAL_GPIO_Init+0x2f0>)
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	60cb      	str	r3, [r1, #12]
 80013f0:	e025      	b.n	800143e <HAL_GPIO_Init+0x302>
 80013f2:	bf00      	nop
 80013f4:	10320000 	.word	0x10320000
 80013f8:	10310000 	.word	0x10310000
 80013fc:	10220000 	.word	0x10220000
 8001400:	10210000 	.word	0x10210000
 8001404:	10120000 	.word	0x10120000
 8001408:	10110000 	.word	0x10110000
 800140c:	40021000 	.word	0x40021000
 8001410:	40010000 	.word	0x40010000
 8001414:	40010800 	.word	0x40010800
 8001418:	40010c00 	.word	0x40010c00
 800141c:	40011000 	.word	0x40011000
 8001420:	40011400 	.word	0x40011400
 8001424:	40011800 	.word	0x40011800
 8001428:	40011c00 	.word	0x40011c00
 800142c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001430:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <HAL_GPIO_Init+0x324>)
 8001432:	68da      	ldr	r2, [r3, #12]
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	43db      	mvns	r3, r3
 8001438:	4909      	ldr	r1, [pc, #36]	; (8001460 <HAL_GPIO_Init+0x324>)
 800143a:	4013      	ands	r3, r2
 800143c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800143e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001440:	3301      	adds	r3, #1
 8001442:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144a:	fa22 f303 	lsr.w	r3, r2, r3
 800144e:	2b00      	cmp	r3, #0
 8001450:	f47f ae7e 	bne.w	8001150 <HAL_GPIO_Init+0x14>
  }
}
 8001454:	bf00      	nop
 8001456:	bf00      	nop
 8001458:	372c      	adds	r7, #44	; 0x2c
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr
 8001460:	40010400 	.word	0x40010400

08001464 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	460b      	mov	r3, r1
 800146e:	807b      	strh	r3, [r7, #2]
 8001470:	4613      	mov	r3, r2
 8001472:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001474:	787b      	ldrb	r3, [r7, #1]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d003      	beq.n	8001482 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800147a:	887a      	ldrh	r2, [r7, #2]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001480:	e003      	b.n	800148a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001482:	887b      	ldrh	r3, [r7, #2]
 8001484:	041a      	lsls	r2, r3, #16
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	611a      	str	r2, [r3, #16]
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr

08001494 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d101      	bne.n	80014a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e26c      	b.n	8001980 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	f000 8087 	beq.w	80015c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014b4:	4b92      	ldr	r3, [pc, #584]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f003 030c 	and.w	r3, r3, #12
 80014bc:	2b04      	cmp	r3, #4
 80014be:	d00c      	beq.n	80014da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014c0:	4b8f      	ldr	r3, [pc, #572]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f003 030c 	and.w	r3, r3, #12
 80014c8:	2b08      	cmp	r3, #8
 80014ca:	d112      	bne.n	80014f2 <HAL_RCC_OscConfig+0x5e>
 80014cc:	4b8c      	ldr	r3, [pc, #560]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014d8:	d10b      	bne.n	80014f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014da:	4b89      	ldr	r3, [pc, #548]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d06c      	beq.n	80015c0 <HAL_RCC_OscConfig+0x12c>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d168      	bne.n	80015c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e246      	b.n	8001980 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014fa:	d106      	bne.n	800150a <HAL_RCC_OscConfig+0x76>
 80014fc:	4b80      	ldr	r3, [pc, #512]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a7f      	ldr	r2, [pc, #508]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 8001502:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001506:	6013      	str	r3, [r2, #0]
 8001508:	e02e      	b.n	8001568 <HAL_RCC_OscConfig+0xd4>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d10c      	bne.n	800152c <HAL_RCC_OscConfig+0x98>
 8001512:	4b7b      	ldr	r3, [pc, #492]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a7a      	ldr	r2, [pc, #488]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 8001518:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800151c:	6013      	str	r3, [r2, #0]
 800151e:	4b78      	ldr	r3, [pc, #480]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a77      	ldr	r2, [pc, #476]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 8001524:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001528:	6013      	str	r3, [r2, #0]
 800152a:	e01d      	b.n	8001568 <HAL_RCC_OscConfig+0xd4>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001534:	d10c      	bne.n	8001550 <HAL_RCC_OscConfig+0xbc>
 8001536:	4b72      	ldr	r3, [pc, #456]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a71      	ldr	r2, [pc, #452]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 800153c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001540:	6013      	str	r3, [r2, #0]
 8001542:	4b6f      	ldr	r3, [pc, #444]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a6e      	ldr	r2, [pc, #440]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 8001548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800154c:	6013      	str	r3, [r2, #0]
 800154e:	e00b      	b.n	8001568 <HAL_RCC_OscConfig+0xd4>
 8001550:	4b6b      	ldr	r3, [pc, #428]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a6a      	ldr	r2, [pc, #424]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 8001556:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800155a:	6013      	str	r3, [r2, #0]
 800155c:	4b68      	ldr	r3, [pc, #416]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a67      	ldr	r2, [pc, #412]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 8001562:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001566:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d013      	beq.n	8001598 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001570:	f7ff fb8a 	bl	8000c88 <HAL_GetTick>
 8001574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001578:	f7ff fb86 	bl	8000c88 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b64      	cmp	r3, #100	; 0x64
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e1fa      	b.n	8001980 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800158a:	4b5d      	ldr	r3, [pc, #372]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d0f0      	beq.n	8001578 <HAL_RCC_OscConfig+0xe4>
 8001596:	e014      	b.n	80015c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001598:	f7ff fb76 	bl	8000c88 <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015a0:	f7ff fb72 	bl	8000c88 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b64      	cmp	r3, #100	; 0x64
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e1e6      	b.n	8001980 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015b2:	4b53      	ldr	r3, [pc, #332]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1f0      	bne.n	80015a0 <HAL_RCC_OscConfig+0x10c>
 80015be:	e000      	b.n	80015c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d063      	beq.n	8001696 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015ce:	4b4c      	ldr	r3, [pc, #304]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f003 030c 	and.w	r3, r3, #12
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d00b      	beq.n	80015f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015da:	4b49      	ldr	r3, [pc, #292]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f003 030c 	and.w	r3, r3, #12
 80015e2:	2b08      	cmp	r3, #8
 80015e4:	d11c      	bne.n	8001620 <HAL_RCC_OscConfig+0x18c>
 80015e6:	4b46      	ldr	r3, [pc, #280]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d116      	bne.n	8001620 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015f2:	4b43      	ldr	r3, [pc, #268]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d005      	beq.n	800160a <HAL_RCC_OscConfig+0x176>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	691b      	ldr	r3, [r3, #16]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d001      	beq.n	800160a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e1ba      	b.n	8001980 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800160a:	4b3d      	ldr	r3, [pc, #244]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	00db      	lsls	r3, r3, #3
 8001618:	4939      	ldr	r1, [pc, #228]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 800161a:	4313      	orrs	r3, r2
 800161c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800161e:	e03a      	b.n	8001696 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	691b      	ldr	r3, [r3, #16]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d020      	beq.n	800166a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001628:	4b36      	ldr	r3, [pc, #216]	; (8001704 <HAL_RCC_OscConfig+0x270>)
 800162a:	2201      	movs	r2, #1
 800162c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162e:	f7ff fb2b 	bl	8000c88 <HAL_GetTick>
 8001632:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001634:	e008      	b.n	8001648 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001636:	f7ff fb27 	bl	8000c88 <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	2b02      	cmp	r3, #2
 8001642:	d901      	bls.n	8001648 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e19b      	b.n	8001980 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001648:	4b2d      	ldr	r3, [pc, #180]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d0f0      	beq.n	8001636 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001654:	4b2a      	ldr	r3, [pc, #168]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	695b      	ldr	r3, [r3, #20]
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	4927      	ldr	r1, [pc, #156]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 8001664:	4313      	orrs	r3, r2
 8001666:	600b      	str	r3, [r1, #0]
 8001668:	e015      	b.n	8001696 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800166a:	4b26      	ldr	r3, [pc, #152]	; (8001704 <HAL_RCC_OscConfig+0x270>)
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001670:	f7ff fb0a 	bl	8000c88 <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001678:	f7ff fb06 	bl	8000c88 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e17a      	b.n	8001980 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800168a:	4b1d      	ldr	r3, [pc, #116]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1f0      	bne.n	8001678 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0308 	and.w	r3, r3, #8
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d03a      	beq.n	8001718 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d019      	beq.n	80016de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016aa:	4b17      	ldr	r3, [pc, #92]	; (8001708 <HAL_RCC_OscConfig+0x274>)
 80016ac:	2201      	movs	r2, #1
 80016ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b0:	f7ff faea 	bl	8000c88 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016b8:	f7ff fae6 	bl	8000c88 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e15a      	b.n	8001980 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ca:	4b0d      	ldr	r3, [pc, #52]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 80016cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d0f0      	beq.n	80016b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80016d6:	2001      	movs	r0, #1
 80016d8:	f000 fad8 	bl	8001c8c <RCC_Delay>
 80016dc:	e01c      	b.n	8001718 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016de:	4b0a      	ldr	r3, [pc, #40]	; (8001708 <HAL_RCC_OscConfig+0x274>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e4:	f7ff fad0 	bl	8000c88 <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016ea:	e00f      	b.n	800170c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016ec:	f7ff facc 	bl	8000c88 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d908      	bls.n	800170c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e140      	b.n	8001980 <HAL_RCC_OscConfig+0x4ec>
 80016fe:	bf00      	nop
 8001700:	40021000 	.word	0x40021000
 8001704:	42420000 	.word	0x42420000
 8001708:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800170c:	4b9e      	ldr	r3, [pc, #632]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 800170e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001710:	f003 0302 	and.w	r3, r3, #2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d1e9      	bne.n	80016ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0304 	and.w	r3, r3, #4
 8001720:	2b00      	cmp	r3, #0
 8001722:	f000 80a6 	beq.w	8001872 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001726:	2300      	movs	r3, #0
 8001728:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800172a:	4b97      	ldr	r3, [pc, #604]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d10d      	bne.n	8001752 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001736:	4b94      	ldr	r3, [pc, #592]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	4a93      	ldr	r2, [pc, #588]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 800173c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001740:	61d3      	str	r3, [r2, #28]
 8001742:	4b91      	ldr	r3, [pc, #580]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174a:	60bb      	str	r3, [r7, #8]
 800174c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800174e:	2301      	movs	r3, #1
 8001750:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001752:	4b8e      	ldr	r3, [pc, #568]	; (800198c <HAL_RCC_OscConfig+0x4f8>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800175a:	2b00      	cmp	r3, #0
 800175c:	d118      	bne.n	8001790 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800175e:	4b8b      	ldr	r3, [pc, #556]	; (800198c <HAL_RCC_OscConfig+0x4f8>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a8a      	ldr	r2, [pc, #552]	; (800198c <HAL_RCC_OscConfig+0x4f8>)
 8001764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001768:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800176a:	f7ff fa8d 	bl	8000c88 <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001770:	e008      	b.n	8001784 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001772:	f7ff fa89 	bl	8000c88 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b64      	cmp	r3, #100	; 0x64
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e0fd      	b.n	8001980 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001784:	4b81      	ldr	r3, [pc, #516]	; (800198c <HAL_RCC_OscConfig+0x4f8>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800178c:	2b00      	cmp	r3, #0
 800178e:	d0f0      	beq.n	8001772 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d106      	bne.n	80017a6 <HAL_RCC_OscConfig+0x312>
 8001798:	4b7b      	ldr	r3, [pc, #492]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 800179a:	6a1b      	ldr	r3, [r3, #32]
 800179c:	4a7a      	ldr	r2, [pc, #488]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 800179e:	f043 0301 	orr.w	r3, r3, #1
 80017a2:	6213      	str	r3, [r2, #32]
 80017a4:	e02d      	b.n	8001802 <HAL_RCC_OscConfig+0x36e>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d10c      	bne.n	80017c8 <HAL_RCC_OscConfig+0x334>
 80017ae:	4b76      	ldr	r3, [pc, #472]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 80017b0:	6a1b      	ldr	r3, [r3, #32]
 80017b2:	4a75      	ldr	r2, [pc, #468]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 80017b4:	f023 0301 	bic.w	r3, r3, #1
 80017b8:	6213      	str	r3, [r2, #32]
 80017ba:	4b73      	ldr	r3, [pc, #460]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 80017bc:	6a1b      	ldr	r3, [r3, #32]
 80017be:	4a72      	ldr	r2, [pc, #456]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 80017c0:	f023 0304 	bic.w	r3, r3, #4
 80017c4:	6213      	str	r3, [r2, #32]
 80017c6:	e01c      	b.n	8001802 <HAL_RCC_OscConfig+0x36e>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	2b05      	cmp	r3, #5
 80017ce:	d10c      	bne.n	80017ea <HAL_RCC_OscConfig+0x356>
 80017d0:	4b6d      	ldr	r3, [pc, #436]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 80017d2:	6a1b      	ldr	r3, [r3, #32]
 80017d4:	4a6c      	ldr	r2, [pc, #432]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 80017d6:	f043 0304 	orr.w	r3, r3, #4
 80017da:	6213      	str	r3, [r2, #32]
 80017dc:	4b6a      	ldr	r3, [pc, #424]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 80017de:	6a1b      	ldr	r3, [r3, #32]
 80017e0:	4a69      	ldr	r2, [pc, #420]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 80017e2:	f043 0301 	orr.w	r3, r3, #1
 80017e6:	6213      	str	r3, [r2, #32]
 80017e8:	e00b      	b.n	8001802 <HAL_RCC_OscConfig+0x36e>
 80017ea:	4b67      	ldr	r3, [pc, #412]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 80017ec:	6a1b      	ldr	r3, [r3, #32]
 80017ee:	4a66      	ldr	r2, [pc, #408]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 80017f0:	f023 0301 	bic.w	r3, r3, #1
 80017f4:	6213      	str	r3, [r2, #32]
 80017f6:	4b64      	ldr	r3, [pc, #400]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 80017f8:	6a1b      	ldr	r3, [r3, #32]
 80017fa:	4a63      	ldr	r2, [pc, #396]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 80017fc:	f023 0304 	bic.w	r3, r3, #4
 8001800:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d015      	beq.n	8001836 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800180a:	f7ff fa3d 	bl	8000c88 <HAL_GetTick>
 800180e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001810:	e00a      	b.n	8001828 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001812:	f7ff fa39 	bl	8000c88 <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001820:	4293      	cmp	r3, r2
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e0ab      	b.n	8001980 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001828:	4b57      	ldr	r3, [pc, #348]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 800182a:	6a1b      	ldr	r3, [r3, #32]
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d0ee      	beq.n	8001812 <HAL_RCC_OscConfig+0x37e>
 8001834:	e014      	b.n	8001860 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001836:	f7ff fa27 	bl	8000c88 <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800183c:	e00a      	b.n	8001854 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800183e:	f7ff fa23 	bl	8000c88 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	f241 3288 	movw	r2, #5000	; 0x1388
 800184c:	4293      	cmp	r3, r2
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e095      	b.n	8001980 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001854:	4b4c      	ldr	r3, [pc, #304]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 8001856:	6a1b      	ldr	r3, [r3, #32]
 8001858:	f003 0302 	and.w	r3, r3, #2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d1ee      	bne.n	800183e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001860:	7dfb      	ldrb	r3, [r7, #23]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d105      	bne.n	8001872 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001866:	4b48      	ldr	r3, [pc, #288]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 8001868:	69db      	ldr	r3, [r3, #28]
 800186a:	4a47      	ldr	r2, [pc, #284]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 800186c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001870:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	2b00      	cmp	r3, #0
 8001878:	f000 8081 	beq.w	800197e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800187c:	4b42      	ldr	r3, [pc, #264]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f003 030c 	and.w	r3, r3, #12
 8001884:	2b08      	cmp	r3, #8
 8001886:	d061      	beq.n	800194c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	69db      	ldr	r3, [r3, #28]
 800188c:	2b02      	cmp	r3, #2
 800188e:	d146      	bne.n	800191e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001890:	4b3f      	ldr	r3, [pc, #252]	; (8001990 <HAL_RCC_OscConfig+0x4fc>)
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001896:	f7ff f9f7 	bl	8000c88 <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800189c:	e008      	b.n	80018b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800189e:	f7ff f9f3 	bl	8000c88 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e067      	b.n	8001980 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018b0:	4b35      	ldr	r3, [pc, #212]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d1f0      	bne.n	800189e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a1b      	ldr	r3, [r3, #32]
 80018c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018c4:	d108      	bne.n	80018d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018c6:	4b30      	ldr	r3, [pc, #192]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	492d      	ldr	r1, [pc, #180]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 80018d4:	4313      	orrs	r3, r2
 80018d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018d8:	4b2b      	ldr	r3, [pc, #172]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a19      	ldr	r1, [r3, #32]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e8:	430b      	orrs	r3, r1
 80018ea:	4927      	ldr	r1, [pc, #156]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 80018ec:	4313      	orrs	r3, r2
 80018ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018f0:	4b27      	ldr	r3, [pc, #156]	; (8001990 <HAL_RCC_OscConfig+0x4fc>)
 80018f2:	2201      	movs	r2, #1
 80018f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f6:	f7ff f9c7 	bl	8000c88 <HAL_GetTick>
 80018fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018fc:	e008      	b.n	8001910 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018fe:	f7ff f9c3 	bl	8000c88 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e037      	b.n	8001980 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001910:	4b1d      	ldr	r3, [pc, #116]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d0f0      	beq.n	80018fe <HAL_RCC_OscConfig+0x46a>
 800191c:	e02f      	b.n	800197e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800191e:	4b1c      	ldr	r3, [pc, #112]	; (8001990 <HAL_RCC_OscConfig+0x4fc>)
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001924:	f7ff f9b0 	bl	8000c88 <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800192c:	f7ff f9ac 	bl	8000c88 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e020      	b.n	8001980 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800193e:	4b12      	ldr	r3, [pc, #72]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1f0      	bne.n	800192c <HAL_RCC_OscConfig+0x498>
 800194a:	e018      	b.n	800197e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	69db      	ldr	r3, [r3, #28]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d101      	bne.n	8001958 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e013      	b.n	8001980 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001958:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a1b      	ldr	r3, [r3, #32]
 8001968:	429a      	cmp	r2, r3
 800196a:	d106      	bne.n	800197a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001976:	429a      	cmp	r2, r3
 8001978:	d001      	beq.n	800197e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e000      	b.n	8001980 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	3718      	adds	r7, #24
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40021000 	.word	0x40021000
 800198c:	40007000 	.word	0x40007000
 8001990:	42420060 	.word	0x42420060

08001994 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d101      	bne.n	80019a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e0d0      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019a8:	4b6a      	ldr	r3, [pc, #424]	; (8001b54 <HAL_RCC_ClockConfig+0x1c0>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0307 	and.w	r3, r3, #7
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d910      	bls.n	80019d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019b6:	4b67      	ldr	r3, [pc, #412]	; (8001b54 <HAL_RCC_ClockConfig+0x1c0>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f023 0207 	bic.w	r2, r3, #7
 80019be:	4965      	ldr	r1, [pc, #404]	; (8001b54 <HAL_RCC_ClockConfig+0x1c0>)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019c6:	4b63      	ldr	r3, [pc, #396]	; (8001b54 <HAL_RCC_ClockConfig+0x1c0>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	683a      	ldr	r2, [r7, #0]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d001      	beq.n	80019d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e0b8      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d020      	beq.n	8001a26 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0304 	and.w	r3, r3, #4
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d005      	beq.n	80019fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019f0:	4b59      	ldr	r3, [pc, #356]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	4a58      	ldr	r2, [pc, #352]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 80019f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80019fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0308 	and.w	r3, r3, #8
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d005      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a08:	4b53      	ldr	r3, [pc, #332]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	4a52      	ldr	r2, [pc, #328]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a12:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a14:	4b50      	ldr	r3, [pc, #320]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	494d      	ldr	r1, [pc, #308]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d040      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d107      	bne.n	8001a4a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a3a:	4b47      	ldr	r3, [pc, #284]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d115      	bne.n	8001a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e07f      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d107      	bne.n	8001a62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a52:	4b41      	ldr	r3, [pc, #260]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d109      	bne.n	8001a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e073      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a62:	4b3d      	ldr	r3, [pc, #244]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d101      	bne.n	8001a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e06b      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a72:	4b39      	ldr	r3, [pc, #228]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f023 0203 	bic.w	r2, r3, #3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	4936      	ldr	r1, [pc, #216]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001a80:	4313      	orrs	r3, r2
 8001a82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a84:	f7ff f900 	bl	8000c88 <HAL_GetTick>
 8001a88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a8a:	e00a      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a8c:	f7ff f8fc 	bl	8000c88 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e053      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa2:	4b2d      	ldr	r3, [pc, #180]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f003 020c 	and.w	r2, r3, #12
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d1eb      	bne.n	8001a8c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ab4:	4b27      	ldr	r3, [pc, #156]	; (8001b54 <HAL_RCC_ClockConfig+0x1c0>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d210      	bcs.n	8001ae4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac2:	4b24      	ldr	r3, [pc, #144]	; (8001b54 <HAL_RCC_ClockConfig+0x1c0>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f023 0207 	bic.w	r2, r3, #7
 8001aca:	4922      	ldr	r1, [pc, #136]	; (8001b54 <HAL_RCC_ClockConfig+0x1c0>)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad2:	4b20      	ldr	r3, [pc, #128]	; (8001b54 <HAL_RCC_ClockConfig+0x1c0>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	683a      	ldr	r2, [r7, #0]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d001      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e032      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0304 	and.w	r3, r3, #4
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d008      	beq.n	8001b02 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001af0:	4b19      	ldr	r3, [pc, #100]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	4916      	ldr	r1, [pc, #88]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001afe:	4313      	orrs	r3, r2
 8001b00:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0308 	and.w	r3, r3, #8
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d009      	beq.n	8001b22 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b0e:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	490e      	ldr	r1, [pc, #56]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b22:	f000 f821 	bl	8001b68 <HAL_RCC_GetSysClockFreq>
 8001b26:	4602      	mov	r2, r0
 8001b28:	4b0b      	ldr	r3, [pc, #44]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	091b      	lsrs	r3, r3, #4
 8001b2e:	f003 030f 	and.w	r3, r3, #15
 8001b32:	490a      	ldr	r1, [pc, #40]	; (8001b5c <HAL_RCC_ClockConfig+0x1c8>)
 8001b34:	5ccb      	ldrb	r3, [r1, r3]
 8001b36:	fa22 f303 	lsr.w	r3, r2, r3
 8001b3a:	4a09      	ldr	r2, [pc, #36]	; (8001b60 <HAL_RCC_ClockConfig+0x1cc>)
 8001b3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b3e:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <HAL_RCC_ClockConfig+0x1d0>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff f85e 	bl	8000c04 <HAL_InitTick>

  return HAL_OK;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40022000 	.word	0x40022000
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	08005c70 	.word	0x08005c70
 8001b60:	20000000 	.word	0x20000000
 8001b64:	20000004 	.word	0x20000004

08001b68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b68:	b490      	push	{r4, r7}
 8001b6a:	b08a      	sub	sp, #40	; 0x28
 8001b6c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001b6e:	4b2a      	ldr	r3, [pc, #168]	; (8001c18 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b70:	1d3c      	adds	r4, r7, #4
 8001b72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b78:	f240 2301 	movw	r3, #513	; 0x201
 8001b7c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61fb      	str	r3, [r7, #28]
 8001b82:	2300      	movs	r3, #0
 8001b84:	61bb      	str	r3, [r7, #24]
 8001b86:	2300      	movs	r3, #0
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b92:	4b22      	ldr	r3, [pc, #136]	; (8001c1c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	f003 030c 	and.w	r3, r3, #12
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	d002      	beq.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x40>
 8001ba2:	2b08      	cmp	r3, #8
 8001ba4:	d003      	beq.n	8001bae <HAL_RCC_GetSysClockFreq+0x46>
 8001ba6:	e02d      	b.n	8001c04 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ba8:	4b1d      	ldr	r3, [pc, #116]	; (8001c20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001baa:	623b      	str	r3, [r7, #32]
      break;
 8001bac:	e02d      	b.n	8001c0a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	0c9b      	lsrs	r3, r3, #18
 8001bb2:	f003 030f 	and.w	r3, r3, #15
 8001bb6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001bba:	4413      	add	r3, r2
 8001bbc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001bc0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d013      	beq.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001bcc:	4b13      	ldr	r3, [pc, #76]	; (8001c1c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	0c5b      	lsrs	r3, r3, #17
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001bda:	4413      	add	r3, r2
 8001bdc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001be0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	4a0e      	ldr	r2, [pc, #56]	; (8001c20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001be6:	fb02 f203 	mul.w	r2, r2, r3
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8001bf2:	e004      	b.n	8001bfe <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	4a0b      	ldr	r2, [pc, #44]	; (8001c24 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001bf8:	fb02 f303 	mul.w	r3, r2, r3
 8001bfc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c00:	623b      	str	r3, [r7, #32]
      break;
 8001c02:	e002      	b.n	8001c0a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c04:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c06:	623b      	str	r3, [r7, #32]
      break;
 8001c08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c0a:	6a3b      	ldr	r3, [r7, #32]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3728      	adds	r7, #40	; 0x28
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bc90      	pop	{r4, r7}
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	08005bb8 	.word	0x08005bb8
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	007a1200 	.word	0x007a1200
 8001c24:	003d0900 	.word	0x003d0900

08001c28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c2c:	4b02      	ldr	r3, [pc, #8]	; (8001c38 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr
 8001c38:	20000000 	.word	0x20000000

08001c3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c40:	f7ff fff2 	bl	8001c28 <HAL_RCC_GetHCLKFreq>
 8001c44:	4602      	mov	r2, r0
 8001c46:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	0a1b      	lsrs	r3, r3, #8
 8001c4c:	f003 0307 	and.w	r3, r3, #7
 8001c50:	4903      	ldr	r1, [pc, #12]	; (8001c60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c52:	5ccb      	ldrb	r3, [r1, r3]
 8001c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	08005c80 	.word	0x08005c80

08001c64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c68:	f7ff ffde 	bl	8001c28 <HAL_RCC_GetHCLKFreq>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	0adb      	lsrs	r3, r3, #11
 8001c74:	f003 0307 	and.w	r3, r3, #7
 8001c78:	4903      	ldr	r1, [pc, #12]	; (8001c88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c7a:	5ccb      	ldrb	r3, [r1, r3]
 8001c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40021000 	.word	0x40021000
 8001c88:	08005c80 	.word	0x08005c80

08001c8c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c94:	4b0a      	ldr	r3, [pc, #40]	; (8001cc0 <RCC_Delay+0x34>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a0a      	ldr	r2, [pc, #40]	; (8001cc4 <RCC_Delay+0x38>)
 8001c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c9e:	0a5b      	lsrs	r3, r3, #9
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	fb02 f303 	mul.w	r3, r2, r3
 8001ca6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ca8:	bf00      	nop
  }
  while (Delay --);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	1e5a      	subs	r2, r3, #1
 8001cae:	60fa      	str	r2, [r7, #12]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1f9      	bne.n	8001ca8 <RCC_Delay+0x1c>
}
 8001cb4:	bf00      	nop
 8001cb6:	bf00      	nop
 8001cb8:	3714      	adds	r7, #20
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr
 8001cc0:	20000000 	.word	0x20000000
 8001cc4:	10624dd3 	.word	0x10624dd3

08001cc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e041      	b.n	8001d5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d106      	bne.n	8001cf4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7fe fdac 	bl	800084c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3304      	adds	r3, #4
 8001d04:	4619      	mov	r1, r3
 8001d06:	4610      	mov	r0, r2
 8001d08:	f000 faaa 	bl	8002260 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b082      	sub	sp, #8
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d101      	bne.n	8001d78 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e041      	b.n	8001dfc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d106      	bne.n	8001d92 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 f839 	bl	8001e04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2202      	movs	r2, #2
 8001d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	3304      	adds	r3, #4
 8001da2:	4619      	mov	r1, r3
 8001da4:	4610      	mov	r0, r2
 8001da6:	f000 fa5b 	bl	8002260 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2201      	movs	r2, #1
 8001dae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2201      	movs	r2, #1
 8001db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2201      	movs	r2, #1
 8001dee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2201      	movs	r2, #1
 8001df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bc80      	pop	{r7}
 8001e14:	4770      	bx	lr

08001e16 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b086      	sub	sp, #24
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
 8001e1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e093      	b.n	8001f52 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d106      	bne.n	8001e44 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f7fe fd56 	bl	80008f0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2202      	movs	r2, #2
 8001e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	6812      	ldr	r2, [r2, #0]
 8001e56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e5a:	f023 0307 	bic.w	r3, r3, #7
 8001e5e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3304      	adds	r3, #4
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4610      	mov	r0, r2
 8001e6c:	f000 f9f8 	bl	8002260 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6a1b      	ldr	r3, [r3, #32]
 8001e86:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	697a      	ldr	r2, [r7, #20]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e98:	f023 0303 	bic.w	r3, r3, #3
 8001e9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	689a      	ldr	r2, [r3, #8]
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	021b      	lsls	r3, r3, #8
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001eb6:	f023 030c 	bic.w	r3, r3, #12
 8001eba:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001ec2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ec6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	68da      	ldr	r2, [r3, #12]
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	69db      	ldr	r3, [r3, #28]
 8001ed0:	021b      	lsls	r3, r3, #8
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	011a      	lsls	r2, r3, #4
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	031b      	lsls	r3, r3, #12
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001ef4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685a      	ldr	r2, [r3, #4]
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	011b      	lsls	r3, r3, #4
 8001f00:	4313      	orrs	r3, r2
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	697a      	ldr	r2, [r7, #20]
 8001f0e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3718      	adds	r7, #24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
	...

08001f5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d101      	bne.n	8001f76 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001f72:	2302      	movs	r3, #2
 8001f74:	e0ac      	b.n	80020d0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2b0c      	cmp	r3, #12
 8001f82:	f200 809f 	bhi.w	80020c4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8001f86:	a201      	add	r2, pc, #4	; (adr r2, 8001f8c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8001f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f8c:	08001fc1 	.word	0x08001fc1
 8001f90:	080020c5 	.word	0x080020c5
 8001f94:	080020c5 	.word	0x080020c5
 8001f98:	080020c5 	.word	0x080020c5
 8001f9c:	08002001 	.word	0x08002001
 8001fa0:	080020c5 	.word	0x080020c5
 8001fa4:	080020c5 	.word	0x080020c5
 8001fa8:	080020c5 	.word	0x080020c5
 8001fac:	08002043 	.word	0x08002043
 8001fb0:	080020c5 	.word	0x080020c5
 8001fb4:	080020c5 	.word	0x080020c5
 8001fb8:	080020c5 	.word	0x080020c5
 8001fbc:	08002083 	.word	0x08002083
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68b9      	ldr	r1, [r7, #8]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f000 f9c4 	bl	8002354 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	699a      	ldr	r2, [r3, #24]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f042 0208 	orr.w	r2, r2, #8
 8001fda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	699a      	ldr	r2, [r3, #24]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f022 0204 	bic.w	r2, r2, #4
 8001fea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6999      	ldr	r1, [r3, #24]
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	691a      	ldr	r2, [r3, #16]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	619a      	str	r2, [r3, #24]
      break;
 8001ffe:	e062      	b.n	80020c6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68b9      	ldr	r1, [r7, #8]
 8002006:	4618      	mov	r0, r3
 8002008:	f000 fa14 	bl	8002434 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	699a      	ldr	r2, [r3, #24]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800201a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	699a      	ldr	r2, [r3, #24]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800202a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6999      	ldr	r1, [r3, #24]
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	021a      	lsls	r2, r3, #8
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	430a      	orrs	r2, r1
 800203e:	619a      	str	r2, [r3, #24]
      break;
 8002040:	e041      	b.n	80020c6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68b9      	ldr	r1, [r7, #8]
 8002048:	4618      	mov	r0, r3
 800204a:	f000 fa67 	bl	800251c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	69da      	ldr	r2, [r3, #28]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f042 0208 	orr.w	r2, r2, #8
 800205c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	69da      	ldr	r2, [r3, #28]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 0204 	bic.w	r2, r2, #4
 800206c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	69d9      	ldr	r1, [r3, #28]
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	691a      	ldr	r2, [r3, #16]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	430a      	orrs	r2, r1
 800207e:	61da      	str	r2, [r3, #28]
      break;
 8002080:	e021      	b.n	80020c6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68b9      	ldr	r1, [r7, #8]
 8002088:	4618      	mov	r0, r3
 800208a:	f000 fabb 	bl	8002604 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	69da      	ldr	r2, [r3, #28]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800209c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	69da      	ldr	r2, [r3, #28]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	69d9      	ldr	r1, [r3, #28]
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	021a      	lsls	r2, r3, #8
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	430a      	orrs	r2, r1
 80020c0:	61da      	str	r2, [r3, #28]
      break;
 80020c2:	e000      	b.n	80020c6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80020c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3710      	adds	r7, #16
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d101      	bne.n	80020f0 <HAL_TIM_ConfigClockSource+0x18>
 80020ec:	2302      	movs	r3, #2
 80020ee:	e0b3      	b.n	8002258 <HAL_TIM_ConfigClockSource+0x180>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2202      	movs	r2, #2
 80020fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800210e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002116:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	68fa      	ldr	r2, [r7, #12]
 800211e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002128:	d03e      	beq.n	80021a8 <HAL_TIM_ConfigClockSource+0xd0>
 800212a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800212e:	f200 8087 	bhi.w	8002240 <HAL_TIM_ConfigClockSource+0x168>
 8002132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002136:	f000 8085 	beq.w	8002244 <HAL_TIM_ConfigClockSource+0x16c>
 800213a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800213e:	d87f      	bhi.n	8002240 <HAL_TIM_ConfigClockSource+0x168>
 8002140:	2b70      	cmp	r3, #112	; 0x70
 8002142:	d01a      	beq.n	800217a <HAL_TIM_ConfigClockSource+0xa2>
 8002144:	2b70      	cmp	r3, #112	; 0x70
 8002146:	d87b      	bhi.n	8002240 <HAL_TIM_ConfigClockSource+0x168>
 8002148:	2b60      	cmp	r3, #96	; 0x60
 800214a:	d050      	beq.n	80021ee <HAL_TIM_ConfigClockSource+0x116>
 800214c:	2b60      	cmp	r3, #96	; 0x60
 800214e:	d877      	bhi.n	8002240 <HAL_TIM_ConfigClockSource+0x168>
 8002150:	2b50      	cmp	r3, #80	; 0x50
 8002152:	d03c      	beq.n	80021ce <HAL_TIM_ConfigClockSource+0xf6>
 8002154:	2b50      	cmp	r3, #80	; 0x50
 8002156:	d873      	bhi.n	8002240 <HAL_TIM_ConfigClockSource+0x168>
 8002158:	2b40      	cmp	r3, #64	; 0x40
 800215a:	d058      	beq.n	800220e <HAL_TIM_ConfigClockSource+0x136>
 800215c:	2b40      	cmp	r3, #64	; 0x40
 800215e:	d86f      	bhi.n	8002240 <HAL_TIM_ConfigClockSource+0x168>
 8002160:	2b30      	cmp	r3, #48	; 0x30
 8002162:	d064      	beq.n	800222e <HAL_TIM_ConfigClockSource+0x156>
 8002164:	2b30      	cmp	r3, #48	; 0x30
 8002166:	d86b      	bhi.n	8002240 <HAL_TIM_ConfigClockSource+0x168>
 8002168:	2b20      	cmp	r3, #32
 800216a:	d060      	beq.n	800222e <HAL_TIM_ConfigClockSource+0x156>
 800216c:	2b20      	cmp	r3, #32
 800216e:	d867      	bhi.n	8002240 <HAL_TIM_ConfigClockSource+0x168>
 8002170:	2b00      	cmp	r3, #0
 8002172:	d05c      	beq.n	800222e <HAL_TIM_ConfigClockSource+0x156>
 8002174:	2b10      	cmp	r3, #16
 8002176:	d05a      	beq.n	800222e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002178:	e062      	b.n	8002240 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6818      	ldr	r0, [r3, #0]
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	6899      	ldr	r1, [r3, #8]
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685a      	ldr	r2, [r3, #4]
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	f000 fb06 	bl	800279a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800219c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	609a      	str	r2, [r3, #8]
      break;
 80021a6:	e04e      	b.n	8002246 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6818      	ldr	r0, [r3, #0]
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	6899      	ldr	r1, [r3, #8]
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685a      	ldr	r2, [r3, #4]
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	f000 faef 	bl	800279a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	689a      	ldr	r2, [r3, #8]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021ca:	609a      	str	r2, [r3, #8]
      break;
 80021cc:	e03b      	b.n	8002246 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6818      	ldr	r0, [r3, #0]
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	6859      	ldr	r1, [r3, #4]
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	461a      	mov	r2, r3
 80021dc:	f000 fa66 	bl	80026ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2150      	movs	r1, #80	; 0x50
 80021e6:	4618      	mov	r0, r3
 80021e8:	f000 fabd 	bl	8002766 <TIM_ITRx_SetConfig>
      break;
 80021ec:	e02b      	b.n	8002246 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6818      	ldr	r0, [r3, #0]
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	6859      	ldr	r1, [r3, #4]
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	461a      	mov	r2, r3
 80021fc:	f000 fa84 	bl	8002708 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2160      	movs	r1, #96	; 0x60
 8002206:	4618      	mov	r0, r3
 8002208:	f000 faad 	bl	8002766 <TIM_ITRx_SetConfig>
      break;
 800220c:	e01b      	b.n	8002246 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6818      	ldr	r0, [r3, #0]
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	6859      	ldr	r1, [r3, #4]
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	461a      	mov	r2, r3
 800221c:	f000 fa46 	bl	80026ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2140      	movs	r1, #64	; 0x40
 8002226:	4618      	mov	r0, r3
 8002228:	f000 fa9d 	bl	8002766 <TIM_ITRx_SetConfig>
      break;
 800222c:	e00b      	b.n	8002246 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4619      	mov	r1, r3
 8002238:	4610      	mov	r0, r2
 800223a:	f000 fa94 	bl	8002766 <TIM_ITRx_SetConfig>
        break;
 800223e:	e002      	b.n	8002246 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002240:	bf00      	nop
 8002242:	e000      	b.n	8002246 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002244:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002256:	2300      	movs	r3, #0
}
 8002258:	4618      	mov	r0, r3
 800225a:	3710      	adds	r7, #16
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a33      	ldr	r2, [pc, #204]	; (8002340 <TIM_Base_SetConfig+0xe0>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d013      	beq.n	80022a0 <TIM_Base_SetConfig+0x40>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a32      	ldr	r2, [pc, #200]	; (8002344 <TIM_Base_SetConfig+0xe4>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d00f      	beq.n	80022a0 <TIM_Base_SetConfig+0x40>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002286:	d00b      	beq.n	80022a0 <TIM_Base_SetConfig+0x40>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4a2f      	ldr	r2, [pc, #188]	; (8002348 <TIM_Base_SetConfig+0xe8>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d007      	beq.n	80022a0 <TIM_Base_SetConfig+0x40>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4a2e      	ldr	r2, [pc, #184]	; (800234c <TIM_Base_SetConfig+0xec>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d003      	beq.n	80022a0 <TIM_Base_SetConfig+0x40>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4a2d      	ldr	r2, [pc, #180]	; (8002350 <TIM_Base_SetConfig+0xf0>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d108      	bne.n	80022b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a22      	ldr	r2, [pc, #136]	; (8002340 <TIM_Base_SetConfig+0xe0>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d013      	beq.n	80022e2 <TIM_Base_SetConfig+0x82>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a21      	ldr	r2, [pc, #132]	; (8002344 <TIM_Base_SetConfig+0xe4>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d00f      	beq.n	80022e2 <TIM_Base_SetConfig+0x82>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022c8:	d00b      	beq.n	80022e2 <TIM_Base_SetConfig+0x82>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a1e      	ldr	r2, [pc, #120]	; (8002348 <TIM_Base_SetConfig+0xe8>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d007      	beq.n	80022e2 <TIM_Base_SetConfig+0x82>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a1d      	ldr	r2, [pc, #116]	; (800234c <TIM_Base_SetConfig+0xec>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d003      	beq.n	80022e2 <TIM_Base_SetConfig+0x82>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a1c      	ldr	r2, [pc, #112]	; (8002350 <TIM_Base_SetConfig+0xf0>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d108      	bne.n	80022f4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	4313      	orrs	r3, r2
 8002300:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68fa      	ldr	r2, [r7, #12]
 8002306:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4a09      	ldr	r2, [pc, #36]	; (8002340 <TIM_Base_SetConfig+0xe0>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d003      	beq.n	8002328 <TIM_Base_SetConfig+0xc8>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a08      	ldr	r2, [pc, #32]	; (8002344 <TIM_Base_SetConfig+0xe4>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d103      	bne.n	8002330 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	691a      	ldr	r2, [r3, #16]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	615a      	str	r2, [r3, #20]
}
 8002336:	bf00      	nop
 8002338:	3714      	adds	r7, #20
 800233a:	46bd      	mov	sp, r7
 800233c:	bc80      	pop	{r7}
 800233e:	4770      	bx	lr
 8002340:	40012c00 	.word	0x40012c00
 8002344:	40013400 	.word	0x40013400
 8002348:	40000400 	.word	0x40000400
 800234c:	40000800 	.word	0x40000800
 8002350:	40000c00 	.word	0x40000c00

08002354 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002354:	b480      	push	{r7}
 8002356:	b087      	sub	sp, #28
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	f023 0201 	bic.w	r2, r3, #1
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002382:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f023 0303 	bic.w	r3, r3, #3
 800238a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	4313      	orrs	r3, r2
 8002394:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	f023 0302 	bic.w	r3, r3, #2
 800239c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	697a      	ldr	r2, [r7, #20]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4a20      	ldr	r2, [pc, #128]	; (800242c <TIM_OC1_SetConfig+0xd8>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d003      	beq.n	80023b8 <TIM_OC1_SetConfig+0x64>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4a1f      	ldr	r2, [pc, #124]	; (8002430 <TIM_OC1_SetConfig+0xdc>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d10c      	bne.n	80023d2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	f023 0308 	bic.w	r3, r3, #8
 80023be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	697a      	ldr	r2, [r7, #20]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	f023 0304 	bic.w	r3, r3, #4
 80023d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a15      	ldr	r2, [pc, #84]	; (800242c <TIM_OC1_SetConfig+0xd8>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d003      	beq.n	80023e2 <TIM_OC1_SetConfig+0x8e>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a14      	ldr	r2, [pc, #80]	; (8002430 <TIM_OC1_SetConfig+0xdc>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d111      	bne.n	8002406 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80023f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	4313      	orrs	r3, r2
 8002404:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685a      	ldr	r2, [r3, #4]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	697a      	ldr	r2, [r7, #20]
 800241e:	621a      	str	r2, [r3, #32]
}
 8002420:	bf00      	nop
 8002422:	371c      	adds	r7, #28
 8002424:	46bd      	mov	sp, r7
 8002426:	bc80      	pop	{r7}
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	40012c00 	.word	0x40012c00
 8002430:	40013400 	.word	0x40013400

08002434 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002434:	b480      	push	{r7}
 8002436:	b087      	sub	sp, #28
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a1b      	ldr	r3, [r3, #32]
 8002442:	f023 0210 	bic.w	r2, r3, #16
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a1b      	ldr	r3, [r3, #32]
 800244e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800246a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	021b      	lsls	r3, r3, #8
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	4313      	orrs	r3, r2
 8002476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	f023 0320 	bic.w	r3, r3, #32
 800247e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	011b      	lsls	r3, r3, #4
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	4313      	orrs	r3, r2
 800248a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4a21      	ldr	r2, [pc, #132]	; (8002514 <TIM_OC2_SetConfig+0xe0>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d003      	beq.n	800249c <TIM_OC2_SetConfig+0x68>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a20      	ldr	r2, [pc, #128]	; (8002518 <TIM_OC2_SetConfig+0xe4>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d10d      	bne.n	80024b8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	011b      	lsls	r3, r3, #4
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4a16      	ldr	r2, [pc, #88]	; (8002514 <TIM_OC2_SetConfig+0xe0>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d003      	beq.n	80024c8 <TIM_OC2_SetConfig+0x94>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4a15      	ldr	r2, [pc, #84]	; (8002518 <TIM_OC2_SetConfig+0xe4>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d113      	bne.n	80024f0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80024ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80024d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	695b      	ldr	r3, [r3, #20]
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68fa      	ldr	r2, [r7, #12]
 80024fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	621a      	str	r2, [r3, #32]
}
 800250a:	bf00      	nop
 800250c:	371c      	adds	r7, #28
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr
 8002514:	40012c00 	.word	0x40012c00
 8002518:	40013400 	.word	0x40013400

0800251c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800251c:	b480      	push	{r7}
 800251e:	b087      	sub	sp, #28
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a1b      	ldr	r3, [r3, #32]
 800252a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a1b      	ldr	r3, [r3, #32]
 8002536:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800254a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f023 0303 	bic.w	r3, r3, #3
 8002552:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	4313      	orrs	r3, r2
 800255c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002564:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	021b      	lsls	r3, r3, #8
 800256c:	697a      	ldr	r2, [r7, #20]
 800256e:	4313      	orrs	r3, r2
 8002570:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a21      	ldr	r2, [pc, #132]	; (80025fc <TIM_OC3_SetConfig+0xe0>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d003      	beq.n	8002582 <TIM_OC3_SetConfig+0x66>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a20      	ldr	r2, [pc, #128]	; (8002600 <TIM_OC3_SetConfig+0xe4>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d10d      	bne.n	800259e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002588:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	021b      	lsls	r3, r3, #8
 8002590:	697a      	ldr	r2, [r7, #20]
 8002592:	4313      	orrs	r3, r2
 8002594:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800259c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a16      	ldr	r2, [pc, #88]	; (80025fc <TIM_OC3_SetConfig+0xe0>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d003      	beq.n	80025ae <TIM_OC3_SetConfig+0x92>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a15      	ldr	r2, [pc, #84]	; (8002600 <TIM_OC3_SetConfig+0xe4>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d113      	bne.n	80025d6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80025b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80025bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	011b      	lsls	r3, r3, #4
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	011b      	lsls	r3, r3, #4
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	697a      	ldr	r2, [r7, #20]
 80025ee:	621a      	str	r2, [r3, #32]
}
 80025f0:	bf00      	nop
 80025f2:	371c      	adds	r7, #28
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bc80      	pop	{r7}
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	40012c00 	.word	0x40012c00
 8002600:	40013400 	.word	0x40013400

08002604 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002604:	b480      	push	{r7}
 8002606:	b087      	sub	sp, #28
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a1b      	ldr	r3, [r3, #32]
 8002612:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a1b      	ldr	r3, [r3, #32]
 800261e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69db      	ldr	r3, [r3, #28]
 800262a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800263a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	021b      	lsls	r3, r3, #8
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	4313      	orrs	r3, r2
 8002646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800264e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	031b      	lsls	r3, r3, #12
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	4313      	orrs	r3, r2
 800265a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a11      	ldr	r2, [pc, #68]	; (80026a4 <TIM_OC4_SetConfig+0xa0>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d003      	beq.n	800266c <TIM_OC4_SetConfig+0x68>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a10      	ldr	r2, [pc, #64]	; (80026a8 <TIM_OC4_SetConfig+0xa4>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d109      	bne.n	8002680 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002672:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	695b      	ldr	r3, [r3, #20]
 8002678:	019b      	lsls	r3, r3, #6
 800267a:	697a      	ldr	r2, [r7, #20]
 800267c:	4313      	orrs	r3, r2
 800267e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685a      	ldr	r2, [r3, #4]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	621a      	str	r2, [r3, #32]
}
 800269a:	bf00      	nop
 800269c:	371c      	adds	r7, #28
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr
 80026a4:	40012c00 	.word	0x40012c00
 80026a8:	40013400 	.word	0x40013400

080026ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b087      	sub	sp, #28
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6a1b      	ldr	r3, [r3, #32]
 80026bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6a1b      	ldr	r3, [r3, #32]
 80026c2:	f023 0201 	bic.w	r2, r3, #1
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	011b      	lsls	r3, r3, #4
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	4313      	orrs	r3, r2
 80026e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	f023 030a 	bic.w	r3, r3, #10
 80026e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	697a      	ldr	r2, [r7, #20]
 80026fc:	621a      	str	r2, [r3, #32]
}
 80026fe:	bf00      	nop
 8002700:	371c      	adds	r7, #28
 8002702:	46bd      	mov	sp, r7
 8002704:	bc80      	pop	{r7}
 8002706:	4770      	bx	lr

08002708 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002708:	b480      	push	{r7}
 800270a:	b087      	sub	sp, #28
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6a1b      	ldr	r3, [r3, #32]
 8002718:	f023 0210 	bic.w	r2, r3, #16
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002732:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	031b      	lsls	r3, r3, #12
 8002738:	697a      	ldr	r2, [r7, #20]
 800273a:	4313      	orrs	r3, r2
 800273c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002744:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	011b      	lsls	r3, r3, #4
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	4313      	orrs	r3, r2
 800274e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	621a      	str	r2, [r3, #32]
}
 800275c:	bf00      	nop
 800275e:	371c      	adds	r7, #28
 8002760:	46bd      	mov	sp, r7
 8002762:	bc80      	pop	{r7}
 8002764:	4770      	bx	lr

08002766 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002766:	b480      	push	{r7}
 8002768:	b085      	sub	sp, #20
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
 800276e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800277c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800277e:	683a      	ldr	r2, [r7, #0]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	4313      	orrs	r3, r2
 8002784:	f043 0307 	orr.w	r3, r3, #7
 8002788:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	609a      	str	r2, [r3, #8]
}
 8002790:	bf00      	nop
 8002792:	3714      	adds	r7, #20
 8002794:	46bd      	mov	sp, r7
 8002796:	bc80      	pop	{r7}
 8002798:	4770      	bx	lr

0800279a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800279a:	b480      	push	{r7}
 800279c:	b087      	sub	sp, #28
 800279e:	af00      	add	r7, sp, #0
 80027a0:	60f8      	str	r0, [r7, #12]
 80027a2:	60b9      	str	r1, [r7, #8]
 80027a4:	607a      	str	r2, [r7, #4]
 80027a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027b4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	021a      	lsls	r2, r3, #8
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	431a      	orrs	r2, r3
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	609a      	str	r2, [r3, #8]
}
 80027ce:	bf00      	nop
 80027d0:	371c      	adds	r7, #28
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bc80      	pop	{r7}
 80027d6:	4770      	bx	lr

080027d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d101      	bne.n	80027f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027ec:	2302      	movs	r3, #2
 80027ee:	e050      	b.n	8002892 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2202      	movs	r2, #2
 80027fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002816:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	4313      	orrs	r3, r2
 8002820:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a1b      	ldr	r2, [pc, #108]	; (800289c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d018      	beq.n	8002866 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a19      	ldr	r2, [pc, #100]	; (80028a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d013      	beq.n	8002866 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002846:	d00e      	beq.n	8002866 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a15      	ldr	r2, [pc, #84]	; (80028a4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d009      	beq.n	8002866 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a14      	ldr	r2, [pc, #80]	; (80028a8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d004      	beq.n	8002866 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a12      	ldr	r2, [pc, #72]	; (80028ac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d10c      	bne.n	8002880 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800286c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	68ba      	ldr	r2, [r7, #8]
 8002874:	4313      	orrs	r3, r2
 8002876:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68ba      	ldr	r2, [r7, #8]
 800287e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3714      	adds	r7, #20
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr
 800289c:	40012c00 	.word	0x40012c00
 80028a0:	40013400 	.word	0x40013400
 80028a4:	40000400 	.word	0x40000400
 80028a8:	40000800 	.word	0x40000800
 80028ac:	40000c00 	.word	0x40000c00

080028b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80028ba:	2300      	movs	r3, #0
 80028bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d101      	bne.n	80028cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80028c8:	2302      	movs	r3, #2
 80028ca:	e03d      	b.n	8002948 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	4313      	orrs	r3, r2
 80028e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4313      	orrs	r3, r2
 800290a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	4313      	orrs	r3, r2
 8002918:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	695b      	ldr	r3, [r3, #20]
 8002924:	4313      	orrs	r3, r2
 8002926:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	69db      	ldr	r3, [r3, #28]
 8002932:	4313      	orrs	r3, r2
 8002934:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3714      	adds	r7, #20
 800294c:	46bd      	mov	sp, r7
 800294e:	bc80      	pop	{r7}
 8002950:	4770      	bx	lr

08002952 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b082      	sub	sp, #8
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d101      	bne.n	8002964 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e03f      	b.n	80029e4 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2b00      	cmp	r3, #0
 800296e:	d106      	bne.n	800297e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f7fe f86d 	bl	8000a58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2224      	movs	r2, #36	; 0x24
 8002982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68da      	ldr	r2, [r3, #12]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002994:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 fb48 	bl	800302c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	691a      	ldr	r2, [r3, #16]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029aa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	695a      	ldr	r2, [r3, #20]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029ba:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68da      	ldr	r2, [r3, #12]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029ca:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2220      	movs	r2, #32
 80029d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2220      	movs	r2, #32
 80029de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b08a      	sub	sp, #40	; 0x28
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002a10:	2300      	movs	r3, #0
 8002a12:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a16:	f003 030f 	and.w	r3, r3, #15
 8002a1a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d10d      	bne.n	8002a3e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a24:	f003 0320 	and.w	r3, r3, #32
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d008      	beq.n	8002a3e <HAL_UART_IRQHandler+0x52>
 8002a2c:	6a3b      	ldr	r3, [r7, #32]
 8002a2e:	f003 0320 	and.w	r3, r3, #32
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d003      	beq.n	8002a3e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 fa4f 	bl	8002eda <UART_Receive_IT>
      return;
 8002a3c:	e17b      	b.n	8002d36 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	f000 80b1 	beq.w	8002ba8 <HAL_UART_IRQHandler+0x1bc>
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d105      	bne.n	8002a5c <HAL_UART_IRQHandler+0x70>
 8002a50:	6a3b      	ldr	r3, [r7, #32]
 8002a52:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f000 80a6 	beq.w	8002ba8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00a      	beq.n	8002a7c <HAL_UART_IRQHandler+0x90>
 8002a66:	6a3b      	ldr	r3, [r7, #32]
 8002a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d005      	beq.n	8002a7c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a74:	f043 0201 	orr.w	r2, r3, #1
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7e:	f003 0304 	and.w	r3, r3, #4
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00a      	beq.n	8002a9c <HAL_UART_IRQHandler+0xb0>
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d005      	beq.n	8002a9c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a94:	f043 0202 	orr.w	r2, r3, #2
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00a      	beq.n	8002abc <HAL_UART_IRQHandler+0xd0>
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	f003 0301 	and.w	r3, r3, #1
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d005      	beq.n	8002abc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab4:	f043 0204 	orr.w	r2, r3, #4
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abe:	f003 0308 	and.w	r3, r3, #8
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00f      	beq.n	8002ae6 <HAL_UART_IRQHandler+0xfa>
 8002ac6:	6a3b      	ldr	r3, [r7, #32]
 8002ac8:	f003 0320 	and.w	r3, r3, #32
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d104      	bne.n	8002ada <HAL_UART_IRQHandler+0xee>
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d005      	beq.n	8002ae6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	f043 0208 	orr.w	r2, r3, #8
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f000 811e 	beq.w	8002d2c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	f003 0320 	and.w	r3, r3, #32
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d007      	beq.n	8002b0a <HAL_UART_IRQHandler+0x11e>
 8002afa:	6a3b      	ldr	r3, [r7, #32]
 8002afc:	f003 0320 	and.w	r3, r3, #32
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d002      	beq.n	8002b0a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 f9e8 	bl	8002eda <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	695b      	ldr	r3, [r3, #20]
 8002b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	bf14      	ite	ne
 8002b18:	2301      	movne	r3, #1
 8002b1a:	2300      	moveq	r3, #0
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b24:	f003 0308 	and.w	r3, r3, #8
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d102      	bne.n	8002b32 <HAL_UART_IRQHandler+0x146>
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d031      	beq.n	8002b96 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f92a 	bl	8002d8c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d023      	beq.n	8002b8e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	695a      	ldr	r2, [r3, #20]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b54:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d013      	beq.n	8002b86 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b62:	4a76      	ldr	r2, [pc, #472]	; (8002d3c <HAL_UART_IRQHandler+0x350>)
 8002b64:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7fe f9de 	bl	8000f2c <HAL_DMA_Abort_IT>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d016      	beq.n	8002ba4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b80:	4610      	mov	r0, r2
 8002b82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b84:	e00e      	b.n	8002ba4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 f8ec 	bl	8002d64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b8c:	e00a      	b.n	8002ba4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f8e8 	bl	8002d64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b94:	e006      	b.n	8002ba4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 f8e4 	bl	8002d64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002ba2:	e0c3      	b.n	8002d2c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ba4:	bf00      	nop
    return;
 8002ba6:	e0c1      	b.n	8002d2c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	f040 80a1 	bne.w	8002cf4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb4:	f003 0310 	and.w	r3, r3, #16
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 809b 	beq.w	8002cf4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002bbe:	6a3b      	ldr	r3, [r7, #32]
 8002bc0:	f003 0310 	and.w	r3, r3, #16
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 8095 	beq.w	8002cf4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002bca:	2300      	movs	r3, #0
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	60fb      	str	r3, [r7, #12]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	60fb      	str	r3, [r7, #12]
 8002bde:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d04e      	beq.n	8002c8c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002bf8:	8a3b      	ldrh	r3, [r7, #16]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f000 8098 	beq.w	8002d30 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c04:	8a3a      	ldrh	r2, [r7, #16]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	f080 8092 	bcs.w	8002d30 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	8a3a      	ldrh	r2, [r7, #16]
 8002c10:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	2b20      	cmp	r3, #32
 8002c1a:	d02b      	beq.n	8002c74 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68da      	ldr	r2, [r3, #12]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c2a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	695a      	ldr	r2, [r3, #20]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f022 0201 	bic.w	r2, r2, #1
 8002c3a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	695a      	ldr	r2, [r3, #20]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c4a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2220      	movs	r2, #32
 8002c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68da      	ldr	r2, [r3, #12]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 0210 	bic.w	r2, r2, #16
 8002c68:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7fe f921 	bl	8000eb6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	4619      	mov	r1, r3
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 f876 	bl	8002d76 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002c8a:	e051      	b.n	8002d30 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d047      	beq.n	8002d34 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002ca4:	8a7b      	ldrh	r3, [r7, #18]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d044      	beq.n	8002d34 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68da      	ldr	r2, [r3, #12]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002cb8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	695a      	ldr	r2, [r3, #20]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f022 0201 	bic.w	r2, r2, #1
 8002cc8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2220      	movs	r2, #32
 8002cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68da      	ldr	r2, [r3, #12]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 0210 	bic.w	r2, r2, #16
 8002ce6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ce8:	8a7b      	ldrh	r3, [r7, #18]
 8002cea:	4619      	mov	r1, r3
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f000 f842 	bl	8002d76 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002cf2:	e01f      	b.n	8002d34 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d008      	beq.n	8002d10 <HAL_UART_IRQHandler+0x324>
 8002cfe:	6a3b      	ldr	r3, [r7, #32]
 8002d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d003      	beq.n	8002d10 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f000 f87f 	bl	8002e0c <UART_Transmit_IT>
    return;
 8002d0e:	e012      	b.n	8002d36 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00d      	beq.n	8002d36 <HAL_UART_IRQHandler+0x34a>
 8002d1a:	6a3b      	ldr	r3, [r7, #32]
 8002d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d008      	beq.n	8002d36 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 f8c0 	bl	8002eaa <UART_EndTransmit_IT>
    return;
 8002d2a:	e004      	b.n	8002d36 <HAL_UART_IRQHandler+0x34a>
    return;
 8002d2c:	bf00      	nop
 8002d2e:	e002      	b.n	8002d36 <HAL_UART_IRQHandler+0x34a>
      return;
 8002d30:	bf00      	nop
 8002d32:	e000      	b.n	8002d36 <HAL_UART_IRQHandler+0x34a>
      return;
 8002d34:	bf00      	nop
  }
}
 8002d36:	3728      	adds	r7, #40	; 0x28
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	08002de5 	.word	0x08002de5

08002d40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bc80      	pop	{r7}
 8002d50:	4770      	bx	lr

08002d52 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b083      	sub	sp, #12
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002d5a:	bf00      	nop
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bc80      	pop	{r7}
 8002d62:	4770      	bx	lr

08002d64 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bc80      	pop	{r7}
 8002d74:	4770      	bx	lr

08002d76 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
 8002d7e:	460b      	mov	r3, r1
 8002d80:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d82:	bf00      	nop
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bc80      	pop	{r7}
 8002d8a:	4770      	bx	lr

08002d8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68da      	ldr	r2, [r3, #12]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002da2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	695a      	ldr	r2, [r3, #20]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 0201 	bic.w	r2, r2, #1
 8002db2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d107      	bne.n	8002dcc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68da      	ldr	r2, [r3, #12]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f022 0210 	bic.w	r2, r2, #16
 8002dca:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2220      	movs	r2, #32
 8002dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bc80      	pop	{r7}
 8002de2:	4770      	bx	lr

08002de4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f7ff ffb0 	bl	8002d64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e04:	bf00      	nop
 8002e06:	3710      	adds	r7, #16
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b21      	cmp	r3, #33	; 0x21
 8002e1e:	d13e      	bne.n	8002e9e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e28:	d114      	bne.n	8002e54 <UART_Transmit_IT+0x48>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d110      	bne.n	8002e54 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	881b      	ldrh	r3, [r3, #0]
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e46:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	1c9a      	adds	r2, r3, #2
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	621a      	str	r2, [r3, #32]
 8002e52:	e008      	b.n	8002e66 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	1c59      	adds	r1, r3, #1
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	6211      	str	r1, [r2, #32]
 8002e5e:	781a      	ldrb	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	4619      	mov	r1, r3
 8002e74:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d10f      	bne.n	8002e9a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68da      	ldr	r2, [r3, #12]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e88:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68da      	ldr	r2, [r3, #12]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e98:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	e000      	b.n	8002ea0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002e9e:	2302      	movs	r3, #2
  }
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3714      	adds	r7, #20
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bc80      	pop	{r7}
 8002ea8:	4770      	bx	lr

08002eaa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b082      	sub	sp, #8
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68da      	ldr	r2, [r3, #12]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ec0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2220      	movs	r2, #32
 8002ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f7ff ff38 	bl	8002d40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b086      	sub	sp, #24
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b22      	cmp	r3, #34	; 0x22
 8002eec:	f040 8099 	bne.w	8003022 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ef8:	d117      	bne.n	8002f2a <UART_Receive_IT+0x50>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d113      	bne.n	8002f2a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002f02:	2300      	movs	r3, #0
 8002f04:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f22:	1c9a      	adds	r2, r3, #2
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	629a      	str	r2, [r3, #40]	; 0x28
 8002f28:	e026      	b.n	8002f78 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002f30:	2300      	movs	r3, #0
 8002f32:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f3c:	d007      	beq.n	8002f4e <UART_Receive_IT+0x74>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10a      	bne.n	8002f5c <UART_Receive_IT+0x82>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d106      	bne.n	8002f5c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	b2da      	uxtb	r2, r3
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	701a      	strb	r2, [r3, #0]
 8002f5a:	e008      	b.n	8002f6e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f72:	1c5a      	adds	r2, r3, #1
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	4619      	mov	r1, r3
 8002f86:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d148      	bne.n	800301e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68da      	ldr	r2, [r3, #12]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f022 0220 	bic.w	r2, r2, #32
 8002f9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68da      	ldr	r2, [r3, #12]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002faa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	695a      	ldr	r2, [r3, #20]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 0201 	bic.w	r2, r2, #1
 8002fba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d123      	bne.n	8003014 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68da      	ldr	r2, [r3, #12]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f022 0210 	bic.w	r2, r2, #16
 8002fe0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0310 	and.w	r3, r3, #16
 8002fec:	2b10      	cmp	r3, #16
 8002fee:	d10a      	bne.n	8003006 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	60fb      	str	r3, [r7, #12]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	60fb      	str	r3, [r7, #12]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	60fb      	str	r3, [r7, #12]
 8003004:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800300a:	4619      	mov	r1, r3
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f7ff feb2 	bl	8002d76 <HAL_UARTEx_RxEventCallback>
 8003012:	e002      	b.n	800301a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f7ff fe9c 	bl	8002d52 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800301a:	2300      	movs	r3, #0
 800301c:	e002      	b.n	8003024 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800301e:	2300      	movs	r3, #0
 8003020:	e000      	b.n	8003024 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003022:	2302      	movs	r3, #2
  }
}
 8003024:	4618      	mov	r0, r3
 8003026:	3718      	adds	r7, #24
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68da      	ldr	r2, [r3, #12]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	430a      	orrs	r2, r1
 8003048:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	689a      	ldr	r2, [r3, #8]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	431a      	orrs	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	695b      	ldr	r3, [r3, #20]
 8003058:	4313      	orrs	r3, r2
 800305a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003066:	f023 030c 	bic.w	r3, r3, #12
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	6812      	ldr	r2, [r2, #0]
 800306e:	68b9      	ldr	r1, [r7, #8]
 8003070:	430b      	orrs	r3, r1
 8003072:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	699a      	ldr	r2, [r3, #24]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	430a      	orrs	r2, r1
 8003088:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a2c      	ldr	r2, [pc, #176]	; (8003140 <UART_SetConfig+0x114>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d103      	bne.n	800309c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003094:	f7fe fde6 	bl	8001c64 <HAL_RCC_GetPCLK2Freq>
 8003098:	60f8      	str	r0, [r7, #12]
 800309a:	e002      	b.n	80030a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800309c:	f7fe fdce 	bl	8001c3c <HAL_RCC_GetPCLK1Freq>
 80030a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	4613      	mov	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	4413      	add	r3, r2
 80030aa:	009a      	lsls	r2, r3, #2
 80030ac:	441a      	add	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b8:	4a22      	ldr	r2, [pc, #136]	; (8003144 <UART_SetConfig+0x118>)
 80030ba:	fba2 2303 	umull	r2, r3, r2, r3
 80030be:	095b      	lsrs	r3, r3, #5
 80030c0:	0119      	lsls	r1, r3, #4
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	4613      	mov	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	4413      	add	r3, r2
 80030ca:	009a      	lsls	r2, r3, #2
 80030cc:	441a      	add	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80030d8:	4b1a      	ldr	r3, [pc, #104]	; (8003144 <UART_SetConfig+0x118>)
 80030da:	fba3 0302 	umull	r0, r3, r3, r2
 80030de:	095b      	lsrs	r3, r3, #5
 80030e0:	2064      	movs	r0, #100	; 0x64
 80030e2:	fb00 f303 	mul.w	r3, r0, r3
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	011b      	lsls	r3, r3, #4
 80030ea:	3332      	adds	r3, #50	; 0x32
 80030ec:	4a15      	ldr	r2, [pc, #84]	; (8003144 <UART_SetConfig+0x118>)
 80030ee:	fba2 2303 	umull	r2, r3, r2, r3
 80030f2:	095b      	lsrs	r3, r3, #5
 80030f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030f8:	4419      	add	r1, r3
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	4613      	mov	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4413      	add	r3, r2
 8003102:	009a      	lsls	r2, r3, #2
 8003104:	441a      	add	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003110:	4b0c      	ldr	r3, [pc, #48]	; (8003144 <UART_SetConfig+0x118>)
 8003112:	fba3 0302 	umull	r0, r3, r3, r2
 8003116:	095b      	lsrs	r3, r3, #5
 8003118:	2064      	movs	r0, #100	; 0x64
 800311a:	fb00 f303 	mul.w	r3, r0, r3
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	011b      	lsls	r3, r3, #4
 8003122:	3332      	adds	r3, #50	; 0x32
 8003124:	4a07      	ldr	r2, [pc, #28]	; (8003144 <UART_SetConfig+0x118>)
 8003126:	fba2 2303 	umull	r2, r3, r2, r3
 800312a:	095b      	lsrs	r3, r3, #5
 800312c:	f003 020f 	and.w	r2, r3, #15
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	440a      	add	r2, r1
 8003136:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003138:	bf00      	nop
 800313a:	3710      	adds	r7, #16
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	40013800 	.word	0x40013800
 8003144:	51eb851f 	.word	0x51eb851f

08003148 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800314e:	f3ef 8305 	mrs	r3, IPSR
 8003152:	60bb      	str	r3, [r7, #8]
  return(result);
 8003154:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10f      	bne.n	800317a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800315a:	f3ef 8310 	mrs	r3, PRIMASK
 800315e:	607b      	str	r3, [r7, #4]
  return(result);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d109      	bne.n	800317a <osKernelInitialize+0x32>
 8003166:	4b10      	ldr	r3, [pc, #64]	; (80031a8 <osKernelInitialize+0x60>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2b02      	cmp	r3, #2
 800316c:	d109      	bne.n	8003182 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800316e:	f3ef 8311 	mrs	r3, BASEPRI
 8003172:	603b      	str	r3, [r7, #0]
  return(result);
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800317a:	f06f 0305 	mvn.w	r3, #5
 800317e:	60fb      	str	r3, [r7, #12]
 8003180:	e00c      	b.n	800319c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003182:	4b09      	ldr	r3, [pc, #36]	; (80031a8 <osKernelInitialize+0x60>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d105      	bne.n	8003196 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800318a:	4b07      	ldr	r3, [pc, #28]	; (80031a8 <osKernelInitialize+0x60>)
 800318c:	2201      	movs	r2, #1
 800318e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003190:	2300      	movs	r3, #0
 8003192:	60fb      	str	r3, [r7, #12]
 8003194:	e002      	b.n	800319c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003196:	f04f 33ff 	mov.w	r3, #4294967295
 800319a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800319c:	68fb      	ldr	r3, [r7, #12]
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3714      	adds	r7, #20
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bc80      	pop	{r7}
 80031a6:	4770      	bx	lr
 80031a8:	2000002c 	.word	0x2000002c

080031ac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031b2:	f3ef 8305 	mrs	r3, IPSR
 80031b6:	60bb      	str	r3, [r7, #8]
  return(result);
 80031b8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d10f      	bne.n	80031de <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031be:	f3ef 8310 	mrs	r3, PRIMASK
 80031c2:	607b      	str	r3, [r7, #4]
  return(result);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d109      	bne.n	80031de <osKernelStart+0x32>
 80031ca:	4b11      	ldr	r3, [pc, #68]	; (8003210 <osKernelStart+0x64>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d109      	bne.n	80031e6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80031d2:	f3ef 8311 	mrs	r3, BASEPRI
 80031d6:	603b      	str	r3, [r7, #0]
  return(result);
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d003      	beq.n	80031e6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80031de:	f06f 0305 	mvn.w	r3, #5
 80031e2:	60fb      	str	r3, [r7, #12]
 80031e4:	e00e      	b.n	8003204 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80031e6:	4b0a      	ldr	r3, [pc, #40]	; (8003210 <osKernelStart+0x64>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d107      	bne.n	80031fe <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80031ee:	4b08      	ldr	r3, [pc, #32]	; (8003210 <osKernelStart+0x64>)
 80031f0:	2202      	movs	r2, #2
 80031f2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80031f4:	f001 f878 	bl	80042e8 <vTaskStartScheduler>
      stat = osOK;
 80031f8:	2300      	movs	r3, #0
 80031fa:	60fb      	str	r3, [r7, #12]
 80031fc:	e002      	b.n	8003204 <osKernelStart+0x58>
    } else {
      stat = osError;
 80031fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003202:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003204:	68fb      	ldr	r3, [r7, #12]
}
 8003206:	4618      	mov	r0, r3
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	2000002c 	.word	0x2000002c

08003214 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003214:	b580      	push	{r7, lr}
 8003216:	b092      	sub	sp, #72	; 0x48
 8003218:	af04      	add	r7, sp, #16
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003220:	2300      	movs	r3, #0
 8003222:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003224:	f3ef 8305 	mrs	r3, IPSR
 8003228:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800322a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800322c:	2b00      	cmp	r3, #0
 800322e:	f040 8094 	bne.w	800335a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003232:	f3ef 8310 	mrs	r3, PRIMASK
 8003236:	623b      	str	r3, [r7, #32]
  return(result);
 8003238:	6a3b      	ldr	r3, [r7, #32]
 800323a:	2b00      	cmp	r3, #0
 800323c:	f040 808d 	bne.w	800335a <osThreadNew+0x146>
 8003240:	4b48      	ldr	r3, [pc, #288]	; (8003364 <osThreadNew+0x150>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2b02      	cmp	r3, #2
 8003246:	d106      	bne.n	8003256 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003248:	f3ef 8311 	mrs	r3, BASEPRI
 800324c:	61fb      	str	r3, [r7, #28]
  return(result);
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	2b00      	cmp	r3, #0
 8003252:	f040 8082 	bne.w	800335a <osThreadNew+0x146>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d07e      	beq.n	800335a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800325c:	2380      	movs	r3, #128	; 0x80
 800325e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003260:	2318      	movs	r3, #24
 8003262:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003264:	2300      	movs	r3, #0
 8003266:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003268:	f107 031b 	add.w	r3, r7, #27
 800326c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800326e:	f04f 33ff 	mov.w	r3, #4294967295
 8003272:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d045      	beq.n	8003306 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d002      	beq.n	8003288 <osThreadNew+0x74>
        name = attr->name;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d002      	beq.n	8003296 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003298:	2b00      	cmp	r3, #0
 800329a:	d008      	beq.n	80032ae <osThreadNew+0x9a>
 800329c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800329e:	2b38      	cmp	r3, #56	; 0x38
 80032a0:	d805      	bhi.n	80032ae <osThreadNew+0x9a>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <osThreadNew+0x9e>
        return (NULL);
 80032ae:	2300      	movs	r3, #0
 80032b0:	e054      	b.n	800335c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d003      	beq.n	80032c2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	089b      	lsrs	r3, r3, #2
 80032c0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00e      	beq.n	80032e8 <osThreadNew+0xd4>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	2b5b      	cmp	r3, #91	; 0x5b
 80032d0:	d90a      	bls.n	80032e8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d006      	beq.n	80032e8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d002      	beq.n	80032e8 <osThreadNew+0xd4>
        mem = 1;
 80032e2:	2301      	movs	r3, #1
 80032e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80032e6:	e010      	b.n	800330a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d10c      	bne.n	800330a <osThreadNew+0xf6>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d108      	bne.n	800330a <osThreadNew+0xf6>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d104      	bne.n	800330a <osThreadNew+0xf6>
          mem = 0;
 8003300:	2300      	movs	r3, #0
 8003302:	62bb      	str	r3, [r7, #40]	; 0x28
 8003304:	e001      	b.n	800330a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003306:	2300      	movs	r3, #0
 8003308:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800330a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800330c:	2b01      	cmp	r3, #1
 800330e:	d110      	bne.n	8003332 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003318:	9202      	str	r2, [sp, #8]
 800331a:	9301      	str	r3, [sp, #4]
 800331c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003324:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003326:	68f8      	ldr	r0, [r7, #12]
 8003328:	f000 fe12 	bl	8003f50 <xTaskCreateStatic>
 800332c:	4603      	mov	r3, r0
 800332e:	617b      	str	r3, [r7, #20]
 8003330:	e013      	b.n	800335a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003334:	2b00      	cmp	r3, #0
 8003336:	d110      	bne.n	800335a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800333a:	b29a      	uxth	r2, r3
 800333c:	f107 0314 	add.w	r3, r7, #20
 8003340:	9301      	str	r3, [sp, #4]
 8003342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f000 fe5c 	bl	8004008 <xTaskCreate>
 8003350:	4603      	mov	r3, r0
 8003352:	2b01      	cmp	r3, #1
 8003354:	d001      	beq.n	800335a <osThreadNew+0x146>
          hTask = NULL;
 8003356:	2300      	movs	r3, #0
 8003358:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800335a:	697b      	ldr	r3, [r7, #20]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3738      	adds	r7, #56	; 0x38
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	2000002c 	.word	0x2000002c

08003368 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003370:	f3ef 8305 	mrs	r3, IPSR
 8003374:	613b      	str	r3, [r7, #16]
  return(result);
 8003376:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003378:	2b00      	cmp	r3, #0
 800337a:	d10f      	bne.n	800339c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800337c:	f3ef 8310 	mrs	r3, PRIMASK
 8003380:	60fb      	str	r3, [r7, #12]
  return(result);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d109      	bne.n	800339c <osDelay+0x34>
 8003388:	4b0d      	ldr	r3, [pc, #52]	; (80033c0 <osDelay+0x58>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2b02      	cmp	r3, #2
 800338e:	d109      	bne.n	80033a4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003390:	f3ef 8311 	mrs	r3, BASEPRI
 8003394:	60bb      	str	r3, [r7, #8]
  return(result);
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d003      	beq.n	80033a4 <osDelay+0x3c>
    stat = osErrorISR;
 800339c:	f06f 0305 	mvn.w	r3, #5
 80033a0:	617b      	str	r3, [r7, #20]
 80033a2:	e007      	b.n	80033b4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80033a4:	2300      	movs	r3, #0
 80033a6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d002      	beq.n	80033b4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 ff66 	bl	8004280 <vTaskDelay>
    }
  }

  return (stat);
 80033b4:	697b      	ldr	r3, [r7, #20]
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3718      	adds	r7, #24
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	2000002c 	.word	0x2000002c

080033c4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	4a06      	ldr	r2, [pc, #24]	; (80033ec <vApplicationGetIdleTaskMemory+0x28>)
 80033d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	4a05      	ldr	r2, [pc, #20]	; (80033f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80033da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2280      	movs	r2, #128	; 0x80
 80033e0:	601a      	str	r2, [r3, #0]
}
 80033e2:	bf00      	nop
 80033e4:	3714      	adds	r7, #20
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bc80      	pop	{r7}
 80033ea:	4770      	bx	lr
 80033ec:	20000030 	.word	0x20000030
 80033f0:	2000008c 	.word	0x2000008c

080033f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	4a07      	ldr	r2, [pc, #28]	; (8003420 <vApplicationGetTimerTaskMemory+0x2c>)
 8003404:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	4a06      	ldr	r2, [pc, #24]	; (8003424 <vApplicationGetTimerTaskMemory+0x30>)
 800340a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003412:	601a      	str	r2, [r3, #0]
}
 8003414:	bf00      	nop
 8003416:	3714      	adds	r7, #20
 8003418:	46bd      	mov	sp, r7
 800341a:	bc80      	pop	{r7}
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	2000028c 	.word	0x2000028c
 8003424:	200002e8 	.word	0x200002e8

08003428 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f103 0208 	add.w	r2, r3, #8
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f04f 32ff 	mov.w	r2, #4294967295
 8003440:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f103 0208 	add.w	r2, r3, #8
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f103 0208 	add.w	r2, r3, #8
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800345c:	bf00      	nop
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	bc80      	pop	{r7}
 8003464:	4770      	bx	lr

08003466 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003466:	b480      	push	{r7}
 8003468:	b083      	sub	sp, #12
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	bc80      	pop	{r7}
 800347c:	4770      	bx	lr

0800347e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800347e:	b480      	push	{r7}
 8003480:	b085      	sub	sp, #20
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
 8003486:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	689a      	ldr	r2, [r3, #8]
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	683a      	ldr	r2, [r7, #0]
 80034a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	1c5a      	adds	r2, r3, #1
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	601a      	str	r2, [r3, #0]
}
 80034ba:	bf00      	nop
 80034bc:	3714      	adds	r7, #20
 80034be:	46bd      	mov	sp, r7
 80034c0:	bc80      	pop	{r7}
 80034c2:	4770      	bx	lr

080034c4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034da:	d103      	bne.n	80034e4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	60fb      	str	r3, [r7, #12]
 80034e2:	e00c      	b.n	80034fe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	3308      	adds	r3, #8
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	e002      	b.n	80034f2 <vListInsert+0x2e>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	60fb      	str	r3, [r7, #12]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68ba      	ldr	r2, [r7, #8]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d2f6      	bcs.n	80034ec <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	685a      	ldr	r2, [r3, #4]
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	683a      	ldr	r2, [r7, #0]
 8003518:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	1c5a      	adds	r2, r3, #1
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	601a      	str	r2, [r3, #0]
}
 800352a:	bf00      	nop
 800352c:	3714      	adds	r7, #20
 800352e:	46bd      	mov	sp, r7
 8003530:	bc80      	pop	{r7}
 8003532:	4770      	bx	lr

08003534 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	6892      	ldr	r2, [r2, #8]
 800354a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	6852      	ldr	r2, [r2, #4]
 8003554:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	429a      	cmp	r2, r3
 800355e:	d103      	bne.n	8003568 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689a      	ldr	r2, [r3, #8]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	1e5a      	subs	r2, r3, #1
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
}
 800357c:	4618      	mov	r0, r3
 800357e:	3714      	adds	r7, #20
 8003580:	46bd      	mov	sp, r7
 8003582:	bc80      	pop	{r7}
 8003584:	4770      	bx	lr
	...

08003588 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d10a      	bne.n	80035b2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800359c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a0:	f383 8811 	msr	BASEPRI, r3
 80035a4:	f3bf 8f6f 	isb	sy
 80035a8:	f3bf 8f4f 	dsb	sy
 80035ac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80035ae:	bf00      	nop
 80035b0:	e7fe      	b.n	80035b0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80035b2:	f001 ffcb 	bl	800554c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035be:	68f9      	ldr	r1, [r7, #12]
 80035c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80035c2:	fb01 f303 	mul.w	r3, r1, r3
 80035c6:	441a      	add	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e2:	3b01      	subs	r3, #1
 80035e4:	68f9      	ldr	r1, [r7, #12]
 80035e6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80035e8:	fb01 f303 	mul.w	r3, r1, r3
 80035ec:	441a      	add	r2, r3
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	22ff      	movs	r2, #255	; 0xff
 80035f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	22ff      	movs	r2, #255	; 0xff
 80035fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d114      	bne.n	8003632 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d01a      	beq.n	8003646 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	3310      	adds	r3, #16
 8003614:	4618      	mov	r0, r3
 8003616:	f001 f8f1 	bl	80047fc <xTaskRemoveFromEventList>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d012      	beq.n	8003646 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003620:	4b0c      	ldr	r3, [pc, #48]	; (8003654 <xQueueGenericReset+0xcc>)
 8003622:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	f3bf 8f4f 	dsb	sy
 800362c:	f3bf 8f6f 	isb	sy
 8003630:	e009      	b.n	8003646 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	3310      	adds	r3, #16
 8003636:	4618      	mov	r0, r3
 8003638:	f7ff fef6 	bl	8003428 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	3324      	adds	r3, #36	; 0x24
 8003640:	4618      	mov	r0, r3
 8003642:	f7ff fef1 	bl	8003428 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003646:	f001 ffb1 	bl	80055ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800364a:	2301      	movs	r3, #1
}
 800364c:	4618      	mov	r0, r3
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	e000ed04 	.word	0xe000ed04

08003658 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003658:	b580      	push	{r7, lr}
 800365a:	b08e      	sub	sp, #56	; 0x38
 800365c:	af02      	add	r7, sp, #8
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
 8003664:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d10a      	bne.n	8003682 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800366c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003670:	f383 8811 	msr	BASEPRI, r3
 8003674:	f3bf 8f6f 	isb	sy
 8003678:	f3bf 8f4f 	dsb	sy
 800367c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800367e:	bf00      	nop
 8003680:	e7fe      	b.n	8003680 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d10a      	bne.n	800369e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800368c:	f383 8811 	msr	BASEPRI, r3
 8003690:	f3bf 8f6f 	isb	sy
 8003694:	f3bf 8f4f 	dsb	sy
 8003698:	627b      	str	r3, [r7, #36]	; 0x24
}
 800369a:	bf00      	nop
 800369c:	e7fe      	b.n	800369c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d002      	beq.n	80036aa <xQueueGenericCreateStatic+0x52>
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <xQueueGenericCreateStatic+0x56>
 80036aa:	2301      	movs	r3, #1
 80036ac:	e000      	b.n	80036b0 <xQueueGenericCreateStatic+0x58>
 80036ae:	2300      	movs	r3, #0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d10a      	bne.n	80036ca <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80036b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b8:	f383 8811 	msr	BASEPRI, r3
 80036bc:	f3bf 8f6f 	isb	sy
 80036c0:	f3bf 8f4f 	dsb	sy
 80036c4:	623b      	str	r3, [r7, #32]
}
 80036c6:	bf00      	nop
 80036c8:	e7fe      	b.n	80036c8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d102      	bne.n	80036d6 <xQueueGenericCreateStatic+0x7e>
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <xQueueGenericCreateStatic+0x82>
 80036d6:	2301      	movs	r3, #1
 80036d8:	e000      	b.n	80036dc <xQueueGenericCreateStatic+0x84>
 80036da:	2300      	movs	r3, #0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d10a      	bne.n	80036f6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80036e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e4:	f383 8811 	msr	BASEPRI, r3
 80036e8:	f3bf 8f6f 	isb	sy
 80036ec:	f3bf 8f4f 	dsb	sy
 80036f0:	61fb      	str	r3, [r7, #28]
}
 80036f2:	bf00      	nop
 80036f4:	e7fe      	b.n	80036f4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80036f6:	2350      	movs	r3, #80	; 0x50
 80036f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	2b50      	cmp	r3, #80	; 0x50
 80036fe:	d00a      	beq.n	8003716 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003704:	f383 8811 	msr	BASEPRI, r3
 8003708:	f3bf 8f6f 	isb	sy
 800370c:	f3bf 8f4f 	dsb	sy
 8003710:	61bb      	str	r3, [r7, #24]
}
 8003712:	bf00      	nop
 8003714:	e7fe      	b.n	8003714 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800371a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00d      	beq.n	800373c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003728:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800372c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	4613      	mov	r3, r2
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	68b9      	ldr	r1, [r7, #8]
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f000 f805 	bl	8003746 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800373c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800373e:	4618      	mov	r0, r3
 8003740:	3730      	adds	r7, #48	; 0x30
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b084      	sub	sp, #16
 800374a:	af00      	add	r7, sp, #0
 800374c:	60f8      	str	r0, [r7, #12]
 800374e:	60b9      	str	r1, [r7, #8]
 8003750:	607a      	str	r2, [r7, #4]
 8003752:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d103      	bne.n	8003762 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	601a      	str	r2, [r3, #0]
 8003760:	e002      	b.n	8003768 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	68ba      	ldr	r2, [r7, #8]
 8003772:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003774:	2101      	movs	r1, #1
 8003776:	69b8      	ldr	r0, [r7, #24]
 8003778:	f7ff ff06 	bl	8003588 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	78fa      	ldrb	r2, [r7, #3]
 8003780:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003784:	bf00      	nop
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b08e      	sub	sp, #56	; 0x38
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
 8003798:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800379a:	2300      	movs	r3, #0
 800379c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80037a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d10a      	bne.n	80037be <xQueueGenericSend+0x32>
	__asm volatile
 80037a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ac:	f383 8811 	msr	BASEPRI, r3
 80037b0:	f3bf 8f6f 	isb	sy
 80037b4:	f3bf 8f4f 	dsb	sy
 80037b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80037ba:	bf00      	nop
 80037bc:	e7fe      	b.n	80037bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d103      	bne.n	80037cc <xQueueGenericSend+0x40>
 80037c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d101      	bne.n	80037d0 <xQueueGenericSend+0x44>
 80037cc:	2301      	movs	r3, #1
 80037ce:	e000      	b.n	80037d2 <xQueueGenericSend+0x46>
 80037d0:	2300      	movs	r3, #0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10a      	bne.n	80037ec <xQueueGenericSend+0x60>
	__asm volatile
 80037d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037da:	f383 8811 	msr	BASEPRI, r3
 80037de:	f3bf 8f6f 	isb	sy
 80037e2:	f3bf 8f4f 	dsb	sy
 80037e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80037e8:	bf00      	nop
 80037ea:	e7fe      	b.n	80037ea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d103      	bne.n	80037fa <xQueueGenericSend+0x6e>
 80037f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d101      	bne.n	80037fe <xQueueGenericSend+0x72>
 80037fa:	2301      	movs	r3, #1
 80037fc:	e000      	b.n	8003800 <xQueueGenericSend+0x74>
 80037fe:	2300      	movs	r3, #0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d10a      	bne.n	800381a <xQueueGenericSend+0x8e>
	__asm volatile
 8003804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003808:	f383 8811 	msr	BASEPRI, r3
 800380c:	f3bf 8f6f 	isb	sy
 8003810:	f3bf 8f4f 	dsb	sy
 8003814:	623b      	str	r3, [r7, #32]
}
 8003816:	bf00      	nop
 8003818:	e7fe      	b.n	8003818 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800381a:	f001 f9b1 	bl	8004b80 <xTaskGetSchedulerState>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d102      	bne.n	800382a <xQueueGenericSend+0x9e>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <xQueueGenericSend+0xa2>
 800382a:	2301      	movs	r3, #1
 800382c:	e000      	b.n	8003830 <xQueueGenericSend+0xa4>
 800382e:	2300      	movs	r3, #0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d10a      	bne.n	800384a <xQueueGenericSend+0xbe>
	__asm volatile
 8003834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003838:	f383 8811 	msr	BASEPRI, r3
 800383c:	f3bf 8f6f 	isb	sy
 8003840:	f3bf 8f4f 	dsb	sy
 8003844:	61fb      	str	r3, [r7, #28]
}
 8003846:	bf00      	nop
 8003848:	e7fe      	b.n	8003848 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800384a:	f001 fe7f 	bl	800554c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800384e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003850:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003856:	429a      	cmp	r2, r3
 8003858:	d302      	bcc.n	8003860 <xQueueGenericSend+0xd4>
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	2b02      	cmp	r3, #2
 800385e:	d129      	bne.n	80038b4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003860:	683a      	ldr	r2, [r7, #0]
 8003862:	68b9      	ldr	r1, [r7, #8]
 8003864:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003866:	f000 fa07 	bl	8003c78 <prvCopyDataToQueue>
 800386a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800386c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800386e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003870:	2b00      	cmp	r3, #0
 8003872:	d010      	beq.n	8003896 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003876:	3324      	adds	r3, #36	; 0x24
 8003878:	4618      	mov	r0, r3
 800387a:	f000 ffbf 	bl	80047fc <xTaskRemoveFromEventList>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d013      	beq.n	80038ac <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003884:	4b3f      	ldr	r3, [pc, #252]	; (8003984 <xQueueGenericSend+0x1f8>)
 8003886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800388a:	601a      	str	r2, [r3, #0]
 800388c:	f3bf 8f4f 	dsb	sy
 8003890:	f3bf 8f6f 	isb	sy
 8003894:	e00a      	b.n	80038ac <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003898:	2b00      	cmp	r3, #0
 800389a:	d007      	beq.n	80038ac <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800389c:	4b39      	ldr	r3, [pc, #228]	; (8003984 <xQueueGenericSend+0x1f8>)
 800389e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038a2:	601a      	str	r2, [r3, #0]
 80038a4:	f3bf 8f4f 	dsb	sy
 80038a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80038ac:	f001 fe7e 	bl	80055ac <vPortExitCritical>
				return pdPASS;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e063      	b.n	800397c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d103      	bne.n	80038c2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80038ba:	f001 fe77 	bl	80055ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80038be:	2300      	movs	r3, #0
 80038c0:	e05c      	b.n	800397c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80038c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d106      	bne.n	80038d6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80038c8:	f107 0314 	add.w	r3, r7, #20
 80038cc:	4618      	mov	r0, r3
 80038ce:	f000 fff9 	bl	80048c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80038d2:	2301      	movs	r3, #1
 80038d4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80038d6:	f001 fe69 	bl	80055ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80038da:	f000 fd6b 	bl	80043b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80038de:	f001 fe35 	bl	800554c <vPortEnterCritical>
 80038e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038e8:	b25b      	sxtb	r3, r3
 80038ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ee:	d103      	bne.n	80038f8 <xQueueGenericSend+0x16c>
 80038f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038fe:	b25b      	sxtb	r3, r3
 8003900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003904:	d103      	bne.n	800390e <xQueueGenericSend+0x182>
 8003906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003908:	2200      	movs	r2, #0
 800390a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800390e:	f001 fe4d 	bl	80055ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003912:	1d3a      	adds	r2, r7, #4
 8003914:	f107 0314 	add.w	r3, r7, #20
 8003918:	4611      	mov	r1, r2
 800391a:	4618      	mov	r0, r3
 800391c:	f000 ffe8 	bl	80048f0 <xTaskCheckForTimeOut>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d124      	bne.n	8003970 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003926:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003928:	f000 fa9e 	bl	8003e68 <prvIsQueueFull>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d018      	beq.n	8003964 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003934:	3310      	adds	r3, #16
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	4611      	mov	r1, r2
 800393a:	4618      	mov	r0, r3
 800393c:	f000 ff0e 	bl	800475c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003940:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003942:	f000 fa29 	bl	8003d98 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003946:	f000 fd43 	bl	80043d0 <xTaskResumeAll>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	f47f af7c 	bne.w	800384a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003952:	4b0c      	ldr	r3, [pc, #48]	; (8003984 <xQueueGenericSend+0x1f8>)
 8003954:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003958:	601a      	str	r2, [r3, #0]
 800395a:	f3bf 8f4f 	dsb	sy
 800395e:	f3bf 8f6f 	isb	sy
 8003962:	e772      	b.n	800384a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003964:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003966:	f000 fa17 	bl	8003d98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800396a:	f000 fd31 	bl	80043d0 <xTaskResumeAll>
 800396e:	e76c      	b.n	800384a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003970:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003972:	f000 fa11 	bl	8003d98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003976:	f000 fd2b 	bl	80043d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800397a:	2300      	movs	r3, #0
		}
	}
}
 800397c:	4618      	mov	r0, r3
 800397e:	3738      	adds	r7, #56	; 0x38
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	e000ed04 	.word	0xe000ed04

08003988 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b08e      	sub	sp, #56	; 0x38
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
 8003994:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800399a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399c:	2b00      	cmp	r3, #0
 800399e:	d10a      	bne.n	80039b6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80039a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a4:	f383 8811 	msr	BASEPRI, r3
 80039a8:	f3bf 8f6f 	isb	sy
 80039ac:	f3bf 8f4f 	dsb	sy
 80039b0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80039b2:	bf00      	nop
 80039b4:	e7fe      	b.n	80039b4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d103      	bne.n	80039c4 <xQueueGenericSendFromISR+0x3c>
 80039bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d101      	bne.n	80039c8 <xQueueGenericSendFromISR+0x40>
 80039c4:	2301      	movs	r3, #1
 80039c6:	e000      	b.n	80039ca <xQueueGenericSendFromISR+0x42>
 80039c8:	2300      	movs	r3, #0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10a      	bne.n	80039e4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80039ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d2:	f383 8811 	msr	BASEPRI, r3
 80039d6:	f3bf 8f6f 	isb	sy
 80039da:	f3bf 8f4f 	dsb	sy
 80039de:	623b      	str	r3, [r7, #32]
}
 80039e0:	bf00      	nop
 80039e2:	e7fe      	b.n	80039e2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d103      	bne.n	80039f2 <xQueueGenericSendFromISR+0x6a>
 80039ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d101      	bne.n	80039f6 <xQueueGenericSendFromISR+0x6e>
 80039f2:	2301      	movs	r3, #1
 80039f4:	e000      	b.n	80039f8 <xQueueGenericSendFromISR+0x70>
 80039f6:	2300      	movs	r3, #0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10a      	bne.n	8003a12 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80039fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a00:	f383 8811 	msr	BASEPRI, r3
 8003a04:	f3bf 8f6f 	isb	sy
 8003a08:	f3bf 8f4f 	dsb	sy
 8003a0c:	61fb      	str	r3, [r7, #28]
}
 8003a0e:	bf00      	nop
 8003a10:	e7fe      	b.n	8003a10 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003a12:	f001 fe5d 	bl	80056d0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003a16:	f3ef 8211 	mrs	r2, BASEPRI
 8003a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a1e:	f383 8811 	msr	BASEPRI, r3
 8003a22:	f3bf 8f6f 	isb	sy
 8003a26:	f3bf 8f4f 	dsb	sy
 8003a2a:	61ba      	str	r2, [r7, #24]
 8003a2c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003a2e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003a30:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d302      	bcc.n	8003a44 <xQueueGenericSendFromISR+0xbc>
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d12c      	bne.n	8003a9e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	68b9      	ldr	r1, [r7, #8]
 8003a52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a54:	f000 f910 	bl	8003c78 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003a58:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a60:	d112      	bne.n	8003a88 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d016      	beq.n	8003a98 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6c:	3324      	adds	r3, #36	; 0x24
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f000 fec4 	bl	80047fc <xTaskRemoveFromEventList>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00e      	beq.n	8003a98 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00b      	beq.n	8003a98 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	601a      	str	r2, [r3, #0]
 8003a86:	e007      	b.n	8003a98 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003a88:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	b25a      	sxtb	r2, r3
 8003a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003a9c:	e001      	b.n	8003aa2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	637b      	str	r3, [r7, #52]	; 0x34
 8003aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003aac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3738      	adds	r7, #56	; 0x38
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b08c      	sub	sp, #48	; 0x30
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10a      	bne.n	8003ae8 <xQueueReceive+0x30>
	__asm volatile
 8003ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad6:	f383 8811 	msr	BASEPRI, r3
 8003ada:	f3bf 8f6f 	isb	sy
 8003ade:	f3bf 8f4f 	dsb	sy
 8003ae2:	623b      	str	r3, [r7, #32]
}
 8003ae4:	bf00      	nop
 8003ae6:	e7fe      	b.n	8003ae6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d103      	bne.n	8003af6 <xQueueReceive+0x3e>
 8003aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d101      	bne.n	8003afa <xQueueReceive+0x42>
 8003af6:	2301      	movs	r3, #1
 8003af8:	e000      	b.n	8003afc <xQueueReceive+0x44>
 8003afa:	2300      	movs	r3, #0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d10a      	bne.n	8003b16 <xQueueReceive+0x5e>
	__asm volatile
 8003b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b04:	f383 8811 	msr	BASEPRI, r3
 8003b08:	f3bf 8f6f 	isb	sy
 8003b0c:	f3bf 8f4f 	dsb	sy
 8003b10:	61fb      	str	r3, [r7, #28]
}
 8003b12:	bf00      	nop
 8003b14:	e7fe      	b.n	8003b14 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b16:	f001 f833 	bl	8004b80 <xTaskGetSchedulerState>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d102      	bne.n	8003b26 <xQueueReceive+0x6e>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <xQueueReceive+0x72>
 8003b26:	2301      	movs	r3, #1
 8003b28:	e000      	b.n	8003b2c <xQueueReceive+0x74>
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d10a      	bne.n	8003b46 <xQueueReceive+0x8e>
	__asm volatile
 8003b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b34:	f383 8811 	msr	BASEPRI, r3
 8003b38:	f3bf 8f6f 	isb	sy
 8003b3c:	f3bf 8f4f 	dsb	sy
 8003b40:	61bb      	str	r3, [r7, #24]
}
 8003b42:	bf00      	nop
 8003b44:	e7fe      	b.n	8003b44 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b46:	f001 fd01 	bl	800554c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d01f      	beq.n	8003b96 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003b56:	68b9      	ldr	r1, [r7, #8]
 8003b58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b5a:	f000 f8f7 	bl	8003d4c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b60:	1e5a      	subs	r2, r3, #1
 8003b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b64:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00f      	beq.n	8003b8e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b70:	3310      	adds	r3, #16
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 fe42 	bl	80047fc <xTaskRemoveFromEventList>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d007      	beq.n	8003b8e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003b7e:	4b3d      	ldr	r3, [pc, #244]	; (8003c74 <xQueueReceive+0x1bc>)
 8003b80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b84:	601a      	str	r2, [r3, #0]
 8003b86:	f3bf 8f4f 	dsb	sy
 8003b8a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003b8e:	f001 fd0d 	bl	80055ac <vPortExitCritical>
				return pdPASS;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e069      	b.n	8003c6a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d103      	bne.n	8003ba4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b9c:	f001 fd06 	bl	80055ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	e062      	b.n	8003c6a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d106      	bne.n	8003bb8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003baa:	f107 0310 	add.w	r3, r7, #16
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f000 fe88 	bl	80048c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003bb8:	f001 fcf8 	bl	80055ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003bbc:	f000 fbfa 	bl	80043b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003bc0:	f001 fcc4 	bl	800554c <vPortEnterCritical>
 8003bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003bca:	b25b      	sxtb	r3, r3
 8003bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd0:	d103      	bne.n	8003bda <xQueueReceive+0x122>
 8003bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003be0:	b25b      	sxtb	r3, r3
 8003be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be6:	d103      	bne.n	8003bf0 <xQueueReceive+0x138>
 8003be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bf0:	f001 fcdc 	bl	80055ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003bf4:	1d3a      	adds	r2, r7, #4
 8003bf6:	f107 0310 	add.w	r3, r7, #16
 8003bfa:	4611      	mov	r1, r2
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f000 fe77 	bl	80048f0 <xTaskCheckForTimeOut>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d123      	bne.n	8003c50 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c0a:	f000 f917 	bl	8003e3c <prvIsQueueEmpty>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d017      	beq.n	8003c44 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c16:	3324      	adds	r3, #36	; 0x24
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	4611      	mov	r1, r2
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f000 fd9d 	bl	800475c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003c22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c24:	f000 f8b8 	bl	8003d98 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003c28:	f000 fbd2 	bl	80043d0 <xTaskResumeAll>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d189      	bne.n	8003b46 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003c32:	4b10      	ldr	r3, [pc, #64]	; (8003c74 <xQueueReceive+0x1bc>)
 8003c34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c38:	601a      	str	r2, [r3, #0]
 8003c3a:	f3bf 8f4f 	dsb	sy
 8003c3e:	f3bf 8f6f 	isb	sy
 8003c42:	e780      	b.n	8003b46 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003c44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c46:	f000 f8a7 	bl	8003d98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c4a:	f000 fbc1 	bl	80043d0 <xTaskResumeAll>
 8003c4e:	e77a      	b.n	8003b46 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003c50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c52:	f000 f8a1 	bl	8003d98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c56:	f000 fbbb 	bl	80043d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c5c:	f000 f8ee 	bl	8003e3c <prvIsQueueEmpty>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f43f af6f 	beq.w	8003b46 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003c68:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3730      	adds	r7, #48	; 0x30
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	e000ed04 	.word	0xe000ed04

08003c78 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003c84:	2300      	movs	r3, #0
 8003c86:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10d      	bne.n	8003cb2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d14d      	bne.n	8003d3a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 ff8a 	bl	8004bbc <xTaskPriorityDisinherit>
 8003ca8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	605a      	str	r2, [r3, #4]
 8003cb0:	e043      	b.n	8003d3a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d119      	bne.n	8003cec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6898      	ldr	r0, [r3, #8]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	68b9      	ldr	r1, [r7, #8]
 8003cc4:	f001 ff3e 	bl	8005b44 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	689a      	ldr	r2, [r3, #8]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd0:	441a      	add	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	689a      	ldr	r2, [r3, #8]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d32b      	bcc.n	8003d3a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	609a      	str	r2, [r3, #8]
 8003cea:	e026      	b.n	8003d3a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	68d8      	ldr	r0, [r3, #12]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	68b9      	ldr	r1, [r7, #8]
 8003cf8:	f001 ff24 	bl	8005b44 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	68da      	ldr	r2, [r3, #12]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d04:	425b      	negs	r3, r3
 8003d06:	441a      	add	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	68da      	ldr	r2, [r3, #12]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d207      	bcs.n	8003d28 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	685a      	ldr	r2, [r3, #4]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d20:	425b      	negs	r3, r3
 8003d22:	441a      	add	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d105      	bne.n	8003d3a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d002      	beq.n	8003d3a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	3b01      	subs	r3, #1
 8003d38:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1c5a      	adds	r2, r3, #1
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003d42:	697b      	ldr	r3, [r7, #20]
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3718      	adds	r7, #24
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d018      	beq.n	8003d90 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68da      	ldr	r2, [r3, #12]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d66:	441a      	add	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68da      	ldr	r2, [r3, #12]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d303      	bcc.n	8003d80 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	68d9      	ldr	r1, [r3, #12]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d88:	461a      	mov	r2, r3
 8003d8a:	6838      	ldr	r0, [r7, #0]
 8003d8c:	f001 feda 	bl	8005b44 <memcpy>
	}
}
 8003d90:	bf00      	nop
 8003d92:	3708      	adds	r7, #8
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003da0:	f001 fbd4 	bl	800554c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003daa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003dac:	e011      	b.n	8003dd2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d012      	beq.n	8003ddc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	3324      	adds	r3, #36	; 0x24
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f000 fd1e 	bl	80047fc <xTaskRemoveFromEventList>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003dc6:	f000 fdf5 	bl	80049b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003dca:	7bfb      	ldrb	r3, [r7, #15]
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	dce9      	bgt.n	8003dae <prvUnlockQueue+0x16>
 8003dda:	e000      	b.n	8003dde <prvUnlockQueue+0x46>
					break;
 8003ddc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	22ff      	movs	r2, #255	; 0xff
 8003de2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003de6:	f001 fbe1 	bl	80055ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003dea:	f001 fbaf 	bl	800554c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003df4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003df6:	e011      	b.n	8003e1c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d012      	beq.n	8003e26 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	3310      	adds	r3, #16
 8003e04:	4618      	mov	r0, r3
 8003e06:	f000 fcf9 	bl	80047fc <xTaskRemoveFromEventList>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d001      	beq.n	8003e14 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003e10:	f000 fdd0 	bl	80049b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003e14:	7bbb      	ldrb	r3, [r7, #14]
 8003e16:	3b01      	subs	r3, #1
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	dce9      	bgt.n	8003df8 <prvUnlockQueue+0x60>
 8003e24:	e000      	b.n	8003e28 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003e26:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	22ff      	movs	r2, #255	; 0xff
 8003e2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003e30:	f001 fbbc 	bl	80055ac <vPortExitCritical>
}
 8003e34:	bf00      	nop
 8003e36:	3710      	adds	r7, #16
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003e44:	f001 fb82 	bl	800554c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d102      	bne.n	8003e56 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003e50:	2301      	movs	r3, #1
 8003e52:	60fb      	str	r3, [r7, #12]
 8003e54:	e001      	b.n	8003e5a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003e56:	2300      	movs	r3, #0
 8003e58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003e5a:	f001 fba7 	bl	80055ac <vPortExitCritical>

	return xReturn;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3710      	adds	r7, #16
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003e70:	f001 fb6c 	bl	800554c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d102      	bne.n	8003e86 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003e80:	2301      	movs	r3, #1
 8003e82:	60fb      	str	r3, [r7, #12]
 8003e84:	e001      	b.n	8003e8a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003e86:	2300      	movs	r3, #0
 8003e88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003e8a:	f001 fb8f 	bl	80055ac <vPortExitCritical>

	return xReturn;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3710      	adds	r7, #16
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	60fb      	str	r3, [r7, #12]
 8003ea6:	e014      	b.n	8003ed2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003ea8:	4a0e      	ldr	r2, [pc, #56]	; (8003ee4 <vQueueAddToRegistry+0x4c>)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d10b      	bne.n	8003ecc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003eb4:	490b      	ldr	r1, [pc, #44]	; (8003ee4 <vQueueAddToRegistry+0x4c>)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	683a      	ldr	r2, [r7, #0]
 8003eba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003ebe:	4a09      	ldr	r2, [pc, #36]	; (8003ee4 <vQueueAddToRegistry+0x4c>)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	00db      	lsls	r3, r3, #3
 8003ec4:	4413      	add	r3, r2
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003eca:	e006      	b.n	8003eda <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	3301      	adds	r3, #1
 8003ed0:	60fb      	str	r3, [r7, #12]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2b07      	cmp	r3, #7
 8003ed6:	d9e7      	bls.n	8003ea8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003ed8:	bf00      	nop
 8003eda:	bf00      	nop
 8003edc:	3714      	adds	r7, #20
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bc80      	pop	{r7}
 8003ee2:	4770      	bx	lr
 8003ee4:	20001a64 	.word	0x20001a64

08003ee8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b086      	sub	sp, #24
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003ef8:	f001 fb28 	bl	800554c <vPortEnterCritical>
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f02:	b25b      	sxtb	r3, r3
 8003f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f08:	d103      	bne.n	8003f12 <vQueueWaitForMessageRestricted+0x2a>
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f18:	b25b      	sxtb	r3, r3
 8003f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f1e:	d103      	bne.n	8003f28 <vQueueWaitForMessageRestricted+0x40>
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f28:	f001 fb40 	bl	80055ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d106      	bne.n	8003f42 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	3324      	adds	r3, #36	; 0x24
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	68b9      	ldr	r1, [r7, #8]
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f000 fc31 	bl	80047a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003f42:	6978      	ldr	r0, [r7, #20]
 8003f44:	f7ff ff28 	bl	8003d98 <prvUnlockQueue>
	}
 8003f48:	bf00      	nop
 8003f4a:	3718      	adds	r7, #24
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b08e      	sub	sp, #56	; 0x38
 8003f54:	af04      	add	r7, sp, #16
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
 8003f5c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d10a      	bne.n	8003f7a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f68:	f383 8811 	msr	BASEPRI, r3
 8003f6c:	f3bf 8f6f 	isb	sy
 8003f70:	f3bf 8f4f 	dsb	sy
 8003f74:	623b      	str	r3, [r7, #32]
}
 8003f76:	bf00      	nop
 8003f78:	e7fe      	b.n	8003f78 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d10a      	bne.n	8003f96 <xTaskCreateStatic+0x46>
	__asm volatile
 8003f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f84:	f383 8811 	msr	BASEPRI, r3
 8003f88:	f3bf 8f6f 	isb	sy
 8003f8c:	f3bf 8f4f 	dsb	sy
 8003f90:	61fb      	str	r3, [r7, #28]
}
 8003f92:	bf00      	nop
 8003f94:	e7fe      	b.n	8003f94 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003f96:	235c      	movs	r3, #92	; 0x5c
 8003f98:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	2b5c      	cmp	r3, #92	; 0x5c
 8003f9e:	d00a      	beq.n	8003fb6 <xTaskCreateStatic+0x66>
	__asm volatile
 8003fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa4:	f383 8811 	msr	BASEPRI, r3
 8003fa8:	f3bf 8f6f 	isb	sy
 8003fac:	f3bf 8f4f 	dsb	sy
 8003fb0:	61bb      	str	r3, [r7, #24]
}
 8003fb2:	bf00      	nop
 8003fb4:	e7fe      	b.n	8003fb4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d01e      	beq.n	8003ffa <xTaskCreateStatic+0xaa>
 8003fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d01b      	beq.n	8003ffa <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fca:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fce:	2202      	movs	r2, #2
 8003fd0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	9303      	str	r3, [sp, #12]
 8003fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fda:	9302      	str	r3, [sp, #8]
 8003fdc:	f107 0314 	add.w	r3, r7, #20
 8003fe0:	9301      	str	r3, [sp, #4]
 8003fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe4:	9300      	str	r3, [sp, #0]
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	68b9      	ldr	r1, [r7, #8]
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f000 f850 	bl	8004092 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ff2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ff4:	f000 f8d4 	bl	80041a0 <prvAddNewTaskToReadyList>
 8003ff8:	e001      	b.n	8003ffe <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003ffe:	697b      	ldr	r3, [r7, #20]
	}
 8004000:	4618      	mov	r0, r3
 8004002:	3728      	adds	r7, #40	; 0x28
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004008:	b580      	push	{r7, lr}
 800400a:	b08c      	sub	sp, #48	; 0x30
 800400c:	af04      	add	r7, sp, #16
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	603b      	str	r3, [r7, #0]
 8004014:	4613      	mov	r3, r2
 8004016:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004018:	88fb      	ldrh	r3, [r7, #6]
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	4618      	mov	r0, r3
 800401e:	f001 fb95 	bl	800574c <pvPortMalloc>
 8004022:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00e      	beq.n	8004048 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800402a:	205c      	movs	r0, #92	; 0x5c
 800402c:	f001 fb8e 	bl	800574c <pvPortMalloc>
 8004030:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d003      	beq.n	8004040 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	631a      	str	r2, [r3, #48]	; 0x30
 800403e:	e005      	b.n	800404c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004040:	6978      	ldr	r0, [r7, #20]
 8004042:	f001 fc47 	bl	80058d4 <vPortFree>
 8004046:	e001      	b.n	800404c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004048:	2300      	movs	r3, #0
 800404a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d017      	beq.n	8004082 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800405a:	88fa      	ldrh	r2, [r7, #6]
 800405c:	2300      	movs	r3, #0
 800405e:	9303      	str	r3, [sp, #12]
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	9302      	str	r3, [sp, #8]
 8004064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004066:	9301      	str	r3, [sp, #4]
 8004068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800406a:	9300      	str	r3, [sp, #0]
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	68b9      	ldr	r1, [r7, #8]
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f000 f80e 	bl	8004092 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004076:	69f8      	ldr	r0, [r7, #28]
 8004078:	f000 f892 	bl	80041a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800407c:	2301      	movs	r3, #1
 800407e:	61bb      	str	r3, [r7, #24]
 8004080:	e002      	b.n	8004088 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004082:	f04f 33ff 	mov.w	r3, #4294967295
 8004086:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004088:	69bb      	ldr	r3, [r7, #24]
	}
 800408a:	4618      	mov	r0, r3
 800408c:	3720      	adds	r7, #32
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004092:	b580      	push	{r7, lr}
 8004094:	b088      	sub	sp, #32
 8004096:	af00      	add	r7, sp, #0
 8004098:	60f8      	str	r0, [r7, #12]
 800409a:	60b9      	str	r1, [r7, #8]
 800409c:	607a      	str	r2, [r7, #4]
 800409e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80040a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	461a      	mov	r2, r3
 80040aa:	21a5      	movs	r1, #165	; 0xa5
 80040ac:	f001 fd58 	bl	8005b60 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80040b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80040ba:	3b01      	subs	r3, #1
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	4413      	add	r3, r2
 80040c0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	f023 0307 	bic.w	r3, r3, #7
 80040c8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	f003 0307 	and.w	r3, r3, #7
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00a      	beq.n	80040ea <prvInitialiseNewTask+0x58>
	__asm volatile
 80040d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d8:	f383 8811 	msr	BASEPRI, r3
 80040dc:	f3bf 8f6f 	isb	sy
 80040e0:	f3bf 8f4f 	dsb	sy
 80040e4:	617b      	str	r3, [r7, #20]
}
 80040e6:	bf00      	nop
 80040e8:	e7fe      	b.n	80040e8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80040ea:	2300      	movs	r3, #0
 80040ec:	61fb      	str	r3, [r7, #28]
 80040ee:	e012      	b.n	8004116 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80040f0:	68ba      	ldr	r2, [r7, #8]
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	4413      	add	r3, r2
 80040f6:	7819      	ldrb	r1, [r3, #0]
 80040f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	4413      	add	r3, r2
 80040fe:	3334      	adds	r3, #52	; 0x34
 8004100:	460a      	mov	r2, r1
 8004102:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004104:	68ba      	ldr	r2, [r7, #8]
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	4413      	add	r3, r2
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d006      	beq.n	800411e <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	3301      	adds	r3, #1
 8004114:	61fb      	str	r3, [r7, #28]
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	2b0f      	cmp	r3, #15
 800411a:	d9e9      	bls.n	80040f0 <prvInitialiseNewTask+0x5e>
 800411c:	e000      	b.n	8004120 <prvInitialiseNewTask+0x8e>
		{
			break;
 800411e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004122:	2200      	movs	r2, #0
 8004124:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412a:	2b37      	cmp	r3, #55	; 0x37
 800412c:	d901      	bls.n	8004132 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800412e:	2337      	movs	r3, #55	; 0x37
 8004130:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004134:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004136:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800413c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800413e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004140:	2200      	movs	r2, #0
 8004142:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004146:	3304      	adds	r3, #4
 8004148:	4618      	mov	r0, r3
 800414a:	f7ff f98c 	bl	8003466 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800414e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004150:	3318      	adds	r3, #24
 8004152:	4618      	mov	r0, r3
 8004154:	f7ff f987 	bl	8003466 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800415a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800415c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800415e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004160:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004166:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800416c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800416e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004170:	2200      	movs	r2, #0
 8004172:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004176:	2200      	movs	r2, #0
 8004178:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800417c:	683a      	ldr	r2, [r7, #0]
 800417e:	68f9      	ldr	r1, [r7, #12]
 8004180:	69b8      	ldr	r0, [r7, #24]
 8004182:	f001 f8ef 	bl	8005364 <pxPortInitialiseStack>
 8004186:	4602      	mov	r2, r0
 8004188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800418c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800418e:	2b00      	cmp	r3, #0
 8004190:	d002      	beq.n	8004198 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004194:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004196:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004198:	bf00      	nop
 800419a:	3720      	adds	r7, #32
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80041a8:	f001 f9d0 	bl	800554c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80041ac:	4b2d      	ldr	r3, [pc, #180]	; (8004264 <prvAddNewTaskToReadyList+0xc4>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	3301      	adds	r3, #1
 80041b2:	4a2c      	ldr	r2, [pc, #176]	; (8004264 <prvAddNewTaskToReadyList+0xc4>)
 80041b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80041b6:	4b2c      	ldr	r3, [pc, #176]	; (8004268 <prvAddNewTaskToReadyList+0xc8>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d109      	bne.n	80041d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80041be:	4a2a      	ldr	r2, [pc, #168]	; (8004268 <prvAddNewTaskToReadyList+0xc8>)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80041c4:	4b27      	ldr	r3, [pc, #156]	; (8004264 <prvAddNewTaskToReadyList+0xc4>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d110      	bne.n	80041ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80041cc:	f000 fc16 	bl	80049fc <prvInitialiseTaskLists>
 80041d0:	e00d      	b.n	80041ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80041d2:	4b26      	ldr	r3, [pc, #152]	; (800426c <prvAddNewTaskToReadyList+0xcc>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d109      	bne.n	80041ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80041da:	4b23      	ldr	r3, [pc, #140]	; (8004268 <prvAddNewTaskToReadyList+0xc8>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d802      	bhi.n	80041ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80041e8:	4a1f      	ldr	r2, [pc, #124]	; (8004268 <prvAddNewTaskToReadyList+0xc8>)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80041ee:	4b20      	ldr	r3, [pc, #128]	; (8004270 <prvAddNewTaskToReadyList+0xd0>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	3301      	adds	r3, #1
 80041f4:	4a1e      	ldr	r2, [pc, #120]	; (8004270 <prvAddNewTaskToReadyList+0xd0>)
 80041f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80041f8:	4b1d      	ldr	r3, [pc, #116]	; (8004270 <prvAddNewTaskToReadyList+0xd0>)
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004204:	4b1b      	ldr	r3, [pc, #108]	; (8004274 <prvAddNewTaskToReadyList+0xd4>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	429a      	cmp	r2, r3
 800420a:	d903      	bls.n	8004214 <prvAddNewTaskToReadyList+0x74>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004210:	4a18      	ldr	r2, [pc, #96]	; (8004274 <prvAddNewTaskToReadyList+0xd4>)
 8004212:	6013      	str	r3, [r2, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004218:	4613      	mov	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	4413      	add	r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	4a15      	ldr	r2, [pc, #84]	; (8004278 <prvAddNewTaskToReadyList+0xd8>)
 8004222:	441a      	add	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	3304      	adds	r3, #4
 8004228:	4619      	mov	r1, r3
 800422a:	4610      	mov	r0, r2
 800422c:	f7ff f927 	bl	800347e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004230:	f001 f9bc 	bl	80055ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004234:	4b0d      	ldr	r3, [pc, #52]	; (800426c <prvAddNewTaskToReadyList+0xcc>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00e      	beq.n	800425a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800423c:	4b0a      	ldr	r3, [pc, #40]	; (8004268 <prvAddNewTaskToReadyList+0xc8>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004246:	429a      	cmp	r2, r3
 8004248:	d207      	bcs.n	800425a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800424a:	4b0c      	ldr	r3, [pc, #48]	; (800427c <prvAddNewTaskToReadyList+0xdc>)
 800424c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004250:	601a      	str	r2, [r3, #0]
 8004252:	f3bf 8f4f 	dsb	sy
 8004256:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800425a:	bf00      	nop
 800425c:	3708      	adds	r7, #8
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	20000bbc 	.word	0x20000bbc
 8004268:	200006e8 	.word	0x200006e8
 800426c:	20000bc8 	.word	0x20000bc8
 8004270:	20000bd8 	.word	0x20000bd8
 8004274:	20000bc4 	.word	0x20000bc4
 8004278:	200006ec 	.word	0x200006ec
 800427c:	e000ed04 	.word	0xe000ed04

08004280 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004288:	2300      	movs	r3, #0
 800428a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d017      	beq.n	80042c2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004292:	4b13      	ldr	r3, [pc, #76]	; (80042e0 <vTaskDelay+0x60>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00a      	beq.n	80042b0 <vTaskDelay+0x30>
	__asm volatile
 800429a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800429e:	f383 8811 	msr	BASEPRI, r3
 80042a2:	f3bf 8f6f 	isb	sy
 80042a6:	f3bf 8f4f 	dsb	sy
 80042aa:	60bb      	str	r3, [r7, #8]
}
 80042ac:	bf00      	nop
 80042ae:	e7fe      	b.n	80042ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80042b0:	f000 f880 	bl	80043b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80042b4:	2100      	movs	r1, #0
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 fcee 	bl	8004c98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80042bc:	f000 f888 	bl	80043d0 <xTaskResumeAll>
 80042c0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d107      	bne.n	80042d8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80042c8:	4b06      	ldr	r3, [pc, #24]	; (80042e4 <vTaskDelay+0x64>)
 80042ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042ce:	601a      	str	r2, [r3, #0]
 80042d0:	f3bf 8f4f 	dsb	sy
 80042d4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80042d8:	bf00      	nop
 80042da:	3710      	adds	r7, #16
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	20000be4 	.word	0x20000be4
 80042e4:	e000ed04 	.word	0xe000ed04

080042e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b08a      	sub	sp, #40	; 0x28
 80042ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80042ee:	2300      	movs	r3, #0
 80042f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80042f2:	2300      	movs	r3, #0
 80042f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80042f6:	463a      	mov	r2, r7
 80042f8:	1d39      	adds	r1, r7, #4
 80042fa:	f107 0308 	add.w	r3, r7, #8
 80042fe:	4618      	mov	r0, r3
 8004300:	f7ff f860 	bl	80033c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004304:	6839      	ldr	r1, [r7, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	68ba      	ldr	r2, [r7, #8]
 800430a:	9202      	str	r2, [sp, #8]
 800430c:	9301      	str	r3, [sp, #4]
 800430e:	2300      	movs	r3, #0
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	2300      	movs	r3, #0
 8004314:	460a      	mov	r2, r1
 8004316:	4921      	ldr	r1, [pc, #132]	; (800439c <vTaskStartScheduler+0xb4>)
 8004318:	4821      	ldr	r0, [pc, #132]	; (80043a0 <vTaskStartScheduler+0xb8>)
 800431a:	f7ff fe19 	bl	8003f50 <xTaskCreateStatic>
 800431e:	4603      	mov	r3, r0
 8004320:	4a20      	ldr	r2, [pc, #128]	; (80043a4 <vTaskStartScheduler+0xbc>)
 8004322:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004324:	4b1f      	ldr	r3, [pc, #124]	; (80043a4 <vTaskStartScheduler+0xbc>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d002      	beq.n	8004332 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800432c:	2301      	movs	r3, #1
 800432e:	617b      	str	r3, [r7, #20]
 8004330:	e001      	b.n	8004336 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004332:	2300      	movs	r3, #0
 8004334:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d102      	bne.n	8004342 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800433c:	f000 fd00 	bl	8004d40 <xTimerCreateTimerTask>
 8004340:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d116      	bne.n	8004376 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800434c:	f383 8811 	msr	BASEPRI, r3
 8004350:	f3bf 8f6f 	isb	sy
 8004354:	f3bf 8f4f 	dsb	sy
 8004358:	613b      	str	r3, [r7, #16]
}
 800435a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800435c:	4b12      	ldr	r3, [pc, #72]	; (80043a8 <vTaskStartScheduler+0xc0>)
 800435e:	f04f 32ff 	mov.w	r2, #4294967295
 8004362:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004364:	4b11      	ldr	r3, [pc, #68]	; (80043ac <vTaskStartScheduler+0xc4>)
 8004366:	2201      	movs	r2, #1
 8004368:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800436a:	4b11      	ldr	r3, [pc, #68]	; (80043b0 <vTaskStartScheduler+0xc8>)
 800436c:	2200      	movs	r2, #0
 800436e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004370:	f001 f87a 	bl	8005468 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004374:	e00e      	b.n	8004394 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800437c:	d10a      	bne.n	8004394 <vTaskStartScheduler+0xac>
	__asm volatile
 800437e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004382:	f383 8811 	msr	BASEPRI, r3
 8004386:	f3bf 8f6f 	isb	sy
 800438a:	f3bf 8f4f 	dsb	sy
 800438e:	60fb      	str	r3, [r7, #12]
}
 8004390:	bf00      	nop
 8004392:	e7fe      	b.n	8004392 <vTaskStartScheduler+0xaa>
}
 8004394:	bf00      	nop
 8004396:	3718      	adds	r7, #24
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	08005bc8 	.word	0x08005bc8
 80043a0:	080049cd 	.word	0x080049cd
 80043a4:	20000be0 	.word	0x20000be0
 80043a8:	20000bdc 	.word	0x20000bdc
 80043ac:	20000bc8 	.word	0x20000bc8
 80043b0:	20000bc0 	.word	0x20000bc0

080043b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80043b4:	b480      	push	{r7}
 80043b6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80043b8:	4b04      	ldr	r3, [pc, #16]	; (80043cc <vTaskSuspendAll+0x18>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	3301      	adds	r3, #1
 80043be:	4a03      	ldr	r2, [pc, #12]	; (80043cc <vTaskSuspendAll+0x18>)
 80043c0:	6013      	str	r3, [r2, #0]
}
 80043c2:	bf00      	nop
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bc80      	pop	{r7}
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	20000be4 	.word	0x20000be4

080043d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80043d6:	2300      	movs	r3, #0
 80043d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80043da:	2300      	movs	r3, #0
 80043dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80043de:	4b42      	ldr	r3, [pc, #264]	; (80044e8 <xTaskResumeAll+0x118>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10a      	bne.n	80043fc <xTaskResumeAll+0x2c>
	__asm volatile
 80043e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ea:	f383 8811 	msr	BASEPRI, r3
 80043ee:	f3bf 8f6f 	isb	sy
 80043f2:	f3bf 8f4f 	dsb	sy
 80043f6:	603b      	str	r3, [r7, #0]
}
 80043f8:	bf00      	nop
 80043fa:	e7fe      	b.n	80043fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80043fc:	f001 f8a6 	bl	800554c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004400:	4b39      	ldr	r3, [pc, #228]	; (80044e8 <xTaskResumeAll+0x118>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	3b01      	subs	r3, #1
 8004406:	4a38      	ldr	r2, [pc, #224]	; (80044e8 <xTaskResumeAll+0x118>)
 8004408:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800440a:	4b37      	ldr	r3, [pc, #220]	; (80044e8 <xTaskResumeAll+0x118>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d162      	bne.n	80044d8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004412:	4b36      	ldr	r3, [pc, #216]	; (80044ec <xTaskResumeAll+0x11c>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d05e      	beq.n	80044d8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800441a:	e02f      	b.n	800447c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800441c:	4b34      	ldr	r3, [pc, #208]	; (80044f0 <xTaskResumeAll+0x120>)
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	3318      	adds	r3, #24
 8004428:	4618      	mov	r0, r3
 800442a:	f7ff f883 	bl	8003534 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	3304      	adds	r3, #4
 8004432:	4618      	mov	r0, r3
 8004434:	f7ff f87e 	bl	8003534 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800443c:	4b2d      	ldr	r3, [pc, #180]	; (80044f4 <xTaskResumeAll+0x124>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	429a      	cmp	r2, r3
 8004442:	d903      	bls.n	800444c <xTaskResumeAll+0x7c>
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004448:	4a2a      	ldr	r2, [pc, #168]	; (80044f4 <xTaskResumeAll+0x124>)
 800444a:	6013      	str	r3, [r2, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004450:	4613      	mov	r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	4413      	add	r3, r2
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	4a27      	ldr	r2, [pc, #156]	; (80044f8 <xTaskResumeAll+0x128>)
 800445a:	441a      	add	r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	3304      	adds	r3, #4
 8004460:	4619      	mov	r1, r3
 8004462:	4610      	mov	r0, r2
 8004464:	f7ff f80b 	bl	800347e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800446c:	4b23      	ldr	r3, [pc, #140]	; (80044fc <xTaskResumeAll+0x12c>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004472:	429a      	cmp	r2, r3
 8004474:	d302      	bcc.n	800447c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004476:	4b22      	ldr	r3, [pc, #136]	; (8004500 <xTaskResumeAll+0x130>)
 8004478:	2201      	movs	r2, #1
 800447a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800447c:	4b1c      	ldr	r3, [pc, #112]	; (80044f0 <xTaskResumeAll+0x120>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1cb      	bne.n	800441c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d001      	beq.n	800448e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800448a:	f000 fb55 	bl	8004b38 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800448e:	4b1d      	ldr	r3, [pc, #116]	; (8004504 <xTaskResumeAll+0x134>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d010      	beq.n	80044bc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800449a:	f000 f845 	bl	8004528 <xTaskIncrementTick>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d002      	beq.n	80044aa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80044a4:	4b16      	ldr	r3, [pc, #88]	; (8004500 <xTaskResumeAll+0x130>)
 80044a6:	2201      	movs	r2, #1
 80044a8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	3b01      	subs	r3, #1
 80044ae:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1f1      	bne.n	800449a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80044b6:	4b13      	ldr	r3, [pc, #76]	; (8004504 <xTaskResumeAll+0x134>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80044bc:	4b10      	ldr	r3, [pc, #64]	; (8004500 <xTaskResumeAll+0x130>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d009      	beq.n	80044d8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80044c4:	2301      	movs	r3, #1
 80044c6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80044c8:	4b0f      	ldr	r3, [pc, #60]	; (8004508 <xTaskResumeAll+0x138>)
 80044ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044ce:	601a      	str	r2, [r3, #0]
 80044d0:	f3bf 8f4f 	dsb	sy
 80044d4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80044d8:	f001 f868 	bl	80055ac <vPortExitCritical>

	return xAlreadyYielded;
 80044dc:	68bb      	ldr	r3, [r7, #8]
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	20000be4 	.word	0x20000be4
 80044ec:	20000bbc 	.word	0x20000bbc
 80044f0:	20000b7c 	.word	0x20000b7c
 80044f4:	20000bc4 	.word	0x20000bc4
 80044f8:	200006ec 	.word	0x200006ec
 80044fc:	200006e8 	.word	0x200006e8
 8004500:	20000bd0 	.word	0x20000bd0
 8004504:	20000bcc 	.word	0x20000bcc
 8004508:	e000ed04 	.word	0xe000ed04

0800450c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004512:	4b04      	ldr	r3, [pc, #16]	; (8004524 <xTaskGetTickCount+0x18>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004518:	687b      	ldr	r3, [r7, #4]
}
 800451a:	4618      	mov	r0, r3
 800451c:	370c      	adds	r7, #12
 800451e:	46bd      	mov	sp, r7
 8004520:	bc80      	pop	{r7}
 8004522:	4770      	bx	lr
 8004524:	20000bc0 	.word	0x20000bc0

08004528 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b086      	sub	sp, #24
 800452c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800452e:	2300      	movs	r3, #0
 8004530:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004532:	4b51      	ldr	r3, [pc, #324]	; (8004678 <xTaskIncrementTick+0x150>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	f040 808e 	bne.w	8004658 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800453c:	4b4f      	ldr	r3, [pc, #316]	; (800467c <xTaskIncrementTick+0x154>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	3301      	adds	r3, #1
 8004542:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004544:	4a4d      	ldr	r2, [pc, #308]	; (800467c <xTaskIncrementTick+0x154>)
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d120      	bne.n	8004592 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004550:	4b4b      	ldr	r3, [pc, #300]	; (8004680 <xTaskIncrementTick+0x158>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00a      	beq.n	8004570 <xTaskIncrementTick+0x48>
	__asm volatile
 800455a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800455e:	f383 8811 	msr	BASEPRI, r3
 8004562:	f3bf 8f6f 	isb	sy
 8004566:	f3bf 8f4f 	dsb	sy
 800456a:	603b      	str	r3, [r7, #0]
}
 800456c:	bf00      	nop
 800456e:	e7fe      	b.n	800456e <xTaskIncrementTick+0x46>
 8004570:	4b43      	ldr	r3, [pc, #268]	; (8004680 <xTaskIncrementTick+0x158>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	60fb      	str	r3, [r7, #12]
 8004576:	4b43      	ldr	r3, [pc, #268]	; (8004684 <xTaskIncrementTick+0x15c>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a41      	ldr	r2, [pc, #260]	; (8004680 <xTaskIncrementTick+0x158>)
 800457c:	6013      	str	r3, [r2, #0]
 800457e:	4a41      	ldr	r2, [pc, #260]	; (8004684 <xTaskIncrementTick+0x15c>)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6013      	str	r3, [r2, #0]
 8004584:	4b40      	ldr	r3, [pc, #256]	; (8004688 <xTaskIncrementTick+0x160>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	3301      	adds	r3, #1
 800458a:	4a3f      	ldr	r2, [pc, #252]	; (8004688 <xTaskIncrementTick+0x160>)
 800458c:	6013      	str	r3, [r2, #0]
 800458e:	f000 fad3 	bl	8004b38 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004592:	4b3e      	ldr	r3, [pc, #248]	; (800468c <xTaskIncrementTick+0x164>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	429a      	cmp	r2, r3
 800459a:	d34e      	bcc.n	800463a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800459c:	4b38      	ldr	r3, [pc, #224]	; (8004680 <xTaskIncrementTick+0x158>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d101      	bne.n	80045aa <xTaskIncrementTick+0x82>
 80045a6:	2301      	movs	r3, #1
 80045a8:	e000      	b.n	80045ac <xTaskIncrementTick+0x84>
 80045aa:	2300      	movs	r3, #0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d004      	beq.n	80045ba <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045b0:	4b36      	ldr	r3, [pc, #216]	; (800468c <xTaskIncrementTick+0x164>)
 80045b2:	f04f 32ff 	mov.w	r2, #4294967295
 80045b6:	601a      	str	r2, [r3, #0]
					break;
 80045b8:	e03f      	b.n	800463a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80045ba:	4b31      	ldr	r3, [pc, #196]	; (8004680 <xTaskIncrementTick+0x158>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d203      	bcs.n	80045da <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80045d2:	4a2e      	ldr	r2, [pc, #184]	; (800468c <xTaskIncrementTick+0x164>)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6013      	str	r3, [r2, #0]
						break;
 80045d8:	e02f      	b.n	800463a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	3304      	adds	r3, #4
 80045de:	4618      	mov	r0, r3
 80045e0:	f7fe ffa8 	bl	8003534 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d004      	beq.n	80045f6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	3318      	adds	r3, #24
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7fe ff9f 	bl	8003534 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045fa:	4b25      	ldr	r3, [pc, #148]	; (8004690 <xTaskIncrementTick+0x168>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d903      	bls.n	800460a <xTaskIncrementTick+0xe2>
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004606:	4a22      	ldr	r2, [pc, #136]	; (8004690 <xTaskIncrementTick+0x168>)
 8004608:	6013      	str	r3, [r2, #0]
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800460e:	4613      	mov	r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	4413      	add	r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4a1f      	ldr	r2, [pc, #124]	; (8004694 <xTaskIncrementTick+0x16c>)
 8004618:	441a      	add	r2, r3
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	3304      	adds	r3, #4
 800461e:	4619      	mov	r1, r3
 8004620:	4610      	mov	r0, r2
 8004622:	f7fe ff2c 	bl	800347e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800462a:	4b1b      	ldr	r3, [pc, #108]	; (8004698 <xTaskIncrementTick+0x170>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004630:	429a      	cmp	r2, r3
 8004632:	d3b3      	bcc.n	800459c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004634:	2301      	movs	r3, #1
 8004636:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004638:	e7b0      	b.n	800459c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800463a:	4b17      	ldr	r3, [pc, #92]	; (8004698 <xTaskIncrementTick+0x170>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004640:	4914      	ldr	r1, [pc, #80]	; (8004694 <xTaskIncrementTick+0x16c>)
 8004642:	4613      	mov	r3, r2
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	4413      	add	r3, r2
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	440b      	add	r3, r1
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d907      	bls.n	8004662 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004652:	2301      	movs	r3, #1
 8004654:	617b      	str	r3, [r7, #20]
 8004656:	e004      	b.n	8004662 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004658:	4b10      	ldr	r3, [pc, #64]	; (800469c <xTaskIncrementTick+0x174>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	3301      	adds	r3, #1
 800465e:	4a0f      	ldr	r2, [pc, #60]	; (800469c <xTaskIncrementTick+0x174>)
 8004660:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004662:	4b0f      	ldr	r3, [pc, #60]	; (80046a0 <xTaskIncrementTick+0x178>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800466a:	2301      	movs	r3, #1
 800466c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800466e:	697b      	ldr	r3, [r7, #20]
}
 8004670:	4618      	mov	r0, r3
 8004672:	3718      	adds	r7, #24
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	20000be4 	.word	0x20000be4
 800467c:	20000bc0 	.word	0x20000bc0
 8004680:	20000b74 	.word	0x20000b74
 8004684:	20000b78 	.word	0x20000b78
 8004688:	20000bd4 	.word	0x20000bd4
 800468c:	20000bdc 	.word	0x20000bdc
 8004690:	20000bc4 	.word	0x20000bc4
 8004694:	200006ec 	.word	0x200006ec
 8004698:	200006e8 	.word	0x200006e8
 800469c:	20000bcc 	.word	0x20000bcc
 80046a0:	20000bd0 	.word	0x20000bd0

080046a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80046aa:	4b27      	ldr	r3, [pc, #156]	; (8004748 <vTaskSwitchContext+0xa4>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d003      	beq.n	80046ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80046b2:	4b26      	ldr	r3, [pc, #152]	; (800474c <vTaskSwitchContext+0xa8>)
 80046b4:	2201      	movs	r2, #1
 80046b6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80046b8:	e041      	b.n	800473e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80046ba:	4b24      	ldr	r3, [pc, #144]	; (800474c <vTaskSwitchContext+0xa8>)
 80046bc:	2200      	movs	r2, #0
 80046be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80046c0:	4b23      	ldr	r3, [pc, #140]	; (8004750 <vTaskSwitchContext+0xac>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	60fb      	str	r3, [r7, #12]
 80046c6:	e010      	b.n	80046ea <vTaskSwitchContext+0x46>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d10a      	bne.n	80046e4 <vTaskSwitchContext+0x40>
	__asm volatile
 80046ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d2:	f383 8811 	msr	BASEPRI, r3
 80046d6:	f3bf 8f6f 	isb	sy
 80046da:	f3bf 8f4f 	dsb	sy
 80046de:	607b      	str	r3, [r7, #4]
}
 80046e0:	bf00      	nop
 80046e2:	e7fe      	b.n	80046e2 <vTaskSwitchContext+0x3e>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	3b01      	subs	r3, #1
 80046e8:	60fb      	str	r3, [r7, #12]
 80046ea:	491a      	ldr	r1, [pc, #104]	; (8004754 <vTaskSwitchContext+0xb0>)
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	4613      	mov	r3, r2
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	4413      	add	r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	440b      	add	r3, r1
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d0e4      	beq.n	80046c8 <vTaskSwitchContext+0x24>
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	4613      	mov	r3, r2
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	4413      	add	r3, r2
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	4a12      	ldr	r2, [pc, #72]	; (8004754 <vTaskSwitchContext+0xb0>)
 800470a:	4413      	add	r3, r2
 800470c:	60bb      	str	r3, [r7, #8]
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	685a      	ldr	r2, [r3, #4]
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	605a      	str	r2, [r3, #4]
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	685a      	ldr	r2, [r3, #4]
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	3308      	adds	r3, #8
 8004720:	429a      	cmp	r2, r3
 8004722:	d104      	bne.n	800472e <vTaskSwitchContext+0x8a>
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	685a      	ldr	r2, [r3, #4]
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	605a      	str	r2, [r3, #4]
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	4a08      	ldr	r2, [pc, #32]	; (8004758 <vTaskSwitchContext+0xb4>)
 8004736:	6013      	str	r3, [r2, #0]
 8004738:	4a05      	ldr	r2, [pc, #20]	; (8004750 <vTaskSwitchContext+0xac>)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6013      	str	r3, [r2, #0]
}
 800473e:	bf00      	nop
 8004740:	3714      	adds	r7, #20
 8004742:	46bd      	mov	sp, r7
 8004744:	bc80      	pop	{r7}
 8004746:	4770      	bx	lr
 8004748:	20000be4 	.word	0x20000be4
 800474c:	20000bd0 	.word	0x20000bd0
 8004750:	20000bc4 	.word	0x20000bc4
 8004754:	200006ec 	.word	0x200006ec
 8004758:	200006e8 	.word	0x200006e8

0800475c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d10a      	bne.n	8004782 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800476c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004770:	f383 8811 	msr	BASEPRI, r3
 8004774:	f3bf 8f6f 	isb	sy
 8004778:	f3bf 8f4f 	dsb	sy
 800477c:	60fb      	str	r3, [r7, #12]
}
 800477e:	bf00      	nop
 8004780:	e7fe      	b.n	8004780 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004782:	4b07      	ldr	r3, [pc, #28]	; (80047a0 <vTaskPlaceOnEventList+0x44>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	3318      	adds	r3, #24
 8004788:	4619      	mov	r1, r3
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7fe fe9a 	bl	80034c4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004790:	2101      	movs	r1, #1
 8004792:	6838      	ldr	r0, [r7, #0]
 8004794:	f000 fa80 	bl	8004c98 <prvAddCurrentTaskToDelayedList>
}
 8004798:	bf00      	nop
 800479a:	3710      	adds	r7, #16
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	200006e8 	.word	0x200006e8

080047a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b086      	sub	sp, #24
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10a      	bne.n	80047cc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80047b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ba:	f383 8811 	msr	BASEPRI, r3
 80047be:	f3bf 8f6f 	isb	sy
 80047c2:	f3bf 8f4f 	dsb	sy
 80047c6:	617b      	str	r3, [r7, #20]
}
 80047c8:	bf00      	nop
 80047ca:	e7fe      	b.n	80047ca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80047cc:	4b0a      	ldr	r3, [pc, #40]	; (80047f8 <vTaskPlaceOnEventListRestricted+0x54>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	3318      	adds	r3, #24
 80047d2:	4619      	mov	r1, r3
 80047d4:	68f8      	ldr	r0, [r7, #12]
 80047d6:	f7fe fe52 	bl	800347e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d002      	beq.n	80047e6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80047e0:	f04f 33ff 	mov.w	r3, #4294967295
 80047e4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80047e6:	6879      	ldr	r1, [r7, #4]
 80047e8:	68b8      	ldr	r0, [r7, #8]
 80047ea:	f000 fa55 	bl	8004c98 <prvAddCurrentTaskToDelayedList>
	}
 80047ee:	bf00      	nop
 80047f0:	3718      	adds	r7, #24
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	200006e8 	.word	0x200006e8

080047fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b086      	sub	sp, #24
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d10a      	bne.n	8004828 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004816:	f383 8811 	msr	BASEPRI, r3
 800481a:	f3bf 8f6f 	isb	sy
 800481e:	f3bf 8f4f 	dsb	sy
 8004822:	60fb      	str	r3, [r7, #12]
}
 8004824:	bf00      	nop
 8004826:	e7fe      	b.n	8004826 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	3318      	adds	r3, #24
 800482c:	4618      	mov	r0, r3
 800482e:	f7fe fe81 	bl	8003534 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004832:	4b1e      	ldr	r3, [pc, #120]	; (80048ac <xTaskRemoveFromEventList+0xb0>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d11d      	bne.n	8004876 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	3304      	adds	r3, #4
 800483e:	4618      	mov	r0, r3
 8004840:	f7fe fe78 	bl	8003534 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004848:	4b19      	ldr	r3, [pc, #100]	; (80048b0 <xTaskRemoveFromEventList+0xb4>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	429a      	cmp	r2, r3
 800484e:	d903      	bls.n	8004858 <xTaskRemoveFromEventList+0x5c>
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004854:	4a16      	ldr	r2, [pc, #88]	; (80048b0 <xTaskRemoveFromEventList+0xb4>)
 8004856:	6013      	str	r3, [r2, #0]
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800485c:	4613      	mov	r3, r2
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	4413      	add	r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	4a13      	ldr	r2, [pc, #76]	; (80048b4 <xTaskRemoveFromEventList+0xb8>)
 8004866:	441a      	add	r2, r3
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	3304      	adds	r3, #4
 800486c:	4619      	mov	r1, r3
 800486e:	4610      	mov	r0, r2
 8004870:	f7fe fe05 	bl	800347e <vListInsertEnd>
 8004874:	e005      	b.n	8004882 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	3318      	adds	r3, #24
 800487a:	4619      	mov	r1, r3
 800487c:	480e      	ldr	r0, [pc, #56]	; (80048b8 <xTaskRemoveFromEventList+0xbc>)
 800487e:	f7fe fdfe 	bl	800347e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004886:	4b0d      	ldr	r3, [pc, #52]	; (80048bc <xTaskRemoveFromEventList+0xc0>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488c:	429a      	cmp	r2, r3
 800488e:	d905      	bls.n	800489c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004890:	2301      	movs	r3, #1
 8004892:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004894:	4b0a      	ldr	r3, [pc, #40]	; (80048c0 <xTaskRemoveFromEventList+0xc4>)
 8004896:	2201      	movs	r2, #1
 8004898:	601a      	str	r2, [r3, #0]
 800489a:	e001      	b.n	80048a0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800489c:	2300      	movs	r3, #0
 800489e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80048a0:	697b      	ldr	r3, [r7, #20]
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3718      	adds	r7, #24
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	20000be4 	.word	0x20000be4
 80048b0:	20000bc4 	.word	0x20000bc4
 80048b4:	200006ec 	.word	0x200006ec
 80048b8:	20000b7c 	.word	0x20000b7c
 80048bc:	200006e8 	.word	0x200006e8
 80048c0:	20000bd0 	.word	0x20000bd0

080048c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80048cc:	4b06      	ldr	r3, [pc, #24]	; (80048e8 <vTaskInternalSetTimeOutState+0x24>)
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80048d4:	4b05      	ldr	r3, [pc, #20]	; (80048ec <vTaskInternalSetTimeOutState+0x28>)
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	605a      	str	r2, [r3, #4]
}
 80048dc:	bf00      	nop
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bc80      	pop	{r7}
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	20000bd4 	.word	0x20000bd4
 80048ec:	20000bc0 	.word	0x20000bc0

080048f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b088      	sub	sp, #32
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d10a      	bne.n	8004916 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004904:	f383 8811 	msr	BASEPRI, r3
 8004908:	f3bf 8f6f 	isb	sy
 800490c:	f3bf 8f4f 	dsb	sy
 8004910:	613b      	str	r3, [r7, #16]
}
 8004912:	bf00      	nop
 8004914:	e7fe      	b.n	8004914 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d10a      	bne.n	8004932 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800491c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004920:	f383 8811 	msr	BASEPRI, r3
 8004924:	f3bf 8f6f 	isb	sy
 8004928:	f3bf 8f4f 	dsb	sy
 800492c:	60fb      	str	r3, [r7, #12]
}
 800492e:	bf00      	nop
 8004930:	e7fe      	b.n	8004930 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004932:	f000 fe0b 	bl	800554c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004936:	4b1d      	ldr	r3, [pc, #116]	; (80049ac <xTaskCheckForTimeOut+0xbc>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	69ba      	ldr	r2, [r7, #24]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800494e:	d102      	bne.n	8004956 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004950:	2300      	movs	r3, #0
 8004952:	61fb      	str	r3, [r7, #28]
 8004954:	e023      	b.n	800499e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	4b15      	ldr	r3, [pc, #84]	; (80049b0 <xTaskCheckForTimeOut+0xc0>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	429a      	cmp	r2, r3
 8004960:	d007      	beq.n	8004972 <xTaskCheckForTimeOut+0x82>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	69ba      	ldr	r2, [r7, #24]
 8004968:	429a      	cmp	r2, r3
 800496a:	d302      	bcc.n	8004972 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800496c:	2301      	movs	r3, #1
 800496e:	61fb      	str	r3, [r7, #28]
 8004970:	e015      	b.n	800499e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	697a      	ldr	r2, [r7, #20]
 8004978:	429a      	cmp	r2, r3
 800497a:	d20b      	bcs.n	8004994 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	1ad2      	subs	r2, r2, r3
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f7ff ff9b 	bl	80048c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800498e:	2300      	movs	r3, #0
 8004990:	61fb      	str	r3, [r7, #28]
 8004992:	e004      	b.n	800499e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	2200      	movs	r2, #0
 8004998:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800499a:	2301      	movs	r3, #1
 800499c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800499e:	f000 fe05 	bl	80055ac <vPortExitCritical>

	return xReturn;
 80049a2:	69fb      	ldr	r3, [r7, #28]
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3720      	adds	r7, #32
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	20000bc0 	.word	0x20000bc0
 80049b0:	20000bd4 	.word	0x20000bd4

080049b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80049b4:	b480      	push	{r7}
 80049b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80049b8:	4b03      	ldr	r3, [pc, #12]	; (80049c8 <vTaskMissedYield+0x14>)
 80049ba:	2201      	movs	r2, #1
 80049bc:	601a      	str	r2, [r3, #0]
}
 80049be:	bf00      	nop
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bc80      	pop	{r7}
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	20000bd0 	.word	0x20000bd0

080049cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80049d4:	f000 f852 	bl	8004a7c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80049d8:	4b06      	ldr	r3, [pc, #24]	; (80049f4 <prvIdleTask+0x28>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d9f9      	bls.n	80049d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80049e0:	4b05      	ldr	r3, [pc, #20]	; (80049f8 <prvIdleTask+0x2c>)
 80049e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049e6:	601a      	str	r2, [r3, #0]
 80049e8:	f3bf 8f4f 	dsb	sy
 80049ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80049f0:	e7f0      	b.n	80049d4 <prvIdleTask+0x8>
 80049f2:	bf00      	nop
 80049f4:	200006ec 	.word	0x200006ec
 80049f8:	e000ed04 	.word	0xe000ed04

080049fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a02:	2300      	movs	r3, #0
 8004a04:	607b      	str	r3, [r7, #4]
 8004a06:	e00c      	b.n	8004a22 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	4413      	add	r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	4a12      	ldr	r2, [pc, #72]	; (8004a5c <prvInitialiseTaskLists+0x60>)
 8004a14:	4413      	add	r3, r2
 8004a16:	4618      	mov	r0, r3
 8004a18:	f7fe fd06 	bl	8003428 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	3301      	adds	r3, #1
 8004a20:	607b      	str	r3, [r7, #4]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2b37      	cmp	r3, #55	; 0x37
 8004a26:	d9ef      	bls.n	8004a08 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004a28:	480d      	ldr	r0, [pc, #52]	; (8004a60 <prvInitialiseTaskLists+0x64>)
 8004a2a:	f7fe fcfd 	bl	8003428 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004a2e:	480d      	ldr	r0, [pc, #52]	; (8004a64 <prvInitialiseTaskLists+0x68>)
 8004a30:	f7fe fcfa 	bl	8003428 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004a34:	480c      	ldr	r0, [pc, #48]	; (8004a68 <prvInitialiseTaskLists+0x6c>)
 8004a36:	f7fe fcf7 	bl	8003428 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004a3a:	480c      	ldr	r0, [pc, #48]	; (8004a6c <prvInitialiseTaskLists+0x70>)
 8004a3c:	f7fe fcf4 	bl	8003428 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004a40:	480b      	ldr	r0, [pc, #44]	; (8004a70 <prvInitialiseTaskLists+0x74>)
 8004a42:	f7fe fcf1 	bl	8003428 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004a46:	4b0b      	ldr	r3, [pc, #44]	; (8004a74 <prvInitialiseTaskLists+0x78>)
 8004a48:	4a05      	ldr	r2, [pc, #20]	; (8004a60 <prvInitialiseTaskLists+0x64>)
 8004a4a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004a4c:	4b0a      	ldr	r3, [pc, #40]	; (8004a78 <prvInitialiseTaskLists+0x7c>)
 8004a4e:	4a05      	ldr	r2, [pc, #20]	; (8004a64 <prvInitialiseTaskLists+0x68>)
 8004a50:	601a      	str	r2, [r3, #0]
}
 8004a52:	bf00      	nop
 8004a54:	3708      	adds	r7, #8
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	200006ec 	.word	0x200006ec
 8004a60:	20000b4c 	.word	0x20000b4c
 8004a64:	20000b60 	.word	0x20000b60
 8004a68:	20000b7c 	.word	0x20000b7c
 8004a6c:	20000b90 	.word	0x20000b90
 8004a70:	20000ba8 	.word	0x20000ba8
 8004a74:	20000b74 	.word	0x20000b74
 8004a78:	20000b78 	.word	0x20000b78

08004a7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a82:	e019      	b.n	8004ab8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004a84:	f000 fd62 	bl	800554c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004a88:	4b10      	ldr	r3, [pc, #64]	; (8004acc <prvCheckTasksWaitingTermination+0x50>)
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	3304      	adds	r3, #4
 8004a94:	4618      	mov	r0, r3
 8004a96:	f7fe fd4d 	bl	8003534 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004a9a:	4b0d      	ldr	r3, [pc, #52]	; (8004ad0 <prvCheckTasksWaitingTermination+0x54>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	4a0b      	ldr	r2, [pc, #44]	; (8004ad0 <prvCheckTasksWaitingTermination+0x54>)
 8004aa2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004aa4:	4b0b      	ldr	r3, [pc, #44]	; (8004ad4 <prvCheckTasksWaitingTermination+0x58>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	4a0a      	ldr	r2, [pc, #40]	; (8004ad4 <prvCheckTasksWaitingTermination+0x58>)
 8004aac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004aae:	f000 fd7d 	bl	80055ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 f810 	bl	8004ad8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ab8:	4b06      	ldr	r3, [pc, #24]	; (8004ad4 <prvCheckTasksWaitingTermination+0x58>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1e1      	bne.n	8004a84 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004ac0:	bf00      	nop
 8004ac2:	bf00      	nop
 8004ac4:	3708      	adds	r7, #8
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	20000b90 	.word	0x20000b90
 8004ad0:	20000bbc 	.word	0x20000bbc
 8004ad4:	20000ba4 	.word	0x20000ba4

08004ad8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d108      	bne.n	8004afc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 fef0 	bl	80058d4 <vPortFree>
				vPortFree( pxTCB );
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 feed 	bl	80058d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004afa:	e018      	b.n	8004b2e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d103      	bne.n	8004b0e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 fee4 	bl	80058d4 <vPortFree>
	}
 8004b0c:	e00f      	b.n	8004b2e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d00a      	beq.n	8004b2e <prvDeleteTCB+0x56>
	__asm volatile
 8004b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1c:	f383 8811 	msr	BASEPRI, r3
 8004b20:	f3bf 8f6f 	isb	sy
 8004b24:	f3bf 8f4f 	dsb	sy
 8004b28:	60fb      	str	r3, [r7, #12]
}
 8004b2a:	bf00      	nop
 8004b2c:	e7fe      	b.n	8004b2c <prvDeleteTCB+0x54>
	}
 8004b2e:	bf00      	nop
 8004b30:	3710      	adds	r7, #16
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
	...

08004b38 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b3e:	4b0e      	ldr	r3, [pc, #56]	; (8004b78 <prvResetNextTaskUnblockTime+0x40>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d101      	bne.n	8004b4c <prvResetNextTaskUnblockTime+0x14>
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e000      	b.n	8004b4e <prvResetNextTaskUnblockTime+0x16>
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d004      	beq.n	8004b5c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004b52:	4b0a      	ldr	r3, [pc, #40]	; (8004b7c <prvResetNextTaskUnblockTime+0x44>)
 8004b54:	f04f 32ff 	mov.w	r2, #4294967295
 8004b58:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004b5a:	e008      	b.n	8004b6e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004b5c:	4b06      	ldr	r3, [pc, #24]	; (8004b78 <prvResetNextTaskUnblockTime+0x40>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	4a04      	ldr	r2, [pc, #16]	; (8004b7c <prvResetNextTaskUnblockTime+0x44>)
 8004b6c:	6013      	str	r3, [r2, #0]
}
 8004b6e:	bf00      	nop
 8004b70:	370c      	adds	r7, #12
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bc80      	pop	{r7}
 8004b76:	4770      	bx	lr
 8004b78:	20000b74 	.word	0x20000b74
 8004b7c:	20000bdc 	.word	0x20000bdc

08004b80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004b86:	4b0b      	ldr	r3, [pc, #44]	; (8004bb4 <xTaskGetSchedulerState+0x34>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d102      	bne.n	8004b94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	607b      	str	r3, [r7, #4]
 8004b92:	e008      	b.n	8004ba6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b94:	4b08      	ldr	r3, [pc, #32]	; (8004bb8 <xTaskGetSchedulerState+0x38>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d102      	bne.n	8004ba2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	607b      	str	r3, [r7, #4]
 8004ba0:	e001      	b.n	8004ba6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004ba6:	687b      	ldr	r3, [r7, #4]
	}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bc80      	pop	{r7}
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	20000bc8 	.word	0x20000bc8
 8004bb8:	20000be4 	.word	0x20000be4

08004bbc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b086      	sub	sp, #24
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d056      	beq.n	8004c80 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004bd2:	4b2e      	ldr	r3, [pc, #184]	; (8004c8c <xTaskPriorityDisinherit+0xd0>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	693a      	ldr	r2, [r7, #16]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d00a      	beq.n	8004bf2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be0:	f383 8811 	msr	BASEPRI, r3
 8004be4:	f3bf 8f6f 	isb	sy
 8004be8:	f3bf 8f4f 	dsb	sy
 8004bec:	60fb      	str	r3, [r7, #12]
}
 8004bee:	bf00      	nop
 8004bf0:	e7fe      	b.n	8004bf0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d10a      	bne.n	8004c10 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfe:	f383 8811 	msr	BASEPRI, r3
 8004c02:	f3bf 8f6f 	isb	sy
 8004c06:	f3bf 8f4f 	dsb	sy
 8004c0a:	60bb      	str	r3, [r7, #8]
}
 8004c0c:	bf00      	nop
 8004c0e:	e7fe      	b.n	8004c0e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c14:	1e5a      	subs	r2, r3, #1
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d02c      	beq.n	8004c80 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d128      	bne.n	8004c80 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	3304      	adds	r3, #4
 8004c32:	4618      	mov	r0, r3
 8004c34:	f7fe fc7e 	bl	8003534 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c44:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c50:	4b0f      	ldr	r3, [pc, #60]	; (8004c90 <xTaskPriorityDisinherit+0xd4>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d903      	bls.n	8004c60 <xTaskPriorityDisinherit+0xa4>
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5c:	4a0c      	ldr	r2, [pc, #48]	; (8004c90 <xTaskPriorityDisinherit+0xd4>)
 8004c5e:	6013      	str	r3, [r2, #0]
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c64:	4613      	mov	r3, r2
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	4413      	add	r3, r2
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	4a09      	ldr	r2, [pc, #36]	; (8004c94 <xTaskPriorityDisinherit+0xd8>)
 8004c6e:	441a      	add	r2, r3
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	3304      	adds	r3, #4
 8004c74:	4619      	mov	r1, r3
 8004c76:	4610      	mov	r0, r2
 8004c78:	f7fe fc01 	bl	800347e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004c80:	697b      	ldr	r3, [r7, #20]
	}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3718      	adds	r7, #24
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	200006e8 	.word	0x200006e8
 8004c90:	20000bc4 	.word	0x20000bc4
 8004c94:	200006ec 	.word	0x200006ec

08004c98 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004ca2:	4b21      	ldr	r3, [pc, #132]	; (8004d28 <prvAddCurrentTaskToDelayedList+0x90>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ca8:	4b20      	ldr	r3, [pc, #128]	; (8004d2c <prvAddCurrentTaskToDelayedList+0x94>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	3304      	adds	r3, #4
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7fe fc40 	bl	8003534 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cba:	d10a      	bne.n	8004cd2 <prvAddCurrentTaskToDelayedList+0x3a>
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d007      	beq.n	8004cd2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cc2:	4b1a      	ldr	r3, [pc, #104]	; (8004d2c <prvAddCurrentTaskToDelayedList+0x94>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	3304      	adds	r3, #4
 8004cc8:	4619      	mov	r1, r3
 8004cca:	4819      	ldr	r0, [pc, #100]	; (8004d30 <prvAddCurrentTaskToDelayedList+0x98>)
 8004ccc:	f7fe fbd7 	bl	800347e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004cd0:	e026      	b.n	8004d20 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4413      	add	r3, r2
 8004cd8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004cda:	4b14      	ldr	r3, [pc, #80]	; (8004d2c <prvAddCurrentTaskToDelayedList+0x94>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68ba      	ldr	r2, [r7, #8]
 8004ce0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004ce2:	68ba      	ldr	r2, [r7, #8]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d209      	bcs.n	8004cfe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cea:	4b12      	ldr	r3, [pc, #72]	; (8004d34 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	4b0f      	ldr	r3, [pc, #60]	; (8004d2c <prvAddCurrentTaskToDelayedList+0x94>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	3304      	adds	r3, #4
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	4610      	mov	r0, r2
 8004cf8:	f7fe fbe4 	bl	80034c4 <vListInsert>
}
 8004cfc:	e010      	b.n	8004d20 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cfe:	4b0e      	ldr	r3, [pc, #56]	; (8004d38 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	4b0a      	ldr	r3, [pc, #40]	; (8004d2c <prvAddCurrentTaskToDelayedList+0x94>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	3304      	adds	r3, #4
 8004d08:	4619      	mov	r1, r3
 8004d0a:	4610      	mov	r0, r2
 8004d0c:	f7fe fbda 	bl	80034c4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004d10:	4b0a      	ldr	r3, [pc, #40]	; (8004d3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68ba      	ldr	r2, [r7, #8]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d202      	bcs.n	8004d20 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004d1a:	4a08      	ldr	r2, [pc, #32]	; (8004d3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	6013      	str	r3, [r2, #0]
}
 8004d20:	bf00      	nop
 8004d22:	3710      	adds	r7, #16
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	20000bc0 	.word	0x20000bc0
 8004d2c:	200006e8 	.word	0x200006e8
 8004d30:	20000ba8 	.word	0x20000ba8
 8004d34:	20000b78 	.word	0x20000b78
 8004d38:	20000b74 	.word	0x20000b74
 8004d3c:	20000bdc 	.word	0x20000bdc

08004d40 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b08a      	sub	sp, #40	; 0x28
 8004d44:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004d46:	2300      	movs	r3, #0
 8004d48:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004d4a:	f000 facb 	bl	80052e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004d4e:	4b1c      	ldr	r3, [pc, #112]	; (8004dc0 <xTimerCreateTimerTask+0x80>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d021      	beq.n	8004d9a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004d56:	2300      	movs	r3, #0
 8004d58:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004d5e:	1d3a      	adds	r2, r7, #4
 8004d60:	f107 0108 	add.w	r1, r7, #8
 8004d64:	f107 030c 	add.w	r3, r7, #12
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f7fe fb43 	bl	80033f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004d6e:	6879      	ldr	r1, [r7, #4]
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	9202      	str	r2, [sp, #8]
 8004d76:	9301      	str	r3, [sp, #4]
 8004d78:	2302      	movs	r3, #2
 8004d7a:	9300      	str	r3, [sp, #0]
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	460a      	mov	r2, r1
 8004d80:	4910      	ldr	r1, [pc, #64]	; (8004dc4 <xTimerCreateTimerTask+0x84>)
 8004d82:	4811      	ldr	r0, [pc, #68]	; (8004dc8 <xTimerCreateTimerTask+0x88>)
 8004d84:	f7ff f8e4 	bl	8003f50 <xTaskCreateStatic>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	4a10      	ldr	r2, [pc, #64]	; (8004dcc <xTimerCreateTimerTask+0x8c>)
 8004d8c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004d8e:	4b0f      	ldr	r3, [pc, #60]	; (8004dcc <xTimerCreateTimerTask+0x8c>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d001      	beq.n	8004d9a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004d96:	2301      	movs	r3, #1
 8004d98:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d10a      	bne.n	8004db6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da4:	f383 8811 	msr	BASEPRI, r3
 8004da8:	f3bf 8f6f 	isb	sy
 8004dac:	f3bf 8f4f 	dsb	sy
 8004db0:	613b      	str	r3, [r7, #16]
}
 8004db2:	bf00      	nop
 8004db4:	e7fe      	b.n	8004db4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004db6:	697b      	ldr	r3, [r7, #20]
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3718      	adds	r7, #24
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	20000c18 	.word	0x20000c18
 8004dc4:	08005bd0 	.word	0x08005bd0
 8004dc8:	08004eed 	.word	0x08004eed
 8004dcc:	20000c1c 	.word	0x20000c1c

08004dd0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b08a      	sub	sp, #40	; 0x28
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	607a      	str	r2, [r7, #4]
 8004ddc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004dde:	2300      	movs	r3, #0
 8004de0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d10a      	bne.n	8004dfe <xTimerGenericCommand+0x2e>
	__asm volatile
 8004de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dec:	f383 8811 	msr	BASEPRI, r3
 8004df0:	f3bf 8f6f 	isb	sy
 8004df4:	f3bf 8f4f 	dsb	sy
 8004df8:	623b      	str	r3, [r7, #32]
}
 8004dfa:	bf00      	nop
 8004dfc:	e7fe      	b.n	8004dfc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004dfe:	4b1a      	ldr	r3, [pc, #104]	; (8004e68 <xTimerGenericCommand+0x98>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d02a      	beq.n	8004e5c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	2b05      	cmp	r3, #5
 8004e16:	dc18      	bgt.n	8004e4a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004e18:	f7ff feb2 	bl	8004b80 <xTaskGetSchedulerState>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d109      	bne.n	8004e36 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004e22:	4b11      	ldr	r3, [pc, #68]	; (8004e68 <xTimerGenericCommand+0x98>)
 8004e24:	6818      	ldr	r0, [r3, #0]
 8004e26:	f107 0110 	add.w	r1, r7, #16
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e2e:	f7fe fcad 	bl	800378c <xQueueGenericSend>
 8004e32:	6278      	str	r0, [r7, #36]	; 0x24
 8004e34:	e012      	b.n	8004e5c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004e36:	4b0c      	ldr	r3, [pc, #48]	; (8004e68 <xTimerGenericCommand+0x98>)
 8004e38:	6818      	ldr	r0, [r3, #0]
 8004e3a:	f107 0110 	add.w	r1, r7, #16
 8004e3e:	2300      	movs	r3, #0
 8004e40:	2200      	movs	r2, #0
 8004e42:	f7fe fca3 	bl	800378c <xQueueGenericSend>
 8004e46:	6278      	str	r0, [r7, #36]	; 0x24
 8004e48:	e008      	b.n	8004e5c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004e4a:	4b07      	ldr	r3, [pc, #28]	; (8004e68 <xTimerGenericCommand+0x98>)
 8004e4c:	6818      	ldr	r0, [r3, #0]
 8004e4e:	f107 0110 	add.w	r1, r7, #16
 8004e52:	2300      	movs	r3, #0
 8004e54:	683a      	ldr	r2, [r7, #0]
 8004e56:	f7fe fd97 	bl	8003988 <xQueueGenericSendFromISR>
 8004e5a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3728      	adds	r7, #40	; 0x28
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	20000c18 	.word	0x20000c18

08004e6c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b088      	sub	sp, #32
 8004e70:	af02      	add	r7, sp, #8
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e76:	4b1c      	ldr	r3, [pc, #112]	; (8004ee8 <prvProcessExpiredTimer+0x7c>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	3304      	adds	r3, #4
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7fe fb55 	bl	8003534 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	69db      	ldr	r3, [r3, #28]
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d122      	bne.n	8004ed8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	699a      	ldr	r2, [r3, #24]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	18d1      	adds	r1, r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	683a      	ldr	r2, [r7, #0]
 8004e9e:	6978      	ldr	r0, [r7, #20]
 8004ea0:	f000 f8c8 	bl	8005034 <prvInsertTimerInActiveList>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d016      	beq.n	8004ed8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004eaa:	2300      	movs	r3, #0
 8004eac:	9300      	str	r3, [sp, #0]
 8004eae:	2300      	movs	r3, #0
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	2100      	movs	r1, #0
 8004eb4:	6978      	ldr	r0, [r7, #20]
 8004eb6:	f7ff ff8b 	bl	8004dd0 <xTimerGenericCommand>
 8004eba:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d10a      	bne.n	8004ed8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8004ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec6:	f383 8811 	msr	BASEPRI, r3
 8004eca:	f3bf 8f6f 	isb	sy
 8004ece:	f3bf 8f4f 	dsb	sy
 8004ed2:	60fb      	str	r3, [r7, #12]
}
 8004ed4:	bf00      	nop
 8004ed6:	e7fe      	b.n	8004ed6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004edc:	6978      	ldr	r0, [r7, #20]
 8004ede:	4798      	blx	r3
}
 8004ee0:	bf00      	nop
 8004ee2:	3718      	adds	r7, #24
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	20000c10 	.word	0x20000c10

08004eec <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004ef4:	f107 0308 	add.w	r3, r7, #8
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f000 f857 	bl	8004fac <prvGetNextExpireTime>
 8004efe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	4619      	mov	r1, r3
 8004f04:	68f8      	ldr	r0, [r7, #12]
 8004f06:	f000 f803 	bl	8004f10 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004f0a:	f000 f8d5 	bl	80050b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004f0e:	e7f1      	b.n	8004ef4 <prvTimerTask+0x8>

08004f10 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004f1a:	f7ff fa4b 	bl	80043b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f1e:	f107 0308 	add.w	r3, r7, #8
 8004f22:	4618      	mov	r0, r3
 8004f24:	f000 f866 	bl	8004ff4 <prvSampleTimeNow>
 8004f28:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d130      	bne.n	8004f92 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d10a      	bne.n	8004f4c <prvProcessTimerOrBlockTask+0x3c>
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d806      	bhi.n	8004f4c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004f3e:	f7ff fa47 	bl	80043d0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004f42:	68f9      	ldr	r1, [r7, #12]
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f7ff ff91 	bl	8004e6c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004f4a:	e024      	b.n	8004f96 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d008      	beq.n	8004f64 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004f52:	4b13      	ldr	r3, [pc, #76]	; (8004fa0 <prvProcessTimerOrBlockTask+0x90>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	bf0c      	ite	eq
 8004f5c:	2301      	moveq	r3, #1
 8004f5e:	2300      	movne	r3, #0
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004f64:	4b0f      	ldr	r3, [pc, #60]	; (8004fa4 <prvProcessTimerOrBlockTask+0x94>)
 8004f66:	6818      	ldr	r0, [r3, #0]
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	683a      	ldr	r2, [r7, #0]
 8004f70:	4619      	mov	r1, r3
 8004f72:	f7fe ffb9 	bl	8003ee8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004f76:	f7ff fa2b 	bl	80043d0 <xTaskResumeAll>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d10a      	bne.n	8004f96 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004f80:	4b09      	ldr	r3, [pc, #36]	; (8004fa8 <prvProcessTimerOrBlockTask+0x98>)
 8004f82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f86:	601a      	str	r2, [r3, #0]
 8004f88:	f3bf 8f4f 	dsb	sy
 8004f8c:	f3bf 8f6f 	isb	sy
}
 8004f90:	e001      	b.n	8004f96 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004f92:	f7ff fa1d 	bl	80043d0 <xTaskResumeAll>
}
 8004f96:	bf00      	nop
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	20000c14 	.word	0x20000c14
 8004fa4:	20000c18 	.word	0x20000c18
 8004fa8:	e000ed04 	.word	0xe000ed04

08004fac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004fac:	b480      	push	{r7}
 8004fae:	b085      	sub	sp, #20
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004fb4:	4b0e      	ldr	r3, [pc, #56]	; (8004ff0 <prvGetNextExpireTime+0x44>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	bf0c      	ite	eq
 8004fbe:	2301      	moveq	r3, #1
 8004fc0:	2300      	movne	r3, #0
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d105      	bne.n	8004fde <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004fd2:	4b07      	ldr	r3, [pc, #28]	; (8004ff0 <prvGetNextExpireTime+0x44>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	60fb      	str	r3, [r7, #12]
 8004fdc:	e001      	b.n	8004fe2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3714      	adds	r7, #20
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bc80      	pop	{r7}
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	20000c10 	.word	0x20000c10

08004ff4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004ffc:	f7ff fa86 	bl	800450c <xTaskGetTickCount>
 8005000:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005002:	4b0b      	ldr	r3, [pc, #44]	; (8005030 <prvSampleTimeNow+0x3c>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	429a      	cmp	r2, r3
 800500a:	d205      	bcs.n	8005018 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800500c:	f000 f908 	bl	8005220 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	601a      	str	r2, [r3, #0]
 8005016:	e002      	b.n	800501e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800501e:	4a04      	ldr	r2, [pc, #16]	; (8005030 <prvSampleTimeNow+0x3c>)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005024:	68fb      	ldr	r3, [r7, #12]
}
 8005026:	4618      	mov	r0, r3
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	20000c20 	.word	0x20000c20

08005034 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b086      	sub	sp, #24
 8005038:	af00      	add	r7, sp, #0
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	607a      	str	r2, [r7, #4]
 8005040:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005042:	2300      	movs	r3, #0
 8005044:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	68ba      	ldr	r2, [r7, #8]
 800504a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005052:	68ba      	ldr	r2, [r7, #8]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	429a      	cmp	r2, r3
 8005058:	d812      	bhi.n	8005080 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	1ad2      	subs	r2, r2, r3
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	429a      	cmp	r2, r3
 8005066:	d302      	bcc.n	800506e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005068:	2301      	movs	r3, #1
 800506a:	617b      	str	r3, [r7, #20]
 800506c:	e01b      	b.n	80050a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800506e:	4b10      	ldr	r3, [pc, #64]	; (80050b0 <prvInsertTimerInActiveList+0x7c>)
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	3304      	adds	r3, #4
 8005076:	4619      	mov	r1, r3
 8005078:	4610      	mov	r0, r2
 800507a:	f7fe fa23 	bl	80034c4 <vListInsert>
 800507e:	e012      	b.n	80050a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	429a      	cmp	r2, r3
 8005086:	d206      	bcs.n	8005096 <prvInsertTimerInActiveList+0x62>
 8005088:	68ba      	ldr	r2, [r7, #8]
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	429a      	cmp	r2, r3
 800508e:	d302      	bcc.n	8005096 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005090:	2301      	movs	r3, #1
 8005092:	617b      	str	r3, [r7, #20]
 8005094:	e007      	b.n	80050a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005096:	4b07      	ldr	r3, [pc, #28]	; (80050b4 <prvInsertTimerInActiveList+0x80>)
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	3304      	adds	r3, #4
 800509e:	4619      	mov	r1, r3
 80050a0:	4610      	mov	r0, r2
 80050a2:	f7fe fa0f 	bl	80034c4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80050a6:	697b      	ldr	r3, [r7, #20]
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3718      	adds	r7, #24
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	20000c14 	.word	0x20000c14
 80050b4:	20000c10 	.word	0x20000c10

080050b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b08e      	sub	sp, #56	; 0x38
 80050bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80050be:	e09d      	b.n	80051fc <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	da18      	bge.n	80050f8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80050c6:	1d3b      	adds	r3, r7, #4
 80050c8:	3304      	adds	r3, #4
 80050ca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80050cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d10a      	bne.n	80050e8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80050d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d6:	f383 8811 	msr	BASEPRI, r3
 80050da:	f3bf 8f6f 	isb	sy
 80050de:	f3bf 8f4f 	dsb	sy
 80050e2:	61fb      	str	r3, [r7, #28]
}
 80050e4:	bf00      	nop
 80050e6:	e7fe      	b.n	80050e6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80050e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050ee:	6850      	ldr	r0, [r2, #4]
 80050f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050f2:	6892      	ldr	r2, [r2, #8]
 80050f4:	4611      	mov	r1, r2
 80050f6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	db7d      	blt.n	80051fa <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005104:	695b      	ldr	r3, [r3, #20]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d004      	beq.n	8005114 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800510a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800510c:	3304      	adds	r3, #4
 800510e:	4618      	mov	r0, r3
 8005110:	f7fe fa10 	bl	8003534 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005114:	463b      	mov	r3, r7
 8005116:	4618      	mov	r0, r3
 8005118:	f7ff ff6c 	bl	8004ff4 <prvSampleTimeNow>
 800511c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2b09      	cmp	r3, #9
 8005122:	d86b      	bhi.n	80051fc <prvProcessReceivedCommands+0x144>
 8005124:	a201      	add	r2, pc, #4	; (adr r2, 800512c <prvProcessReceivedCommands+0x74>)
 8005126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800512a:	bf00      	nop
 800512c:	08005155 	.word	0x08005155
 8005130:	08005155 	.word	0x08005155
 8005134:	08005155 	.word	0x08005155
 8005138:	080051fd 	.word	0x080051fd
 800513c:	080051b1 	.word	0x080051b1
 8005140:	080051e9 	.word	0x080051e9
 8005144:	08005155 	.word	0x08005155
 8005148:	08005155 	.word	0x08005155
 800514c:	080051fd 	.word	0x080051fd
 8005150:	080051b1 	.word	0x080051b1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005154:	68ba      	ldr	r2, [r7, #8]
 8005156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	18d1      	adds	r1, r2, r3
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005160:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005162:	f7ff ff67 	bl	8005034 <prvInsertTimerInActiveList>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d047      	beq.n	80051fc <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800516c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005170:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005172:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005176:	69db      	ldr	r3, [r3, #28]
 8005178:	2b01      	cmp	r3, #1
 800517a:	d13f      	bne.n	80051fc <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800517c:	68ba      	ldr	r2, [r7, #8]
 800517e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	441a      	add	r2, r3
 8005184:	2300      	movs	r3, #0
 8005186:	9300      	str	r3, [sp, #0]
 8005188:	2300      	movs	r3, #0
 800518a:	2100      	movs	r1, #0
 800518c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800518e:	f7ff fe1f 	bl	8004dd0 <xTimerGenericCommand>
 8005192:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005194:	6a3b      	ldr	r3, [r7, #32]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d130      	bne.n	80051fc <prvProcessReceivedCommands+0x144>
	__asm volatile
 800519a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519e:	f383 8811 	msr	BASEPRI, r3
 80051a2:	f3bf 8f6f 	isb	sy
 80051a6:	f3bf 8f4f 	dsb	sy
 80051aa:	61bb      	str	r3, [r7, #24]
}
 80051ac:	bf00      	nop
 80051ae:	e7fe      	b.n	80051ae <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80051b0:	68ba      	ldr	r2, [r7, #8]
 80051b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80051b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b8:	699b      	ldr	r3, [r3, #24]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d10a      	bne.n	80051d4 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80051be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c2:	f383 8811 	msr	BASEPRI, r3
 80051c6:	f3bf 8f6f 	isb	sy
 80051ca:	f3bf 8f4f 	dsb	sy
 80051ce:	617b      	str	r3, [r7, #20]
}
 80051d0:	bf00      	nop
 80051d2:	e7fe      	b.n	80051d2 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80051d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d6:	699a      	ldr	r2, [r3, #24]
 80051d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051da:	18d1      	adds	r1, r2, r3
 80051dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051e2:	f7ff ff27 	bl	8005034 <prvInsertTimerInActiveList>
					break;
 80051e6:	e009      	b.n	80051fc <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80051e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d104      	bne.n	80051fc <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80051f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051f4:	f000 fb6e 	bl	80058d4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80051f8:	e000      	b.n	80051fc <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80051fa:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80051fc:	4b07      	ldr	r3, [pc, #28]	; (800521c <prvProcessReceivedCommands+0x164>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	1d39      	adds	r1, r7, #4
 8005202:	2200      	movs	r2, #0
 8005204:	4618      	mov	r0, r3
 8005206:	f7fe fc57 	bl	8003ab8 <xQueueReceive>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	f47f af57 	bne.w	80050c0 <prvProcessReceivedCommands+0x8>
	}
}
 8005212:	bf00      	nop
 8005214:	bf00      	nop
 8005216:	3730      	adds	r7, #48	; 0x30
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}
 800521c:	20000c18 	.word	0x20000c18

08005220 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b088      	sub	sp, #32
 8005224:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005226:	e045      	b.n	80052b4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005228:	4b2c      	ldr	r3, [pc, #176]	; (80052dc <prvSwitchTimerLists+0xbc>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005232:	4b2a      	ldr	r3, [pc, #168]	; (80052dc <prvSwitchTimerLists+0xbc>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	3304      	adds	r3, #4
 8005240:	4618      	mov	r0, r3
 8005242:	f7fe f977 	bl	8003534 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524a:	68f8      	ldr	r0, [r7, #12]
 800524c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	69db      	ldr	r3, [r3, #28]
 8005252:	2b01      	cmp	r3, #1
 8005254:	d12e      	bne.n	80052b4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	693a      	ldr	r2, [r7, #16]
 800525c:	4413      	add	r3, r2
 800525e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005260:	68ba      	ldr	r2, [r7, #8]
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	429a      	cmp	r2, r3
 8005266:	d90e      	bls.n	8005286 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	68ba      	ldr	r2, [r7, #8]
 800526c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005274:	4b19      	ldr	r3, [pc, #100]	; (80052dc <prvSwitchTimerLists+0xbc>)
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	3304      	adds	r3, #4
 800527c:	4619      	mov	r1, r3
 800527e:	4610      	mov	r0, r2
 8005280:	f7fe f920 	bl	80034c4 <vListInsert>
 8005284:	e016      	b.n	80052b4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005286:	2300      	movs	r3, #0
 8005288:	9300      	str	r3, [sp, #0]
 800528a:	2300      	movs	r3, #0
 800528c:	693a      	ldr	r2, [r7, #16]
 800528e:	2100      	movs	r1, #0
 8005290:	68f8      	ldr	r0, [r7, #12]
 8005292:	f7ff fd9d 	bl	8004dd0 <xTimerGenericCommand>
 8005296:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d10a      	bne.n	80052b4 <prvSwitchTimerLists+0x94>
	__asm volatile
 800529e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a2:	f383 8811 	msr	BASEPRI, r3
 80052a6:	f3bf 8f6f 	isb	sy
 80052aa:	f3bf 8f4f 	dsb	sy
 80052ae:	603b      	str	r3, [r7, #0]
}
 80052b0:	bf00      	nop
 80052b2:	e7fe      	b.n	80052b2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80052b4:	4b09      	ldr	r3, [pc, #36]	; (80052dc <prvSwitchTimerLists+0xbc>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d1b4      	bne.n	8005228 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80052be:	4b07      	ldr	r3, [pc, #28]	; (80052dc <prvSwitchTimerLists+0xbc>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80052c4:	4b06      	ldr	r3, [pc, #24]	; (80052e0 <prvSwitchTimerLists+0xc0>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a04      	ldr	r2, [pc, #16]	; (80052dc <prvSwitchTimerLists+0xbc>)
 80052ca:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80052cc:	4a04      	ldr	r2, [pc, #16]	; (80052e0 <prvSwitchTimerLists+0xc0>)
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	6013      	str	r3, [r2, #0]
}
 80052d2:	bf00      	nop
 80052d4:	3718      	adds	r7, #24
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	20000c10 	.word	0x20000c10
 80052e0:	20000c14 	.word	0x20000c14

080052e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80052ea:	f000 f92f 	bl	800554c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80052ee:	4b15      	ldr	r3, [pc, #84]	; (8005344 <prvCheckForValidListAndQueue+0x60>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d120      	bne.n	8005338 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80052f6:	4814      	ldr	r0, [pc, #80]	; (8005348 <prvCheckForValidListAndQueue+0x64>)
 80052f8:	f7fe f896 	bl	8003428 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80052fc:	4813      	ldr	r0, [pc, #76]	; (800534c <prvCheckForValidListAndQueue+0x68>)
 80052fe:	f7fe f893 	bl	8003428 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005302:	4b13      	ldr	r3, [pc, #76]	; (8005350 <prvCheckForValidListAndQueue+0x6c>)
 8005304:	4a10      	ldr	r2, [pc, #64]	; (8005348 <prvCheckForValidListAndQueue+0x64>)
 8005306:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005308:	4b12      	ldr	r3, [pc, #72]	; (8005354 <prvCheckForValidListAndQueue+0x70>)
 800530a:	4a10      	ldr	r2, [pc, #64]	; (800534c <prvCheckForValidListAndQueue+0x68>)
 800530c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800530e:	2300      	movs	r3, #0
 8005310:	9300      	str	r3, [sp, #0]
 8005312:	4b11      	ldr	r3, [pc, #68]	; (8005358 <prvCheckForValidListAndQueue+0x74>)
 8005314:	4a11      	ldr	r2, [pc, #68]	; (800535c <prvCheckForValidListAndQueue+0x78>)
 8005316:	2110      	movs	r1, #16
 8005318:	200a      	movs	r0, #10
 800531a:	f7fe f99d 	bl	8003658 <xQueueGenericCreateStatic>
 800531e:	4603      	mov	r3, r0
 8005320:	4a08      	ldr	r2, [pc, #32]	; (8005344 <prvCheckForValidListAndQueue+0x60>)
 8005322:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005324:	4b07      	ldr	r3, [pc, #28]	; (8005344 <prvCheckForValidListAndQueue+0x60>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d005      	beq.n	8005338 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800532c:	4b05      	ldr	r3, [pc, #20]	; (8005344 <prvCheckForValidListAndQueue+0x60>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	490b      	ldr	r1, [pc, #44]	; (8005360 <prvCheckForValidListAndQueue+0x7c>)
 8005332:	4618      	mov	r0, r3
 8005334:	f7fe fdb0 	bl	8003e98 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005338:	f000 f938 	bl	80055ac <vPortExitCritical>
}
 800533c:	bf00      	nop
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	20000c18 	.word	0x20000c18
 8005348:	20000be8 	.word	0x20000be8
 800534c:	20000bfc 	.word	0x20000bfc
 8005350:	20000c10 	.word	0x20000c10
 8005354:	20000c14 	.word	0x20000c14
 8005358:	20000cc4 	.word	0x20000cc4
 800535c:	20000c24 	.word	0x20000c24
 8005360:	08005bd8 	.word	0x08005bd8

08005364 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005364:	b480      	push	{r7}
 8005366:	b085      	sub	sp, #20
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	3b04      	subs	r3, #4
 8005374:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800537c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	3b04      	subs	r3, #4
 8005382:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	f023 0201 	bic.w	r2, r3, #1
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	3b04      	subs	r3, #4
 8005392:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005394:	4a08      	ldr	r2, [pc, #32]	; (80053b8 <pxPortInitialiseStack+0x54>)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	3b14      	subs	r3, #20
 800539e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	3b20      	subs	r3, #32
 80053aa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80053ac:	68fb      	ldr	r3, [r7, #12]
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3714      	adds	r7, #20
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bc80      	pop	{r7}
 80053b6:	4770      	bx	lr
 80053b8:	080053bd 	.word	0x080053bd

080053bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80053c2:	2300      	movs	r3, #0
 80053c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80053c6:	4b12      	ldr	r3, [pc, #72]	; (8005410 <prvTaskExitError+0x54>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ce:	d00a      	beq.n	80053e6 <prvTaskExitError+0x2a>
	__asm volatile
 80053d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d4:	f383 8811 	msr	BASEPRI, r3
 80053d8:	f3bf 8f6f 	isb	sy
 80053dc:	f3bf 8f4f 	dsb	sy
 80053e0:	60fb      	str	r3, [r7, #12]
}
 80053e2:	bf00      	nop
 80053e4:	e7fe      	b.n	80053e4 <prvTaskExitError+0x28>
	__asm volatile
 80053e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ea:	f383 8811 	msr	BASEPRI, r3
 80053ee:	f3bf 8f6f 	isb	sy
 80053f2:	f3bf 8f4f 	dsb	sy
 80053f6:	60bb      	str	r3, [r7, #8]
}
 80053f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80053fa:	bf00      	nop
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d0fc      	beq.n	80053fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005402:	bf00      	nop
 8005404:	bf00      	nop
 8005406:	3714      	adds	r7, #20
 8005408:	46bd      	mov	sp, r7
 800540a:	bc80      	pop	{r7}
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	2000000c 	.word	0x2000000c
	...

08005420 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005420:	4b07      	ldr	r3, [pc, #28]	; (8005440 <pxCurrentTCBConst2>)
 8005422:	6819      	ldr	r1, [r3, #0]
 8005424:	6808      	ldr	r0, [r1, #0]
 8005426:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800542a:	f380 8809 	msr	PSP, r0
 800542e:	f3bf 8f6f 	isb	sy
 8005432:	f04f 0000 	mov.w	r0, #0
 8005436:	f380 8811 	msr	BASEPRI, r0
 800543a:	f04e 0e0d 	orr.w	lr, lr, #13
 800543e:	4770      	bx	lr

08005440 <pxCurrentTCBConst2>:
 8005440:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005444:	bf00      	nop
 8005446:	bf00      	nop

08005448 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005448:	4806      	ldr	r0, [pc, #24]	; (8005464 <prvPortStartFirstTask+0x1c>)
 800544a:	6800      	ldr	r0, [r0, #0]
 800544c:	6800      	ldr	r0, [r0, #0]
 800544e:	f380 8808 	msr	MSP, r0
 8005452:	b662      	cpsie	i
 8005454:	b661      	cpsie	f
 8005456:	f3bf 8f4f 	dsb	sy
 800545a:	f3bf 8f6f 	isb	sy
 800545e:	df00      	svc	0
 8005460:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005462:	bf00      	nop
 8005464:	e000ed08 	.word	0xe000ed08

08005468 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800546e:	4b32      	ldr	r3, [pc, #200]	; (8005538 <xPortStartScheduler+0xd0>)
 8005470:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	b2db      	uxtb	r3, r3
 8005478:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	22ff      	movs	r2, #255	; 0xff
 800547e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	b2db      	uxtb	r3, r3
 8005486:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005488:	78fb      	ldrb	r3, [r7, #3]
 800548a:	b2db      	uxtb	r3, r3
 800548c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005490:	b2da      	uxtb	r2, r3
 8005492:	4b2a      	ldr	r3, [pc, #168]	; (800553c <xPortStartScheduler+0xd4>)
 8005494:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005496:	4b2a      	ldr	r3, [pc, #168]	; (8005540 <xPortStartScheduler+0xd8>)
 8005498:	2207      	movs	r2, #7
 800549a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800549c:	e009      	b.n	80054b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800549e:	4b28      	ldr	r3, [pc, #160]	; (8005540 <xPortStartScheduler+0xd8>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	3b01      	subs	r3, #1
 80054a4:	4a26      	ldr	r2, [pc, #152]	; (8005540 <xPortStartScheduler+0xd8>)
 80054a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80054a8:	78fb      	ldrb	r3, [r7, #3]
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	005b      	lsls	r3, r3, #1
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80054b2:	78fb      	ldrb	r3, [r7, #3]
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ba:	2b80      	cmp	r3, #128	; 0x80
 80054bc:	d0ef      	beq.n	800549e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80054be:	4b20      	ldr	r3, [pc, #128]	; (8005540 <xPortStartScheduler+0xd8>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f1c3 0307 	rsb	r3, r3, #7
 80054c6:	2b04      	cmp	r3, #4
 80054c8:	d00a      	beq.n	80054e0 <xPortStartScheduler+0x78>
	__asm volatile
 80054ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ce:	f383 8811 	msr	BASEPRI, r3
 80054d2:	f3bf 8f6f 	isb	sy
 80054d6:	f3bf 8f4f 	dsb	sy
 80054da:	60bb      	str	r3, [r7, #8]
}
 80054dc:	bf00      	nop
 80054de:	e7fe      	b.n	80054de <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80054e0:	4b17      	ldr	r3, [pc, #92]	; (8005540 <xPortStartScheduler+0xd8>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	021b      	lsls	r3, r3, #8
 80054e6:	4a16      	ldr	r2, [pc, #88]	; (8005540 <xPortStartScheduler+0xd8>)
 80054e8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80054ea:	4b15      	ldr	r3, [pc, #84]	; (8005540 <xPortStartScheduler+0xd8>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80054f2:	4a13      	ldr	r2, [pc, #76]	; (8005540 <xPortStartScheduler+0xd8>)
 80054f4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	b2da      	uxtb	r2, r3
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80054fe:	4b11      	ldr	r3, [pc, #68]	; (8005544 <xPortStartScheduler+0xdc>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a10      	ldr	r2, [pc, #64]	; (8005544 <xPortStartScheduler+0xdc>)
 8005504:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005508:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800550a:	4b0e      	ldr	r3, [pc, #56]	; (8005544 <xPortStartScheduler+0xdc>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a0d      	ldr	r2, [pc, #52]	; (8005544 <xPortStartScheduler+0xdc>)
 8005510:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005514:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005516:	f000 f8b9 	bl	800568c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800551a:	4b0b      	ldr	r3, [pc, #44]	; (8005548 <xPortStartScheduler+0xe0>)
 800551c:	2200      	movs	r2, #0
 800551e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005520:	f7ff ff92 	bl	8005448 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005524:	f7ff f8be 	bl	80046a4 <vTaskSwitchContext>
	prvTaskExitError();
 8005528:	f7ff ff48 	bl	80053bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	e000e400 	.word	0xe000e400
 800553c:	20000d14 	.word	0x20000d14
 8005540:	20000d18 	.word	0x20000d18
 8005544:	e000ed20 	.word	0xe000ed20
 8005548:	2000000c 	.word	0x2000000c

0800554c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
	__asm volatile
 8005552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005556:	f383 8811 	msr	BASEPRI, r3
 800555a:	f3bf 8f6f 	isb	sy
 800555e:	f3bf 8f4f 	dsb	sy
 8005562:	607b      	str	r3, [r7, #4]
}
 8005564:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005566:	4b0f      	ldr	r3, [pc, #60]	; (80055a4 <vPortEnterCritical+0x58>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	3301      	adds	r3, #1
 800556c:	4a0d      	ldr	r2, [pc, #52]	; (80055a4 <vPortEnterCritical+0x58>)
 800556e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005570:	4b0c      	ldr	r3, [pc, #48]	; (80055a4 <vPortEnterCritical+0x58>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2b01      	cmp	r3, #1
 8005576:	d10f      	bne.n	8005598 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005578:	4b0b      	ldr	r3, [pc, #44]	; (80055a8 <vPortEnterCritical+0x5c>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00a      	beq.n	8005598 <vPortEnterCritical+0x4c>
	__asm volatile
 8005582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005586:	f383 8811 	msr	BASEPRI, r3
 800558a:	f3bf 8f6f 	isb	sy
 800558e:	f3bf 8f4f 	dsb	sy
 8005592:	603b      	str	r3, [r7, #0]
}
 8005594:	bf00      	nop
 8005596:	e7fe      	b.n	8005596 <vPortEnterCritical+0x4a>
	}
}
 8005598:	bf00      	nop
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	bc80      	pop	{r7}
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	2000000c 	.word	0x2000000c
 80055a8:	e000ed04 	.word	0xe000ed04

080055ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80055b2:	4b11      	ldr	r3, [pc, #68]	; (80055f8 <vPortExitCritical+0x4c>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10a      	bne.n	80055d0 <vPortExitCritical+0x24>
	__asm volatile
 80055ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055be:	f383 8811 	msr	BASEPRI, r3
 80055c2:	f3bf 8f6f 	isb	sy
 80055c6:	f3bf 8f4f 	dsb	sy
 80055ca:	607b      	str	r3, [r7, #4]
}
 80055cc:	bf00      	nop
 80055ce:	e7fe      	b.n	80055ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80055d0:	4b09      	ldr	r3, [pc, #36]	; (80055f8 <vPortExitCritical+0x4c>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	3b01      	subs	r3, #1
 80055d6:	4a08      	ldr	r2, [pc, #32]	; (80055f8 <vPortExitCritical+0x4c>)
 80055d8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80055da:	4b07      	ldr	r3, [pc, #28]	; (80055f8 <vPortExitCritical+0x4c>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d105      	bne.n	80055ee <vPortExitCritical+0x42>
 80055e2:	2300      	movs	r3, #0
 80055e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	f383 8811 	msr	BASEPRI, r3
}
 80055ec:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80055ee:	bf00      	nop
 80055f0:	370c      	adds	r7, #12
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bc80      	pop	{r7}
 80055f6:	4770      	bx	lr
 80055f8:	2000000c 	.word	0x2000000c
 80055fc:	00000000 	.word	0x00000000

08005600 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005600:	f3ef 8009 	mrs	r0, PSP
 8005604:	f3bf 8f6f 	isb	sy
 8005608:	4b0d      	ldr	r3, [pc, #52]	; (8005640 <pxCurrentTCBConst>)
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005610:	6010      	str	r0, [r2, #0]
 8005612:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005616:	f04f 0050 	mov.w	r0, #80	; 0x50
 800561a:	f380 8811 	msr	BASEPRI, r0
 800561e:	f7ff f841 	bl	80046a4 <vTaskSwitchContext>
 8005622:	f04f 0000 	mov.w	r0, #0
 8005626:	f380 8811 	msr	BASEPRI, r0
 800562a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800562e:	6819      	ldr	r1, [r3, #0]
 8005630:	6808      	ldr	r0, [r1, #0]
 8005632:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005636:	f380 8809 	msr	PSP, r0
 800563a:	f3bf 8f6f 	isb	sy
 800563e:	4770      	bx	lr

08005640 <pxCurrentTCBConst>:
 8005640:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005644:	bf00      	nop
 8005646:	bf00      	nop

08005648 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
	__asm volatile
 800564e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005652:	f383 8811 	msr	BASEPRI, r3
 8005656:	f3bf 8f6f 	isb	sy
 800565a:	f3bf 8f4f 	dsb	sy
 800565e:	607b      	str	r3, [r7, #4]
}
 8005660:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005662:	f7fe ff61 	bl	8004528 <xTaskIncrementTick>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d003      	beq.n	8005674 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800566c:	4b06      	ldr	r3, [pc, #24]	; (8005688 <xPortSysTickHandler+0x40>)
 800566e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005672:	601a      	str	r2, [r3, #0]
 8005674:	2300      	movs	r3, #0
 8005676:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	f383 8811 	msr	BASEPRI, r3
}
 800567e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005680:	bf00      	nop
 8005682:	3708      	adds	r7, #8
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	e000ed04 	.word	0xe000ed04

0800568c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800568c:	b480      	push	{r7}
 800568e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005690:	4b0a      	ldr	r3, [pc, #40]	; (80056bc <vPortSetupTimerInterrupt+0x30>)
 8005692:	2200      	movs	r2, #0
 8005694:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005696:	4b0a      	ldr	r3, [pc, #40]	; (80056c0 <vPortSetupTimerInterrupt+0x34>)
 8005698:	2200      	movs	r2, #0
 800569a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800569c:	4b09      	ldr	r3, [pc, #36]	; (80056c4 <vPortSetupTimerInterrupt+0x38>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a09      	ldr	r2, [pc, #36]	; (80056c8 <vPortSetupTimerInterrupt+0x3c>)
 80056a2:	fba2 2303 	umull	r2, r3, r2, r3
 80056a6:	099b      	lsrs	r3, r3, #6
 80056a8:	4a08      	ldr	r2, [pc, #32]	; (80056cc <vPortSetupTimerInterrupt+0x40>)
 80056aa:	3b01      	subs	r3, #1
 80056ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80056ae:	4b03      	ldr	r3, [pc, #12]	; (80056bc <vPortSetupTimerInterrupt+0x30>)
 80056b0:	2207      	movs	r2, #7
 80056b2:	601a      	str	r2, [r3, #0]
}
 80056b4:	bf00      	nop
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bc80      	pop	{r7}
 80056ba:	4770      	bx	lr
 80056bc:	e000e010 	.word	0xe000e010
 80056c0:	e000e018 	.word	0xe000e018
 80056c4:	20000000 	.word	0x20000000
 80056c8:	10624dd3 	.word	0x10624dd3
 80056cc:	e000e014 	.word	0xe000e014

080056d0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80056d0:	b480      	push	{r7}
 80056d2:	b085      	sub	sp, #20
 80056d4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80056d6:	f3ef 8305 	mrs	r3, IPSR
 80056da:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2b0f      	cmp	r3, #15
 80056e0:	d914      	bls.n	800570c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80056e2:	4a16      	ldr	r2, [pc, #88]	; (800573c <vPortValidateInterruptPriority+0x6c>)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	4413      	add	r3, r2
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80056ec:	4b14      	ldr	r3, [pc, #80]	; (8005740 <vPortValidateInterruptPriority+0x70>)
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	7afa      	ldrb	r2, [r7, #11]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d20a      	bcs.n	800570c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80056f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fa:	f383 8811 	msr	BASEPRI, r3
 80056fe:	f3bf 8f6f 	isb	sy
 8005702:	f3bf 8f4f 	dsb	sy
 8005706:	607b      	str	r3, [r7, #4]
}
 8005708:	bf00      	nop
 800570a:	e7fe      	b.n	800570a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800570c:	4b0d      	ldr	r3, [pc, #52]	; (8005744 <vPortValidateInterruptPriority+0x74>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005714:	4b0c      	ldr	r3, [pc, #48]	; (8005748 <vPortValidateInterruptPriority+0x78>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	429a      	cmp	r2, r3
 800571a:	d90a      	bls.n	8005732 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800571c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005720:	f383 8811 	msr	BASEPRI, r3
 8005724:	f3bf 8f6f 	isb	sy
 8005728:	f3bf 8f4f 	dsb	sy
 800572c:	603b      	str	r3, [r7, #0]
}
 800572e:	bf00      	nop
 8005730:	e7fe      	b.n	8005730 <vPortValidateInterruptPriority+0x60>
	}
 8005732:	bf00      	nop
 8005734:	3714      	adds	r7, #20
 8005736:	46bd      	mov	sp, r7
 8005738:	bc80      	pop	{r7}
 800573a:	4770      	bx	lr
 800573c:	e000e3f0 	.word	0xe000e3f0
 8005740:	20000d14 	.word	0x20000d14
 8005744:	e000ed0c 	.word	0xe000ed0c
 8005748:	20000d18 	.word	0x20000d18

0800574c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b08a      	sub	sp, #40	; 0x28
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005754:	2300      	movs	r3, #0
 8005756:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005758:	f7fe fe2c 	bl	80043b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800575c:	4b58      	ldr	r3, [pc, #352]	; (80058c0 <pvPortMalloc+0x174>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d101      	bne.n	8005768 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005764:	f000 f910 	bl	8005988 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005768:	4b56      	ldr	r3, [pc, #344]	; (80058c4 <pvPortMalloc+0x178>)
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4013      	ands	r3, r2
 8005770:	2b00      	cmp	r3, #0
 8005772:	f040 808e 	bne.w	8005892 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d01d      	beq.n	80057b8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800577c:	2208      	movs	r2, #8
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4413      	add	r3, r2
 8005782:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f003 0307 	and.w	r3, r3, #7
 800578a:	2b00      	cmp	r3, #0
 800578c:	d014      	beq.n	80057b8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f023 0307 	bic.w	r3, r3, #7
 8005794:	3308      	adds	r3, #8
 8005796:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f003 0307 	and.w	r3, r3, #7
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00a      	beq.n	80057b8 <pvPortMalloc+0x6c>
	__asm volatile
 80057a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a6:	f383 8811 	msr	BASEPRI, r3
 80057aa:	f3bf 8f6f 	isb	sy
 80057ae:	f3bf 8f4f 	dsb	sy
 80057b2:	617b      	str	r3, [r7, #20]
}
 80057b4:	bf00      	nop
 80057b6:	e7fe      	b.n	80057b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d069      	beq.n	8005892 <pvPortMalloc+0x146>
 80057be:	4b42      	ldr	r3, [pc, #264]	; (80058c8 <pvPortMalloc+0x17c>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d864      	bhi.n	8005892 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80057c8:	4b40      	ldr	r3, [pc, #256]	; (80058cc <pvPortMalloc+0x180>)
 80057ca:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80057cc:	4b3f      	ldr	r3, [pc, #252]	; (80058cc <pvPortMalloc+0x180>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80057d2:	e004      	b.n	80057de <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80057d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80057d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80057de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d903      	bls.n	80057f0 <pvPortMalloc+0xa4>
 80057e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d1f1      	bne.n	80057d4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80057f0:	4b33      	ldr	r3, [pc, #204]	; (80058c0 <pvPortMalloc+0x174>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d04b      	beq.n	8005892 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80057fa:	6a3b      	ldr	r3, [r7, #32]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2208      	movs	r2, #8
 8005800:	4413      	add	r3, r2
 8005802:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	6a3b      	ldr	r3, [r7, #32]
 800580a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800580c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580e:	685a      	ldr	r2, [r3, #4]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	1ad2      	subs	r2, r2, r3
 8005814:	2308      	movs	r3, #8
 8005816:	005b      	lsls	r3, r3, #1
 8005818:	429a      	cmp	r2, r3
 800581a:	d91f      	bls.n	800585c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800581c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4413      	add	r3, r2
 8005822:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	f003 0307 	and.w	r3, r3, #7
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00a      	beq.n	8005844 <pvPortMalloc+0xf8>
	__asm volatile
 800582e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005832:	f383 8811 	msr	BASEPRI, r3
 8005836:	f3bf 8f6f 	isb	sy
 800583a:	f3bf 8f4f 	dsb	sy
 800583e:	613b      	str	r3, [r7, #16]
}
 8005840:	bf00      	nop
 8005842:	e7fe      	b.n	8005842 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005846:	685a      	ldr	r2, [r3, #4]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	1ad2      	subs	r2, r2, r3
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005856:	69b8      	ldr	r0, [r7, #24]
 8005858:	f000 f8f8 	bl	8005a4c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800585c:	4b1a      	ldr	r3, [pc, #104]	; (80058c8 <pvPortMalloc+0x17c>)
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	4a18      	ldr	r2, [pc, #96]	; (80058c8 <pvPortMalloc+0x17c>)
 8005868:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800586a:	4b17      	ldr	r3, [pc, #92]	; (80058c8 <pvPortMalloc+0x17c>)
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	4b18      	ldr	r3, [pc, #96]	; (80058d0 <pvPortMalloc+0x184>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	429a      	cmp	r2, r3
 8005874:	d203      	bcs.n	800587e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005876:	4b14      	ldr	r3, [pc, #80]	; (80058c8 <pvPortMalloc+0x17c>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a15      	ldr	r2, [pc, #84]	; (80058d0 <pvPortMalloc+0x184>)
 800587c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800587e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005880:	685a      	ldr	r2, [r3, #4]
 8005882:	4b10      	ldr	r3, [pc, #64]	; (80058c4 <pvPortMalloc+0x178>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	431a      	orrs	r2, r3
 8005888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800588c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588e:	2200      	movs	r2, #0
 8005890:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005892:	f7fe fd9d 	bl	80043d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	f003 0307 	and.w	r3, r3, #7
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00a      	beq.n	80058b6 <pvPortMalloc+0x16a>
	__asm volatile
 80058a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a4:	f383 8811 	msr	BASEPRI, r3
 80058a8:	f3bf 8f6f 	isb	sy
 80058ac:	f3bf 8f4f 	dsb	sy
 80058b0:	60fb      	str	r3, [r7, #12]
}
 80058b2:	bf00      	nop
 80058b4:	e7fe      	b.n	80058b4 <pvPortMalloc+0x168>
	return pvReturn;
 80058b6:	69fb      	ldr	r3, [r7, #28]
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3728      	adds	r7, #40	; 0x28
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	20001924 	.word	0x20001924
 80058c4:	20001930 	.word	0x20001930
 80058c8:	20001928 	.word	0x20001928
 80058cc:	2000191c 	.word	0x2000191c
 80058d0:	2000192c 	.word	0x2000192c

080058d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b086      	sub	sp, #24
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d048      	beq.n	8005978 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80058e6:	2308      	movs	r3, #8
 80058e8:	425b      	negs	r3, r3
 80058ea:	697a      	ldr	r2, [r7, #20]
 80058ec:	4413      	add	r3, r2
 80058ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	685a      	ldr	r2, [r3, #4]
 80058f8:	4b21      	ldr	r3, [pc, #132]	; (8005980 <vPortFree+0xac>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4013      	ands	r3, r2
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d10a      	bne.n	8005918 <vPortFree+0x44>
	__asm volatile
 8005902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005906:	f383 8811 	msr	BASEPRI, r3
 800590a:	f3bf 8f6f 	isb	sy
 800590e:	f3bf 8f4f 	dsb	sy
 8005912:	60fb      	str	r3, [r7, #12]
}
 8005914:	bf00      	nop
 8005916:	e7fe      	b.n	8005916 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00a      	beq.n	8005936 <vPortFree+0x62>
	__asm volatile
 8005920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005924:	f383 8811 	msr	BASEPRI, r3
 8005928:	f3bf 8f6f 	isb	sy
 800592c:	f3bf 8f4f 	dsb	sy
 8005930:	60bb      	str	r3, [r7, #8]
}
 8005932:	bf00      	nop
 8005934:	e7fe      	b.n	8005934 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	685a      	ldr	r2, [r3, #4]
 800593a:	4b11      	ldr	r3, [pc, #68]	; (8005980 <vPortFree+0xac>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4013      	ands	r3, r2
 8005940:	2b00      	cmp	r3, #0
 8005942:	d019      	beq.n	8005978 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d115      	bne.n	8005978 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	685a      	ldr	r2, [r3, #4]
 8005950:	4b0b      	ldr	r3, [pc, #44]	; (8005980 <vPortFree+0xac>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	43db      	mvns	r3, r3
 8005956:	401a      	ands	r2, r3
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800595c:	f7fe fd2a 	bl	80043b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	685a      	ldr	r2, [r3, #4]
 8005964:	4b07      	ldr	r3, [pc, #28]	; (8005984 <vPortFree+0xb0>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4413      	add	r3, r2
 800596a:	4a06      	ldr	r2, [pc, #24]	; (8005984 <vPortFree+0xb0>)
 800596c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800596e:	6938      	ldr	r0, [r7, #16]
 8005970:	f000 f86c 	bl	8005a4c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005974:	f7fe fd2c 	bl	80043d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005978:	bf00      	nop
 800597a:	3718      	adds	r7, #24
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}
 8005980:	20001930 	.word	0x20001930
 8005984:	20001928 	.word	0x20001928

08005988 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800598e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005992:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005994:	4b27      	ldr	r3, [pc, #156]	; (8005a34 <prvHeapInit+0xac>)
 8005996:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f003 0307 	and.w	r3, r3, #7
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00c      	beq.n	80059bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	3307      	adds	r3, #7
 80059a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f023 0307 	bic.w	r3, r3, #7
 80059ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80059b0:	68ba      	ldr	r2, [r7, #8]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	4a1f      	ldr	r2, [pc, #124]	; (8005a34 <prvHeapInit+0xac>)
 80059b8:	4413      	add	r3, r2
 80059ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80059c0:	4a1d      	ldr	r2, [pc, #116]	; (8005a38 <prvHeapInit+0xb0>)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80059c6:	4b1c      	ldr	r3, [pc, #112]	; (8005a38 <prvHeapInit+0xb0>)
 80059c8:	2200      	movs	r2, #0
 80059ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	68ba      	ldr	r2, [r7, #8]
 80059d0:	4413      	add	r3, r2
 80059d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80059d4:	2208      	movs	r2, #8
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	1a9b      	subs	r3, r3, r2
 80059da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f023 0307 	bic.w	r3, r3, #7
 80059e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	4a15      	ldr	r2, [pc, #84]	; (8005a3c <prvHeapInit+0xb4>)
 80059e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80059ea:	4b14      	ldr	r3, [pc, #80]	; (8005a3c <prvHeapInit+0xb4>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2200      	movs	r2, #0
 80059f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80059f2:	4b12      	ldr	r3, [pc, #72]	; (8005a3c <prvHeapInit+0xb4>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2200      	movs	r2, #0
 80059f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	1ad2      	subs	r2, r2, r3
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005a08:	4b0c      	ldr	r3, [pc, #48]	; (8005a3c <prvHeapInit+0xb4>)
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	4a0a      	ldr	r2, [pc, #40]	; (8005a40 <prvHeapInit+0xb8>)
 8005a16:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	4a09      	ldr	r2, [pc, #36]	; (8005a44 <prvHeapInit+0xbc>)
 8005a1e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005a20:	4b09      	ldr	r3, [pc, #36]	; (8005a48 <prvHeapInit+0xc0>)
 8005a22:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005a26:	601a      	str	r2, [r3, #0]
}
 8005a28:	bf00      	nop
 8005a2a:	3714      	adds	r7, #20
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bc80      	pop	{r7}
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	20000d1c 	.word	0x20000d1c
 8005a38:	2000191c 	.word	0x2000191c
 8005a3c:	20001924 	.word	0x20001924
 8005a40:	2000192c 	.word	0x2000192c
 8005a44:	20001928 	.word	0x20001928
 8005a48:	20001930 	.word	0x20001930

08005a4c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b085      	sub	sp, #20
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005a54:	4b27      	ldr	r3, [pc, #156]	; (8005af4 <prvInsertBlockIntoFreeList+0xa8>)
 8005a56:	60fb      	str	r3, [r7, #12]
 8005a58:	e002      	b.n	8005a60 <prvInsertBlockIntoFreeList+0x14>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	60fb      	str	r3, [r7, #12]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d8f7      	bhi.n	8005a5a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	68ba      	ldr	r2, [r7, #8]
 8005a74:	4413      	add	r3, r2
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d108      	bne.n	8005a8e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	685a      	ldr	r2, [r3, #4]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	441a      	add	r2, r3
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	68ba      	ldr	r2, [r7, #8]
 8005a98:	441a      	add	r2, r3
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d118      	bne.n	8005ad4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	4b14      	ldr	r3, [pc, #80]	; (8005af8 <prvInsertBlockIntoFreeList+0xac>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d00d      	beq.n	8005aca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	685a      	ldr	r2, [r3, #4]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	441a      	add	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	601a      	str	r2, [r3, #0]
 8005ac8:	e008      	b.n	8005adc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005aca:	4b0b      	ldr	r3, [pc, #44]	; (8005af8 <prvInsertBlockIntoFreeList+0xac>)
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	601a      	str	r2, [r3, #0]
 8005ad2:	e003      	b.n	8005adc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d002      	beq.n	8005aea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005aea:	bf00      	nop
 8005aec:	3714      	adds	r7, #20
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bc80      	pop	{r7}
 8005af2:	4770      	bx	lr
 8005af4:	2000191c 	.word	0x2000191c
 8005af8:	20001924 	.word	0x20001924

08005afc <__libc_init_array>:
 8005afc:	b570      	push	{r4, r5, r6, lr}
 8005afe:	2600      	movs	r6, #0
 8005b00:	4d0c      	ldr	r5, [pc, #48]	; (8005b34 <__libc_init_array+0x38>)
 8005b02:	4c0d      	ldr	r4, [pc, #52]	; (8005b38 <__libc_init_array+0x3c>)
 8005b04:	1b64      	subs	r4, r4, r5
 8005b06:	10a4      	asrs	r4, r4, #2
 8005b08:	42a6      	cmp	r6, r4
 8005b0a:	d109      	bne.n	8005b20 <__libc_init_array+0x24>
 8005b0c:	f000 f830 	bl	8005b70 <_init>
 8005b10:	2600      	movs	r6, #0
 8005b12:	4d0a      	ldr	r5, [pc, #40]	; (8005b3c <__libc_init_array+0x40>)
 8005b14:	4c0a      	ldr	r4, [pc, #40]	; (8005b40 <__libc_init_array+0x44>)
 8005b16:	1b64      	subs	r4, r4, r5
 8005b18:	10a4      	asrs	r4, r4, #2
 8005b1a:	42a6      	cmp	r6, r4
 8005b1c:	d105      	bne.n	8005b2a <__libc_init_array+0x2e>
 8005b1e:	bd70      	pop	{r4, r5, r6, pc}
 8005b20:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b24:	4798      	blx	r3
 8005b26:	3601      	adds	r6, #1
 8005b28:	e7ee      	b.n	8005b08 <__libc_init_array+0xc>
 8005b2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b2e:	4798      	blx	r3
 8005b30:	3601      	adds	r6, #1
 8005b32:	e7f2      	b.n	8005b1a <__libc_init_array+0x1e>
 8005b34:	08005c88 	.word	0x08005c88
 8005b38:	08005c88 	.word	0x08005c88
 8005b3c:	08005c88 	.word	0x08005c88
 8005b40:	08005c8c 	.word	0x08005c8c

08005b44 <memcpy>:
 8005b44:	440a      	add	r2, r1
 8005b46:	4291      	cmp	r1, r2
 8005b48:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b4c:	d100      	bne.n	8005b50 <memcpy+0xc>
 8005b4e:	4770      	bx	lr
 8005b50:	b510      	push	{r4, lr}
 8005b52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b56:	4291      	cmp	r1, r2
 8005b58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b5c:	d1f9      	bne.n	8005b52 <memcpy+0xe>
 8005b5e:	bd10      	pop	{r4, pc}

08005b60 <memset>:
 8005b60:	4603      	mov	r3, r0
 8005b62:	4402      	add	r2, r0
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d100      	bne.n	8005b6a <memset+0xa>
 8005b68:	4770      	bx	lr
 8005b6a:	f803 1b01 	strb.w	r1, [r3], #1
 8005b6e:	e7f9      	b.n	8005b64 <memset+0x4>

08005b70 <_init>:
 8005b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b72:	bf00      	nop
 8005b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b76:	bc08      	pop	{r3}
 8005b78:	469e      	mov	lr, r3
 8005b7a:	4770      	bx	lr

08005b7c <_fini>:
 8005b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b7e:	bf00      	nop
 8005b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b82:	bc08      	pop	{r3}
 8005b84:	469e      	mov	lr, r3
 8005b86:	4770      	bx	lr
